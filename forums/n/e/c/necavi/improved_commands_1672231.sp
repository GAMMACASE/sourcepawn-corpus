/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <improved_commands>

public Plugin:myinfo = 
{
	name = "Improved Commands",
	author = "necavi",
	description = "Prvoides a better console cmd interface",
	version = "1.1",
	url = "http://necavi.com/"
}
new Handle:g_hCmds = INVALID_HANDLE;
new Handle:g_hCmdsFull = INVALID_HANDLE;
new Handle:g_hCmdParams = INVALID_HANDLE;
new Handle:g_hCmdParamReq = INVALID_HANDLE;
new Handle:g_hCmdParamTotal = INVALID_HANDLE;
new Handle:g_hCmdFunc = INVALID_HANDLE;
new Handle:g_hCmdPlugin = INVALID_HANDLE;
public APLRes:AskPluginLoad2(Handle:myself,bool:late)
{
	g_hCmds = CreateArray(32);
	g_hCmdsFull = CreateArray(64);
	g_hCmdParams = CreateArray(32);
	g_hCmdParamReq = CreateArray(2);
	g_hCmdParamTotal = CreateArray(2);
	g_hCmdFunc = CreateArray(2);
	g_hCmdPlugin = CreateArray(4);	
	CreateNative("Dev_RegAdminCmd",Native_RegAdminCmd);
	CreateNative("Dev_RegConCmd",Native_RegConCmd);
}
public Native_RegConCmd(Handle:plugin,numParams)
{
	new length = 0;
	GetNativeStringLength(1,length);
	length++;
	decl String:command[length];
	GetNativeString(1,command,length);
	new String:cmd[1][32];
	ExplodeString(command," ",cmd,sizeof(cmd),sizeof(cmd[]));
	new param[MAX_PARAMS];
	GetNativeArray(3,param,sizeof(param));
	PushArrayArray(g_hCmdParams,param);
	PushArrayCell(g_hCmdParamTotal,GetNativeCell(4));
	PushArrayCell(g_hCmdParamReq,GetNativeCell(5));
	PushArrayString(g_hCmds,cmd[0]);
	PushArrayString(g_hCmdsFull,command);
	PushArrayCell(g_hCmdFunc,GetNativeCell(2));
	PushArrayCell(g_hCmdPlugin,plugin);
	RegConsoleCmd(cmd[0],Dev_HandleConCmd,command);
}
public Native_RegAdminCmd(Handle:plugin,numParams)
{
	new length = 0;
	GetNativeStringLength(1,length);
	length++;
	decl String:command[length];
	GetNativeString(1,command,length);
	new String:cmd[1][32];
	ExplodeString(command," ",cmd,sizeof(cmd),sizeof(cmd[]));
	new param[MAX_PARAMS];
	GetNativeArray(4,param,sizeof(param));
	PushArrayArray(g_hCmdParams,param);
	PushArrayCell(g_hCmdParamTotal,GetNativeCell(5));
	PushArrayCell(g_hCmdParamReq,GetNativeCell(6));
	PushArrayString(g_hCmds,cmd[0]);
	PushArrayString(g_hCmdsFull,command);
	PushArrayCell(g_hCmdFunc,GetNativeCell(2));
	PushArrayCell(g_hCmdPlugin,plugin);
	RegAdminCmd(cmd[0],Dev_HandleConCmd,FlagToBit(GetNativeCell(3)),command);
}
public Action:Dev_HandleConCmd(client, args)
{
	decl String:command[32];
	GetCmdArg(0,command,sizeof(command));
	new cmdnum = FindStringInArray(g_hCmds,command);
	if(cmdnum>-1)
	{
		if(GetArrayCell(g_hCmdParamReq,cmdnum)<=args&&GetArrayCell(g_hCmdParamTotal,cmdnum)<=args)
		{
			Call_StartFunction(GetArrayCell(g_hCmdPlugin,cmdnum),GetArrayCell(g_hCmdFunc,cmdnum));
			Call_PushCell(client);
			new params[GetArrayCell(g_hCmdParamTotal,cmdnum)];
			GetArrayArray(g_hCmdParams,cmdnum,params);
			decl String:buff[64];
			for(new i;i<GetArrayCell(g_hCmdParamTotal,cmdnum);i++)
			{
				if(params[i]==_:Cmd_All)
				{
					GetCmdArgString(buff,sizeof(buff));
					Call_PushString(buff);
				} else if(params[i]==_:Cmd_Cell)
				{
					GetCmdArg(i+1,buff,sizeof(buff));
					Call_PushCell(StringToInt(buff));
				} else if(params[i]==_:Cmd_Float)
				{
					GetCmdArg(i+1,buff,sizeof(buff));
					Call_PushFloat(StringToFloat(buff));
				} else if(params[i]==_:Cmd_Filter)
				{
					GetCmdArg(i+1,buff,sizeof(buff));
					decl targets[MaxClients];
					decl String:target_name[32];
					new bool:tn_is_ml;
					new total = ProcessTargetString(buff,client,targets,MaxClients,0,target_name,sizeof(target_name),tn_is_ml);
					Call_PushArray(targets,total);
					Call_PushCell(total+1);
				} else if(params[i]==_:Cmd_String)
				{
					GetCmdArg(i+1,buff,sizeof(buff));
					Call_PushString(buff);
				}
			}
			Call_Finish();
		} else {
			decl String:reply[64];
			GetArrayString(g_hCmdsFull,cmdnum,reply,sizeof(reply));
			PrintToConsole(client,"Command args incorrect! Format: %s",reply);
		}
	}
	return Plugin_Handled;
}

