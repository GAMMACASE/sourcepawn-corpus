/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

#define SUPPRESS_VERSION "1.0.6"

public Plugin:myinfo = 
{
	name = "Suppress Messages",
	author = "FlyingMongoose",
	description = "Suppresses Different Messages",
	version = SUPPRESS_VERSION,
	url = "http://www.interwavestudios.com/"
}

new Handle:cvarBlockSpectateMessage;
new Handle:cvarBlockDisconnectMessage;
new Handle:cvarBlockConnectMessage;
new Handle:cvarSpectateValue;
new Handle:cvarAdminShowMessages;


new iMaxClients;

//new SpectatorTeam;

public OnPluginStart()
{
	CreateConVar("suppress_version",SUPPRESS_VERSION, _,FCVAR_PLUGIN|FCVAR_NOTIFY|FCVAR_REPLICATED|FCVAR_SPONLY);
	cvarBlockSpectateMessage = CreateConVar("sm_blockspectatemessage","1","If enabled it blocks the join team message if an administrator joins spectator",FCVAR_PLUGIN,true,0.0,true,1.0);
	cvarBlockDisconnectMessage = CreateConVar("sm_blockdisconnectmessage","1","Blocks the disconnect message",FCVAR_PLUGIN,true,0.0,true,1.0);
	cvarBlockConnectMessage = CreateConVar("sm_blockconnectmessage","1","If enabled it blocks the player connection message.",FCVAR_PLUGIN,true,0.0,true,1.0);
	cvarSpectateValue = CreateConVar("sm_suppress_spectatorvalue","1","The team index of the spectator team",FCVAR_PLUGIN,true,0.0,false);
	cvarAdminShowMessages = CreateConVar("sm_adminshowmessages","1","Shows disconnect/connect/team join messages for admins only (if disconnect message is set to be blocked)",FCVAR_PLUGIN,true,0.0,true,1.0);
	HookEvent("player_team",ev_PlayerTeam,EventHookMode_Pre);
	HookEvent("player_disconnect",ev_PlayerDisconnect,EventHookMode_Pre);
	HookEvent("player_connect",ev_PlayerConnect,EventHookMode_Pre);
	AutoExecConfig(true,"suppressmessage","sourcemod");
}

public OnConfigsExecuted()
{
	iMaxClients = GetMaxClients();
	//SpectatorTeam = FindTeamByName("Spectator");
}

public Action:ev_PlayerTeam(Handle:event, const String:name[], bool:dontBroadcast){
	if(GetConVarBool(cvarBlockSpectateMessage)){
		new userid = GetEventInt(event,"userid");
		new client = GetClientOfUserId(userid);
		if(client != 0)
		{
			new SpecTeam = GetConVarInt(cvarSpectateValue);
			if(GetEventInt(event,"team") == SpecTeam){
				decl String:clientName[255];
				decl String:AuthID[255];
				GetClientAuthString(client,AuthID,sizeof(AuthID));
				GetClientName(client,clientName,sizeof(clientName));
				if(GetUserAdmin(client) != INVALID_ADMIN_ID)
				{
					if(GetConVarInt(cvarAdminShowMessages) == 1)
					{
						for(new i = 1; i <= iMaxClients; i++)
						{
							if(IsClientConnected(i) && IsClientInGame(i) && GetUserAdmin(i) != INVALID_ADMIN_ID)
							{
								PrintToChat(i,"%s is joining the Spectators",clientName);
								PrintToConsole(i,"%s joined team Spectator",clientName);
							}
						}
					}
				}
				new String:oldTeamName[255];
				new String:teamName[255];
				GetTeamName(GetEventInt(event,"oldteam"),oldTeamName,sizeof(oldTeamName))
				GetTeamName(GetEventInt(event,"team"),teamName,sizeof(teamName));
				LogToGame("\"%s<%d><%s><%s>\" joined team \"%s\"",clientName,userid,AuthID,oldTeamName,teamName)
				return Plugin_Handled;
			}
			return Plugin_Continue;
		}
		return Plugin_Continue;
	}
	return Plugin_Continue;
}
public Action:ev_PlayerConnect(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(GetConVarBool(cvarBlockConnectMessage))
	{
		decl String:clientName[64], String:ipaddr[24], String:steamid[24];
		new index = GetEventInt(event,"index");

		if(index > 0)
		{
			new userid = GetEventInt(event,"userid");
		        GetEventString(event, "name", clientName, sizeof(clientName));
		        GetEventString(event, "networkid", steamid, sizeof(steamid));
		        GetEventString(event, "address", ipaddr, sizeof(ipaddr));

			LogToGame("\"%s<%d><%s><>\" connected, address \"%s\"", clientName, userid, steamid, ipaddr);
			
			if(GetConVarInt(cvarAdminShowMessages) == 1)
			{
				for(new i = 1; i <= iMaxClients; i++)
				{
					if(IsClientConnected(i) && IsClientInGame(i) && GetUserAdmin(i) != INVALID_ADMIN_ID)
					{
						PrintToChat(i, "%s has joined the game", clientName);
						PrintToConsole(i, "%s has connected", clientName);
					}
				}
			}	
		}
		return Plugin_Handled;
	}
	return Plugin_Continue;
}
public Action:ev_PlayerDisconnect(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(GetConVarBool(cvarBlockDisconnectMessage))
	{
		decl String:clientName[255];
		decl String:AuthID[255];
		new userid = GetEventInt(event,"userid")
		new client = GetClientOfUserId(userid);
		if(client != 0)
		{
			GetClientName(client,clientName,sizeof(clientName));
			GetClientAuthString(client,AuthID,sizeof(AuthID));
			if(GetConVarInt(cvarAdminShowMessages) == 1)
			{
				for(new i = 1; i <= iMaxClients; i++)
				{
					if(IsClientConnected(i) && IsClientInGame(i) && GetUserAdmin(i) != INVALID_ADMIN_ID)
					{
						PrintToChat(i,"%s has left the server",clientName);
						PrintToConsole(i,"Dropped %s from server (Disconnect by user)",clientName);
					}
				}
			}
			LogToGame("\"%s<%d><%s><Unassigned>\" disconnected (reason \"Disconnect by user.\")",clientName,userid,AuthID);
		}
		return Plugin_Handled;
	}else{
		return Plugin_Continue;
	}
}