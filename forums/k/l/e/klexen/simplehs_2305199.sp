/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <sdkhooks>

public Plugin:myinfo = 
{
	name = "Simple HS Only",
	author = "klexen",
	description = "A Simple HS Only Plugin",
	version = "1.1",
	url = ""
}

new Handle:g_hEnabled = INVALID_HANDLE;
new bool:g_bEnabled = true;

new Handle:g_hAllowKnife = INVALID_HANDLE;
new bool:g_bAllowKnife = true;

public OnPluginStart()
{
	
	Create_Convars();
	Hook_Convars();
	
	AutoExecConfig(true, "sm_simplehs");
	
	for(new i = 1; i <= MaxClients; i++)
	{
		if(IsClientValid(i))
		{
			SDKHook(i, SDKHook_OnTakeDamage, OnTakeDamage);
		}
	}
}

public OnConfigsExecuted()
{
	Load_Convars();
}

stock Create_Convars()
{
	g_hEnabled = CreateConVar("sm_simplehs_enabled", "1", "Enable / Disable Plugin", FCVAR_NONE, true, 0.0, true, 1.0);
	g_hAllowKnife = CreateConVar("sm_simplehs_allow_knife_kill", "1", "Allow Knife To Kill", FCVAR_NONE, true, 0.0, true, 1.0);
}

stock Load_Convars()
{
	g_bEnabled = GetConVarBool(g_hEnabled);
	g_bAllowKnife = GetConVarBool(g_hAllowKnife);
}

stock Hook_Convars()
{
	HookConVarChange(g_hEnabled, OnConVarChanged);
	HookConVarChange(g_hAllowKnife, OnConVarChanged);
}

public OnConVarChanged(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if (convar == g_hEnabled)
		g_bEnabled = StringToInt(newValue) == 1 ? true : false;
	else if (convar == g_hAllowKnife)
		g_bAllowKnife = StringToInt(newValue) == 1 ? true : false;
}

public OnClientPutInServer(i)
{
	SDKHook(i, SDKHook_OnTakeDamage, OnTakeDamage);
}

public Action:OnTakeDamage(victim, &attacker, &inflictor, &Float:damage, &damagetype, &weapon, Float:damageForce[3], Float:damagePosition[3])
{
	if(IsClientValid(victim) && g_bEnabled)
	{
		if(damagetype & DMG_BULLET) {
			return Plugin_Handled;
		} else if (damagetype & DMG_NEVERGIB) {
			if (g_bAllowKnife) {
				return Plugin_Continue;
			} else {
				return Plugin_Handled;
			}
		} else {
			return Plugin_Continue;
		}
	}
	return Plugin_Continue;
}

stock bool:IsClientValid(client)
{
	if(client > 0 && client <= MaxClients && IsClientInGame(client))
	{
		return true;
	}
	
	return false;
}