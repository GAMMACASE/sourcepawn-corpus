/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

public Plugin:myinfo = 
{
	name = "L4D Freeze/Pause Plugin",
	author = "Frustian",
	description = "Adds freezing and pausing",
	version = "1.0.0",
	url = ""
}
//cvar handles
new Handle:PAenabled;
//Various global variables
new Float:SurvivorHealthTime[4]; //Records the survivor's temp health
new TankFrustration = -1; //Records the tank's frustration
new InPause; //Records whether the game is paused
new InFreeze; //Records whether the game is frozen
new PauseClientIndex[MAXPLAYERS+1]; //Records client IDs as they were when the game was paused
new Float:InfectedDeathTime[MAXPLAYERS+1]; //Records how much time left people in death mode when the game was paused
public OnPluginStart()
{
	CreateConVar("l4d_freeze_version", "1.0.0", "Comp Plugin Version",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	PAenabled = CreateConVar("l4d_freeze_enabled", "1", "Enable Freezing/Pausing",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	directorpills = FindConVar("director_convert_pills");
	HookEvent("round_end", Event_RoundEnd, EventHookMode_PostNoCopy);
	HookEvent("tank_spawn", Event_TankSpawn, EventHookMode_Post);
	HookEvent("player_hurt", Event_PlayerHurt, EventHookMode_Post);
	RegConsoleCmd("sm_pause", RequestPause);
	RegConsoleCmd("sm_freeze", RequestFreeze);
}
public Action:ResetAllTemp(Handle:Timer) //This tries to maintain the game state as it was when the game was paused
{
	if (!InPause && !InFreeze)
		return Plugin_Stop;
	for (new i=1;i<=MaxClients;i++)
	{
		if (IsClientInGame(i) && IsPlayerAlive(i) && GetClientTeam(i) == 2)
		{
			ResetTempHealth(i);
			if (GetEntProp(i, Prop_Send, "m_hActiveWeapon") != GetPlayerWeaponSlot(i, 1))
				EquipPlayerWeapon(i, GetPlayerWeaponSlot(i, 1));
			SetEntProp(i, Prop_Send, "m_reviveOwner", 0);
			SetEntProp(i, Prop_Send, "m_reviveTarget", 0);
			SetEntProp(i, Prop_Send, "m_healOwner", 0);
			SetEntProp(i, Prop_Send, "m_healTarget", 0);
		}
		else if (IsClientInGame(i) && IsPlayerAlive(i) && GetClientTeam(i) == 3)
		{
			if (GetEntProp(i, Prop_Send, "m_zombieClass") == 5 && TankFrustration != -1)
			{
				SetEntProp(i, Prop_Send, "m_frustration", TankFrustration)
			}
			if (GetEntityMoveType(i) != MOVETYPE_NONE && GetEntityMoveType(i) != MOVETYPE_NOCLIP && InPause)
				SetEntityMoveType(i, MOVETYPE_NONE);
		}
	}
	if (InPause)
		PrintHintTextToAll("The game has been paused.\nType !pause in chat to unpause.");
	else
		PrintHintTextToAll("The survivors has been frozen.\nType !freeze in chat to unfreeze.");
	return Plugin_Continue;
}
public Action:FreezeSI(Handle:Timer, Handle:pack) //This freezes a SI to simulate a spawn time
{
	ResetPack(pack);
	new client = ReadPackCell(pack);
	new targettime = ReadPackCell(pack);
	new timeslooped = RoundToCeil(GetGameTime())-ReadPackCell(pack);
	if (targettime <= timeslooped || GetEntProp(client, Prop_Send, "m_zombieClass") == 5)  //Will automatically deactivate if the frozen player gets control of a tank
	{
		SetEntityMoveType(client, MOVETYPE_CUSTOM);
		PrintHintText(client, "You are free to move.");
		return Plugin_Stop;
	}
	if (GetEntityMoveType(client) != MOVETYPE_NONE && GetEntityMoveType(client) != MOVETYPE_NOCLIP)
		SetEntityMoveType(client, MOVETYPE_NONE);
	PrintHintText(client, "You are frozen for %d seconds.\nThis is to simulate your remaining spawn time during the pause.", targettime-timeslooped);
	return Plugin_Continue;
}
public Action:RequestPause(client, args)  //Player requested a pause
{
	if (!InPause)
	{
		if (InFreeze)
			UnfreezeGame();
		PauseGame();
	}
	else
		UnpauseGame();
}
public Action:RequestFreeze(client, args) //Player requested an unpause
{
	if (!InFreeze)
	{
		if (InPause)
			UnpauseGame();
		FreezeGame();
	}
	else
		UnfreezeGame();
}
public OnMapEnd()
{
	if (InPause)
		UnpauseGame();
	if (InFreeze)
		UnfreezeGame();
}
public Action:Event_PlayerHurt(Handle:event, const String:name[], bool:dontBroadcast) //Used to give any health lost back during the pause.
{
	if (InPause && GetConVarInt(PAenabled))
		SetEntityHealth(GetClientOfUserId(GetEventInt(event, "userid")), GetEventInt(event, "health") + GetEventInt(event, "dmg_health"));
}
public Action:Event_BeforeIncap(Handle:event, const String:name[], bool:dontBroadcast) //Used to detect if a player was incapped during a pause, since all survivors should have godmode this should never be activated, but is here as a backup.
{
	if (InPause && GetConVarInt(CPenabled))
	{
		new Handle:pack;
		CreateDataTimer(0.1, ResetIncap, pack);
		WritePackCell(pack, GetClientOfUserId(GetEventInt(event, "userid")));
		WritePackCell(pack, GetClientHealth(GetClientOfUserId(GetEventInt(event, "userid"))));
	}
}
public Action:Event_RoundEnd(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (InPause)
		UnpauseGame();
	if (InFreeze)
		UnfreezeGame();
}
public PauseGame() //Pause the game
{
	//doing director_stop on the server sets the below variables like so
	SetConVarInt(FindConVar("director_no_bosses"), 1);
	SetConVarInt(FindConVar("director_no_mobs"), 1);
	SetConVarInt(FindConVar("director_ready_duration"), 0);
	SetConVarInt(FindConVar("z_common_limit"), 0);
	SetConVarInt(FindConVar("z_mega_mob_size"), 1); //why not 0? only Valve knows
	
	//empty teams of survivors dont cycle the round
	SetConVarInt(FindConVar("sb_all_bot_team"), 1);
	//The above code is from Downtown1's ready up plugin
	
	SetConVarInt(FindConVar("nb_stop"), 1);
	SetConVarInt(FindConVar("sb_stop"), 1);
	SetConVarInt(FindConVar("z_pounce_delay"), 99999);
	SetConVarInt(FindConVar("tongue_range"), 0);
    SetConVarInt(FindConVar("z_vomit_duration"), 0);
	InPause = 1;
	new tankFrustrated = 0;
	for (new i=1;i<=MaxClients;i++)
	{
		if (IsClientInGame(i))
		{
			PauseClientIndex[i] = i;
			SetEntityMoveType(i,MOVETYPE_NONE);
			if (GetClientTeam(i) == 2)
			{
				InfectedDeathTime[i] = -1.0;
				if (IsPlayerAlive(i))
				{
					SurvivorHealthTime[GetEntProp(i, Prop_Send, "m_survivorCharacter")] = GetGameTime() - GetEntPropFloat(i, Prop_Send, "m_healthBufferTime");
					SetEntProp(i, Prop_Data, "m_fFlags", GetEntProp(i, Prop_Data, "m_fFlags") | FL_GODMODE);
				}
				else
				{
					SurvivorHealthTime[GetEntProp(i, Prop_Send, "m_survivorCharacter")] = 0.0;
				}
			}
			else if (GetClientTeam(i) == 3)
			{
				if (GetEntProp(i, Prop_Send, "m_zombieClass") == 5 && IsPlayerAlive(i))
				{
					TankFrustration = GetEntProp(i, Prop_Send, "m_frustration");
					tankFrustrated = 1;
				}
				if (!IsPlayerAlive(i))
					InfectedDeathTime[i] = (GetConVarInt(FindConVar("z_ghost_delay_min"))+GetConVarInt(FindConVar("z_ghost_delay_min")))/2.0 - (GetGameTime() - GetEntPropFloat(i, Prop_Send, "m_flDeathTime") - 14.0);
				else
					InfectedDeathTime[i] = -1.0;
			}
		}
		else
		{
			PauseClientIndex[i] = -1;
			InfectedDeathTime[i] = -1.0;
		}
	}
	if (!tankFrustrated)
		TankFrustration = -1;
	CreateTimer(1.0, ResetAllTemp, _, TIMER_REPEAT);
}
public UnpauseGame()
{
	ResetConVar(FindConVar("director_no_bosses"));
	ResetConVar(FindConVar("director_no_mobs"));
	ResetConVar(FindConVar("director_ready_duration"));
	ResetConVar(FindConVar("z_common_limit"));
	ResetConVar(FindConVar("z_mega_mob_size"));
	//The above code is from Downtown1's ready up plugin
	ResetConVar(FindConVar("nb_stop"));
	ResetConVar(FindConVar("sb_stop"));
	ResetConVar(FindConVar("z_pounce_delay"));
	ResetConVar(FindConVar("tongue_range"));
    ResetConVar(FindConVar("z_vomit_duration"));
	InPause = 0;
	for (new i=1;i<=MaxClients;i++)
	{
		if (IsClientInGame(i) && IsPlayerAlive(i))
		{
			SetEntityMoveType(i,MOVETYPE_CUSTOM);
			if (GetClientTeam(i) == 2)
			{
				ResetTempHealth(i);
				SetEntProp(i, Prop_Data, "m_fFlags", GetEntProp(i, Prop_Data, "m_fFlags") & ~FL_GODMODE);
			}
			else if (GetClientTeam(i) == 3)
			{
				if (GetEntProp(i, Prop_Send, "m_zombieClass") == 5 && TankFrustration != -1)
				{
					SetEntProp(i, Prop_Send, "m_frustration", TankFrustration)
					TankFrustration = -1;
				}
			}
		}
		if (PauseClientIndex[i] > 0 && IsClientInGame(PauseClientIndex[i]) && !IsFakeClient(PauseClientIndex[i]))
		{
			if (GetClientTeam(PauseClientIndex[i]) == 3 && InfectedDeathTime[i] != -1.0)
			{
				new Handle:pack;
				SetEntityMoveType(PauseClientIndex[i],MOVETYPE_NONE);
				CreateDataTimer(1.0, FreezeSI, pack, TIMER_REPEAT);
				WritePackCell(pack, PauseClientIndex[i]);
				WritePackCell(pack, RoundToCeil(InfectedDeathTime[i]));
				WritePackCell(pack, RoundToCeil(GetGameTime()));
				InfectedDeathTime[i] = -1.0;
			}
		}
	}
}
public FreezeGame() //Pause the game
{
	//doing director_stop on the server sets the below variables like so
	SetConVarInt(FindConVar("director_no_bosses"), 1);
	SetConVarInt(FindConVar("director_no_mobs"), 1);
	SetConVarInt(FindConVar("director_ready_duration"), 0);
	SetConVarInt(FindConVar("z_common_limit"), 0);
	SetConVarInt(FindConVar("z_mega_mob_size"), 1); //why not 0? only Valve knows
	
	//empty teams of survivors dont cycle the round
	SetConVarInt(FindConVar("sb_all_bot_team"), 1);
	//The above code is from Downtown1's ready up plugin
	
	SetConVarInt(FindConVar("nb_stop"), 1);
	SetConVarInt(FindConVar("sb_stop"), 1);
	SetConVarInt(FindConVar("z_pounce_delay"), 99999);
	SetConVarInt(FindConVar("tongue_range"), 0);
    SetConVarInt(FindConVar("z_vomit_duration"), 0);
	InPause = 1;
	new tankFrustrated = 0;
	for (new i=1;i<=MaxClients;i++)
	{
		if (IsClientInGame(i))
		{
			PauseClientIndex[i] = i;
			if (GetClientTeam(i) == 2)
			{
				if (IsPlayerAlive(i))
				{
					SurvivorHealthTime[GetEntProp(i, Prop_Send, "m_survivorCharacter")] = GetGameTime() - GetEntPropFloat(i, Prop_Send, "m_healthBufferTime");
					SetEntProp(i, Prop_Data, "m_fFlags", GetEntProp(i, Prop_Data, "m_fFlags") | FL_GODMODE);
					SetEntityMoveType(i,MOVETYPE_NONE);
				}
				else
				{
					SurvivorHealthTime[GetEntProp(i, Prop_Send, "m_survivorCharacter")] = 0.0;
				}
			}
			else if (GetClientTeam(i) == 3)
			{
				if (GetEntProp(i, Prop_Send, "m_zombieClass") == 5 && IsPlayerAlive(i))
				{
					TankFrustration = GetEntProp(i, Prop_Send, "m_frustration");
					tankFrustrated = 1;
				}
			}
		}
		else
		{
			PauseClientIndex[i] = -1;
		}
		InfectedDeathTime[i] = -1.0;
	}
	if (!tankFrustrated)
		TankFrustration = -1;
	CreateTimer(1.0, ResetAllTemp, _, TIMER_REPEAT);
}
public UnfreezeGame()
{
	ResetConVar(FindConVar("director_no_bosses"));
	ResetConVar(FindConVar("director_no_mobs"));
	ResetConVar(FindConVar("director_ready_duration"));
	ResetConVar(FindConVar("z_common_limit"));
	ResetConVar(FindConVar("z_mega_mob_size"));
	//The above code is from Downtown1's ready up plugin
	ResetConVar(FindConVar("nb_stop"));
	ResetConVar(FindConVar("sb_stop"));
	ResetConVar(FindConVar("z_pounce_delay"));
	ResetConVar(FindConVar("tongue_range"));
    ResetConVar(FindConVar("z_vomit_duration"));
	InPause = 0;
	for (new i=1;i<=MaxClients;i++)
	{
		if (IsClientInGame(i) && IsPlayerAlive(i))
		{
			SetEntityMoveType(i,MOVETYPE_CUSTOM);
			if (GetClientTeam(i) == 2)
			{
				ResetTempHealth(i);
				SetEntProp(i, Prop_Data, "m_fFlags", GetEntProp(i, Prop_Data, "m_fFlags") & ~FL_GODMODE);
			}
			else if (GetClientTeam(i) == 3)
			{
				if (GetEntProp(i, Prop_Send, "m_zombieClass") == 5 && TankFrustration != -1)
				{
					SetEntProp(i, Prop_Send, "m_frustration", TankFrustration)
					TankFrustration = -1;
				}
			}
		}
	}
}
public ResetTempHealth(client) //Restores a survivor's temp health to what it was when the game was paused.
{
	SetEntPropFloat(client, Prop_Send, "m_healthBufferTime", GetGameTime() - SurvivorHealthTime[GetEntProp(client, Prop_Send, "m_survivorCharacter")]);
}
public Action:Event_TankSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(CPenabled) || !GetConVarInt(TFenabled))
		return;
	if (InPause) //If somehow a tank spawned during a pause (possibly a tank passing as the game paused?) freeze it and set the frustration to 0.
	{
		SetEntityMoveType(GetEventInt(event, "tankid"),MOVETYPE_NONE);
		TankFrustration = 0;
	}
}