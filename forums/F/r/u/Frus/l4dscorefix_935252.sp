/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

public Plugin:myinfo = 
{
	name = "L4D Health Bonus Fix",
	author = "Frustian",
	description = "Fixes a logical error in the way Valve calculates health bonus",
	version = "1.0",
	url = ""
}

new bool:g_bSurvivorInCheckPoint[4];
new Float:g_fSurvivorHealthBuffer[4];
new Handle:g_hEnabled;
public OnPluginStart()
{
	CreateConVar("l4d_hbfix_version", "1.0", "L4D Health Bonus Fix Version",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	g_hEnabled = CreateConVar("l4d_hbfix_enabled", "1", "L4D Health Bonus Fix Enable/Disable",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	HookEvent("door_close", Event_DoorClose, EventHookMode_Post);
	HookEvent("player_entered_checkpoint", Event_EnterCheck, EventHookMode_Post);
	HookEvent("player_left_checkpoint", Event_ExitCheck, EventHookMode_Post);
	HookEvent("round_end", Event_RoundEnd, EventHookMode_PostNoCopy);
	HookEvent("finale_vehicle_leaving", Event_FinaleEnd, EventHookMode_PostNoCopy);
}
public Action:Event_DoorClose(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(g_hEnabled))
		return;
	if (GetEventInt(event, "checkpoint") && AreAllSurvivorsInCheckPoint())
		for (new i=1; i<MaxClients; i++)
			if (IsClientInGame(i) && IsClientConnected(i) && GetClientTeam(i) == 2 && IsPlayerAlive(i) && GetPlayerWeaponSlot(i, 3) > 0)
			{
				g_fSurvivorHealthBuffer[GetEntProp(i, Prop_Send, "m_survivorCharacter")] = GetEntPropFloat(i, Prop_Send, "m_healthBuffer");
				SetEntPropFloat(i, Prop_Send, "m_healthBuffer", 0.0);
			}
}
public Action:Event_FinaleEnd(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(g_hEnabled))
		return;
	for (new i=1; i<MaxClients; i++)
		if (IsClientInGame(i) && IsClientConnected(i) && GetClientTeam(i) == 2 && IsPlayerAlive(i) && GetPlayerWeaponSlot(i, 3) > 0)
			SetEntPropFloat(i, Prop_Send, "m_healthBuffer", 0.0);
}
public Action:Event_EnterCheck(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(g_hEnabled))
		return;
	if (GetClientOfUserId(GetEventInt(event, "userid")) > 0 && GetClientTeam(GetClientOfUserId(GetEventInt(event, "userid"))) == 2)
	{
		g_bSurvivorInCheckPoint[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] = true;
		if (g_fSurvivorHealthBuffer[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] == -1.0)
		{
			SetEntPropFloat(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_healthBuffer", 0.0);
			g_fSurvivorHealthBuffer[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] = 0.0;
		}
	}
}
public Action:Event_ExitCheck(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(g_hEnabled))
		return;
	if (GetClientOfUserId(GetEventInt(event, "userid")) > 0 && GetClientTeam(GetClientOfUserId(GetEventInt(event, "userid"))) == 2)
	{
		g_bSurvivorInCheckPoint[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] = false;
		if (g_fSurvivorHealthBuffer[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] > 0)
		{
			SetEntPropFloat(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_healthBuffer", g_fSurvivorHealthBuffer[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")]);
			g_fSurvivorHealthBuffer[GetEntProp(GetClientOfUserId(GetEventInt(event, "userid")), Prop_Send, "m_survivorCharacter")] = -1.0;
		}
	}
}
public Action:Event_RoundEnd(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarInt(g_hEnabled))
		return;
	for (new i=0;i<4;i++)
	{
		g_bSurvivorInCheckPoint[i] = false;
		g_fSurvivorHealthBuffer[i] = 0.0;
	}
	return;
}
public OnMapEnd()
{
	if (!GetConVarInt(g_hEnabled))
		return;
	for (new i=0;i<4;i++)
	{
		g_bSurvivorInCheckPoint[i] = false;
		g_fSurvivorHealthBuffer[i] = 0.0;
	}
}
public AreAllSurvivorsInCheckPoint()
{
	for (new i=1; i<MaxClients; i++)
		if (IsClientInGame(i) && IsClientConnected(i) && GetClientTeam(i) == 2 && IsPlayerAlive(i) && !g_bSurvivorInCheckPoint[GetEntProp(i, Prop_Send, "m_survivorCharacter")])
			return false;
	return true;
}