#include <sourcemod>
#include <sdktools>

#pragma semicolon 1

#define VERSION "1.0"

#define DOORMODEL "models/props_interiors/door_sliding_breakable01.mdl"

new Handle:cvarKill = INVALID_HANDLE;
new Handle:cvarSpec = INVALID_HANDLE;
new Handle:cvarDoor = INVALID_HANDLE;
new k, s, hookedRS;

public Plugin:myinfo =
{
	name = "L4D Anti-Exploits",
	author = "Fyren",
	description = "Stops a few ways to grief and exploit",
	version = VERSION,
	url = ""
};

public OnPluginStart()
{
	CreateConVar("l4de_version", VERSION, "L4D Anti-Exploits version", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_UNLOGGED|FCVAR_DONTRECORD|FCVAR_REPLICATED|FCVAR_NOTIFY);

	cvarKill = CreateConVar("l4de_kill", "1", "Block kill/explode for survivors", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	k = GetConVarInt(cvarKill);
	HookConVarChange(cvarKill, cvarCallback);

	cvarSpec = CreateConVar("l4de_spec", "1", "Stop infected spectator exploit ", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	s = GetConVarInt(cvarSpec);
	HookConVarChange(cvarSpec, cvarCallback);

	cvarDoor = CreateConVar("l4de_door", "1", "Make the NM3 exploit door unbreakable", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	HookConVarChange(cvarDoor, cvarCallback);

	AutoExecConfig(true, "l4de");

	RegConsoleCmd("kill", kill);
	RegConsoleCmd("explode", kill);
	RegConsoleCmd("spectate", spec);

	if (GetConVarInt(cvarDoor)) 
	{
		hookedRS = 1;
		HookEvent("round_start", eventRSDoor);
	}
}

public Action:test(client, args)
{
	new ent = GetClientAimTarget(client, false);

	if (ent < 1) ReplyToCommand(client, "< 1");
	else 
	{
		ReplyToCommand(client, "%d", GetEntProp(ent, Prop_Send, "m_nModelIndex"));
		new String:name[256];
		GetEntPropString(ent, Prop_Data, "m_ModelName", name, sizeof(name));
		ReplyToCommand(client, "%s", name);
	}

	return Plugin_Handled;
}

public cvarCallback(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if (convar == cvarKill) k = StringToInt(newValue);
	else if (convar == cvarSpec) s = StringToInt(newValue);
	else if (convar == cvarDoor)
		if (StringToInt(newValue) && !hookedRS)
		{
			hookedRS = 1;
			HookEvent("round_start", eventRSDoor);
		}
		else if (!StringToInt(newValue) && hookedRS)
		{
			hookedRS = 0;
			UnhookEvent("round_start", eventRSDoor);
		}
}

public eventRSDoor(Handle:event, const String:name[], bool:dontBroadcast)
{
	decl String:map[64];
	GetCurrentMap(map, sizeof(map));

	if (StrContains(map, "hospital03_sewers") == -1) return;

	new ent, found;
	decl String:model[256];
	while (!found && ((ent = FindEntityByClassname(ent, "prop_dynamic")) != -1))
	{
		GetEntPropString(ent, Prop_Data, "m_ModelName", model, sizeof(model));
		if (StrEqual(model, DOORMODEL)) found = 1;
	}

	if (found) SetEntProp(ent, Prop_Data, "m_iHealth", 100000);
	else LogError("Couldn't find the exploit door!");
}

public Action:kill(client, args) 
{
	if (!k || !client) return Plugin_Continue;

	if (GetClientTeam(client) == 2)
	{
		decl String:name[MAX_NAME_LENGTH];
		GetClientName(client, name, sizeof(name));

		PrintToChatAll("%s attempted to suicide.", name);
		return Plugin_Handled;
	}

	return Plugin_Continue;
}

public Action:spec(client, args)
{
	if (!s || !client) return Plugin_Continue;

	if (GetClientTeam(client) == 3) ForcePlayerSuicide(client);

	return Plugin_Continue;
}
