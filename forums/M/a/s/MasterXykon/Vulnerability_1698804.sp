// *********************************************************************************
// PREPROCESSOR
// *********************************************************************************
#pragma semicolon 0				  // Force strict semicolon mode.

// *********************************************************************************
// INCLUDES
// *********************************************************************************
#include <sourcemod.inc>
#include <tf2.inc>
#include <tf2_stocks.inc>
#include <sdktools.inc>

// *********************************************************************************
// CONSTANTS
// *********************************************************************************
// ---- Plugin-related constants ---------------------------------------------------
#define PLUGIN_NAME			"Vulnerability"
#define PLUGIN_AUTHOR			"Master Xykon"
#define PLUGIN_VERSION			"1.0.0"
#define PLUGIN_CONTACT			"http://forums.alliedmods.net/"
#define CVAR_FLAGS			FCVAR_PLUGIN|FCVAR_NOTIFY

new bool:vun = false


public OnPluginStart()
{
	LoadTranslations("common.phrases");
	RegAdminCmd("sm_vulnerable",  Command_vuln,  ADMFLAG_SLAY,  "Vulnerability - 0 = disabled, 1 = enabled");
	RegAdminCmd("sm_vuln",  Command_vuln,  ADMFLAG_SLAY,  "Vulnerability - 0 = disabled, 1 = enabled");
	RegAdminCmd("vuln",  Command_vuln,  ADMFLAG_SLAY,  "Vulnerability - 0 = disabled, 1 = enabled");
	RegConsoleCmd("kill",  PerformKill);
	RegConsoleCmd("explode",  PerformKill);
}

public bool:OnClientConnect(client, String:rejectmsg[], maxlen)
{
	return true;
}







/****************************************************************





			C A L L B A C K   F U N C T I O N S





****************************************************************/

public Action:Command_vuln(client,  args)
{
	decl String:target[65];

	decl String:chancePct[32];

	decl String:target_name[MAX_TARGET_LENGTH];

	decl target_list[MAXPLAYERS];

	decl target_count;

	decl bool:tn_is_ml;

	new Float:chance = 1;

	

	if (args < 2)

	{

		ReplyToCommand(client, "[SM] Usage: sm_vulnerable <#userid|name> <0/1> - Set to 0 for disabled, Set to 1 for enabled");

		return Plugin_Handled;

	}

	

	GetCmdArg(1, target, sizeof(target));

	

	GetCmdArg(2, chancePct, sizeof(chancePct));

	if (StringToFloatEx(chancePct, chance) == 0)

	{

		ReplyToCommand(client, "[SM] %t", "Invalid Amount");

		return Plugin_Handled;

	}

	

	if (chance < 0)

	{

		chance = 0;

	}

		

		

	

	if ((target_count = ProcessTargetString(

			target,

			client,

			target_list,

			MAXPLAYERS,

			0,

			target_name,

			sizeof(target_name),

			tn_is_ml)) <= 0)

	{

		ReplyToTargetError(client, target_count);

		return Plugin_Handled;

	}

	

	for (new i = 0; i < target_count; i++)

	{
		PerformRemove(client,  target_list[i],  chance);
	}


	if (chance == 1)
	{
		vun = true;
		ShowActivity2(client, "[SM] ", "Enabled Vulnerable on target '%s'", target_name);
	}
	else if (chance == 0)
	{
		vun = false;
		ShowActivity2(client, "[SM] ", "Disabled Vulnerable on target '%s'", target_name);
	}

	return Plugin_Handled; 
}







/*****************************************************************





			P L U G I N   F U N C T I O N S





*****************************************************************/


public Action:PerformRemove(client,  target,  Float:chance)
{
	if (chance == 1)
	{
		TF2_RemoveAllWeapons(target);
		LogAction(client, target, "\"%L\" removed \"%L\"'s weapons", client, target);
	}
	else
	{
	}
}

public Action:PerformKill(client,  target)
{
	if (vun == true)
	{
		PrintToChat(client,  "SelfKill is currently blocked");
		return Plugin_Handled;
	}
	else if (vun == false)
	{
	}
}
