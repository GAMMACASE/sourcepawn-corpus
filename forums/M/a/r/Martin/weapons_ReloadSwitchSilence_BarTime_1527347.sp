/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

public Plugin:myinfo = 
{
	name = "ReloadSwitchSilence_BarTime",
	author = "fs_wTong",
	description = "Reload Switch Silence BarTime",
	version = "1.0",
	url = "http://www.moddev.cn/forum.php?mod=viewthread&tid=125"
}

new g_maxplayers;
new bool:g_bSilenceAnim[33] = false;

public OnPluginStart()
{
	// Add your own code here...
	HookEvent("player_death", Event_PlayerDeath);
	HookUserMessage(GetUserMessageId("ReloadEffect"),Event_PlayerReload);
}

public OnMapStart()
{
	g_maxplayers = GetMaxClients();
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new victim = GetClientOfUserId(GetEventInt(event, "userid"));
	if(GetEntProp(victim, Prop_Send, "m_iProgressBarDuration")>0)
		SetEntProp(victim, Prop_Send, "m_iProgressBarDuration",0);
	
	g_bSilenceAnim[victim] = false;
}

public Action:Event_PlayerReload(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
{
	new client = BfReadByte(bf);
	if(IsClientUsingShotgun(client))
		return;
	
	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetWeaponNextPrimaryAttack(GetClientActiveWeapon(client))-GetGameTime()));
}


public Event_WeaponSwitch(client,newweapon,oldweapon)
{
	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetClientNextAttack(client)-GetGameTime()));
}

public Event_SilenceAnim(client)
{
	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetWeaponNextPrimaryAttack(GetClientActiveWeapon(client))-GetGameTime()));
}

public OnGameFrame()
{
	static oldweapon[33],newweapon[33];
	for(new client = 1; client <= g_maxplayers; client++)
	{
		
		if(!IsClientInGame(client)) continue;
 		if(IsClientConnected(client) && IsPlayerAlive(client))
		{
			new Float:flBarStartTime = GetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime");
			new iBarDuration = GetEntProp(client, Prop_Send, "m_iProgressBarDuration");
			if(iBarDuration>0 && flBarStartTime+float(iBarDuration) < GetGameTime())
				SetEntProp(client, Prop_Send, "m_iProgressBarDuration",0);
			
			newweapon[client] = GetClientActiveWeapon(client);
			if(newweapon[client] != oldweapon[client])
				Event_WeaponSwitch(client,newweapon[client],oldweapon[client]);
			oldweapon[client] = GetClientActiveWeapon(client);
			
			if(IsClientSilenceAnim(client) && !g_bSilenceAnim[client])
			{
				g_bSilenceAnim[client] = true;
				Event_SilenceAnim(client);
			}
			else if(!IsClientSilenceAnim(client) && g_bSilenceAnim[client])
			{
				g_bSilenceAnim[client] = false;
			}
		}
		
	}
	
}

public OnClientConnected(client)
{
	g_bSilenceAnim[client] = false;
}

public OnClientDisconnect_Post(client)
{
	g_bSilenceAnim[client] = false;
}

stock bool:IsClientUsingShotgun(client)
{
	new weapon = GetClientWeaponIndex(client);
	if(weapon == CSW_XM1014 || weapon == CSW_M3)
		return true;
	
	return false;
}

stock bool:IsClientSilenceAnim(client)
{
	new weapon = GetClientWeaponIndex(client);
	new iAnim = GetViewModelSequence(client);
	if(weapon == CSW_USP && (iAnim == 7 || iAnim == 15))
	{
		return true;
	}
	else if(weapon == CSW_M4A1 && (iAnim == 6 || iAnim == 13))
	{
		return true;
	}
	
	return false;
}