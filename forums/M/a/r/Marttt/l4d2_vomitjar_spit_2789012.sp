/**
// ====================================================================================================
Change Log:

1.0.2 (27-September-2022)
    - Changed detection of spit generated by vomitjar to compare based on same tick instead of position.

1.0.1 (19-September-2022)
    - Added cvar to attach a spitter slime trail particle. (thanks "AsphyxiaJLSA" for requesting)

1.0.0 (17-September-2022)
    - Initial release.

// ====================================================================================================
*/

// ====================================================================================================
// Plugin Info - define
// ====================================================================================================
#define PLUGIN_NAME                   "[L4D2] Vomitjar Puddle Spit"
#define PLUGIN_AUTHOR                 "Mart"
#define PLUGIN_DESCRIPTION            "Creates a puddle of spit where the vomitjar broke"
#define PLUGIN_VERSION                "1.0.2"
#define PLUGIN_URL                    "https://forums.alliedmods.net/showthread.php?t=339553"

// ====================================================================================================
// Plugin Info
// ====================================================================================================
public Plugin myinfo =
{
    name        = PLUGIN_NAME,
    author      = PLUGIN_AUTHOR,
    description = PLUGIN_DESCRIPTION,
    version     = PLUGIN_VERSION,
    url         = PLUGIN_URL
}

// ====================================================================================================
// Includes
// ====================================================================================================
#include <sourcemod>
#include <sdktools>
#include <sdkhooks>
#tryinclude <left4dhooks> // Download here: https://forums.alliedmods.net/showthread.php?t=321696

// ====================================================================================================
// Pragmas
// ====================================================================================================
#pragma semicolon 1
#pragma newdecls required

// ====================================================================================================
// Cvar Flags
// ====================================================================================================
#define CVAR_FLAGS                    FCVAR_NOTIFY
#define CVAR_FLAGS_PLUGIN_VERSION     FCVAR_NOTIFY|FCVAR_DONTRECORD|FCVAR_SPONLY

// ====================================================================================================
// Filenames
// ====================================================================================================
#define CONFIG_FILENAME               "l4d2_vomitjar_spit"

// ====================================================================================================
// Defines
// ====================================================================================================
#define MAXENTITIES                   2048

// ====================================================================================================
// entity - Plugin Variables
// ====================================================================================================
EntityType ge_eEntityType[MAXENTITIES+1];

// ====================================================================================================
// ArrayList - Plugin Variables
// ====================================================================================================
ArrayList g_alVomitjarProjectiles;

// ====================================================================================================
// enum structs - Plugin Variables
// ====================================================================================================
PluginData plugin;

// ====================================================================================================
// enums / enum structs
// ====================================================================================================
enum EntityType
{
    EntityType_Undefined,
    EntityType_VomitjarProjectile,
    EntityType_InsectSwarm
}

/****************************************************************************************************/

enum struct PluginCvars
{
    ConVar l4d2_vomitjar_spit_version;
    ConVar l4d2_vomitjar_spit_enable;
    ConVar l4d2_vomitjar_spit_puddle_max;
    ConVar l4d2_vomitjar_spit_attach_particle;

    void Init()
    {
        this.l4d2_vomitjar_spit_version         = CreateConVar("l4d2_vomitjar_spit_version", PLUGIN_VERSION, PLUGIN_DESCRIPTION, CVAR_FLAGS_PLUGIN_VERSION);
        this.l4d2_vomitjar_spit_enable          = CreateConVar("l4d2_vomitjar_spit_enable", "1", "Enable/Disable the plugin.\n0 = Disable, 1 = Enable.", CVAR_FLAGS, true, 0.0, true, 1.0);
        this.l4d2_vomitjar_spit_puddle_max      = CreateConVar("l4d2_vomitjar_spit_puddle_max", "2", "Maximum spit puddles (inferno flames).\nNote: Must be at least 2 to display particles.", CVAR_FLAGS, true, 1.0, true, 64.0);
        this.l4d2_vomitjar_spit_attach_particle = CreateConVar("l4d2_vomitjar_spit_attach_particle", "1", "Attach a spitter slime trail particle to the vomitjar thown.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);

        this.l4d2_vomitjar_spit_enable.AddChangeHook(Event_ConVarChanged);
        this.l4d2_vomitjar_spit_puddle_max.AddChangeHook(Event_ConVarChanged);
        this.l4d2_vomitjar_spit_attach_particle.AddChangeHook(Event_ConVarChanged);

        AutoExecConfig(true, CONFIG_FILENAME);
    }
}

/****************************************************************************************************/

enum struct PluginData
{
    PluginCvars cvars;

    bool enabled;
    int puddleMax;
    bool attachParticle;
    float cleanupInterval;

    void Init()
    {
        this.cleanupInterval = 30.0;
        g_alVomitjarProjectiles = new ArrayList(sizeof(VomitjarProjectileData));

        this.cvars.Init();
        this.RegisterCmds();
        this.CreateTimers();
    }

    void GetCvarValues()
    {
        this.enabled = this.cvars.l4d2_vomitjar_spit_enable.BoolValue;
        this.puddleMax = this.cvars.l4d2_vomitjar_spit_puddle_max.IntValue;
        this.attachParticle = this.cvars.l4d2_vomitjar_spit_attach_particle.BoolValue;
    }

    void RegisterCmds()
    {
        RegAdminCmd("sm_print_cvars_l4d2_vomitjar_spit", Cmd_PrintCvars, ADMFLAG_ROOT, "Print the plugin related cvars and their respective values to the console.");
    }

    void CreateTimers()
    {
        CreateTimer(this.cleanupInterval, Timer_CleanupArray, _, TIMER_REPEAT);
    }
}

/****************************************************************************************************/

enum struct VomitjarProjectileData
{
    int entRef;
    int ownerUserId;
    float spawnTime;
    float detonationTime;
    float vPosSpawn[3];
}

// ====================================================================================================
// left4dhooks - Plugin Dependencies
// ====================================================================================================
#if !defined _l4dh_included
native int L4D2_SpitterPrj(int client, const float vecPos[3], const float vecAng[3]);
native int L4D_DetonateProjectile(int entity);
native void L4D2Direct_SetInfernoMaxFlames(int entity, int flames);
#endif

// ====================================================================================================
// Plugin Start
// ====================================================================================================
public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
    EngineVersion engine = GetEngineVersion();

    if (engine != Engine_Left4Dead2)
    {
        strcopy(error, err_max, "This plugin only runs in \"Left 4 Dead 2\" game");
        return APLRes_SilentFailure;
    }

    #if !defined _l4dh_included
    MarkNativeAsOptional("L4D2_SpitterPrj");
    MarkNativeAsOptional("L4D_DetonateProjectile");
    MarkNativeAsOptional("L4D2Direct_SetInfernoMaxFlames");
    #endif

    return APLRes_Success;
}

/****************************************************************************************************/

public void OnPluginStart()
{
    plugin.Init();
}

/****************************************************************************************************/

void Event_ConVarChanged(ConVar convar, const char[] oldValue, const char[] newValue)
{
    OnConfigsExecuted();
}

/****************************************************************************************************/

public void OnConfigsExecuted()
{
    plugin.GetCvarValues();
}

/****************************************************************************************************/

/**
// ====================================================================================================
Events order:
01) OnEntityCreated>vomitjar_projectile
02) SDKHook_SpawnPost>vomitjar_projectile (get spawn time, owner and position)
03) OnEntityDestroyed>vomitjar_projectile (store detonation time)
04) left4dhooks>L4D2_SpitterPrj (set client and position)
05) left4dhooks>L4D_DetonateProjectile
06) OnEntityCreated>insect_swarm
07) SDKHook_SpawnPost>insect_swarm (get spawn time)
08) compare vomitjar_projectile detonation time with insect_swarm spawn time
09) RequestFrame>insect_swarm (need wait a frame to set the flames)
10) left4dhooks>L4D2Direct_SetInfernoMaxFlames
// ====================================================================================================
*/

/****************************************************************************************************/

public void OnEntityCreated(int entity, const char[] classname)
{
    if (!plugin.enabled)
        return;

    if (entity < 0)
        return;

    if (StrEqual(classname, "vomitjar_projectile"))
    {
        ge_eEntityType[entity] = EntityType_VomitjarProjectile;
        SDKHook(entity, SDKHook_SpawnPost, Hook_OnSpawnPost);
        return;
    }

    if (StrEqual(classname, "insect_swarm"))
    {
        ge_eEntityType[entity] = EntityType_InsectSwarm;
        SDKHook(entity, SDKHook_SpawnPost, Hook_OnSpawnPost);
        return;
    }
}

/****************************************************************************************************/

public void OnEntityDestroyed(int entity)
{
    if (!plugin.enabled)
        return;

    if (entity < 0)
        return;

    EntityType entityType = ge_eEntityType[entity];
    ge_eEntityType[entity] = EntityType_Undefined;

    if (entityType != EntityType_VomitjarProjectile)
        return;

    int find = g_alVomitjarProjectiles.FindValue(EntIndexToEntRef(entity), VomitjarProjectileData::entRef);

    if (find == -1)
        return;

    // Fix to prevent a console warning when has a particle attached by the plugin
    // Warning: Deleting orphaned children of vomitjar_projectile
    if (plugin.attachParticle)
        AcceptEntityInput(entity, "KillHierarchy");

    VomitjarProjectileData data;
    g_alVomitjarProjectiles.GetArray(find, data, sizeof(data));

    float vPos[3];
    GetEntPropVector(entity, Prop_Data, "m_vecAbsOrigin", vPos);

    if (data.vPosSpawn[0] == vPos[0] && data.vPosSpawn[1] == vPos[1] && data.vPosSpawn[2] == vPos[2]) // compatibility fix for l4d_grenades plugin
    {
        g_alVomitjarProjectiles.Erase(find);
        return;
    }

    data.detonationTime = GetGameTime();
    g_alVomitjarProjectiles.SetArray(find, data, sizeof(data));

    int client = GetClientOfUserId(data.ownerUserId);

    int spitter_projectile = L4D2_SpitterPrj(client, vPos, NULL_VECTOR);
    L4D_DetonateProjectile(spitter_projectile); // Detonate right after creation so we can track based on the detonation time
}

/****************************************************************************************************/

void Hook_OnSpawnPost(int entity)
{
    switch(ge_eEntityType[entity])
    {
        case EntityType_VomitjarProjectile:
        {
            int owner = GetEntPropEnt(entity, Prop_Data, "m_hOwnerEntity");

            float vPos[3];
            GetEntPropVector(entity, Prop_Data, "m_vecAbsOrigin", vPos);

            VomitjarProjectileData data;
            data.entRef = EntIndexToEntRef(entity);
            data.ownerUserId = (IsValidClientIndex(owner) ? GetClientUserId(owner) : 0);
            data.spawnTime = GetGameTime();
            data.vPosSpawn = vPos;
            g_alVomitjarProjectiles.PushArray(data, sizeof(data));

            if (plugin.attachParticle)
                AttachParticle(entity, "spitter_slime_trail", vPos);
        }

        case EntityType_InsectSwarm:
        {
            float spawnTime = GetGameTime();

            // Checks if it spawned on the same tick as the vomitjar was detonated
            int find = g_alVomitjarProjectiles.FindValue(spawnTime, VomitjarProjectileData::detonationTime);

            if (find == -1)
                return;

            g_alVomitjarProjectiles.Erase(find);

            RequestFrame(Frame_SpawnPostInsectSwarm, EntIndexToEntRef(entity)); // Flames can only be set in the next frame
        }
    }
}

/****************************************************************************************************/

void Frame_SpawnPostInsectSwarm(int entityRef)
{
    int entity = EntRefToEntIndex(entityRef);

    if (entity == INVALID_ENT_REFERENCE)
        return;

    L4D2Direct_SetInfernoMaxFlames(entity, plugin.puddleMax);
}

/****************************************************************************************************/

Action Timer_CleanupArray(Handle timer)
{
    if (!IsServerProcessing())
        return Plugin_Continue;

    if (!plugin.enabled)
        return Plugin_Continue;

    int maxLen = g_alVomitjarProjectiles.Length;
    VomitjarProjectileData data;

    for (int i = maxLen - 1; i >= 0; i--)
    {
        g_alVomitjarProjectiles.GetArray(i, data, sizeof(data));

        // Safe check, automatically removes from array if for some reason it wasn't removed and has been a while
        if (data.spawnTime + plugin.cleanupInterval < GetGameTime())
            g_alVomitjarProjectiles.Erase(i);
    }

    return Plugin_Continue;
}

/****************************************************************************************************/

void AttachParticle(int target, char[] particle, float origin[3])
{
    int entity = CreateEntityByName("info_particle_system");
    DispatchKeyValue(entity, "effect_name", particle);
    DispatchKeyValue(entity, "start_active", "1");
    DispatchKeyValueVector(entity, "origin", origin);
    DispatchSpawn(entity);
    ActivateEntity(entity); // Don't work without it

    SetVariantString("!activator");
    AcceptEntityInput(entity, "SetParent", target);
}

// ====================================================================================================
// Admin Commands
// ====================================================================================================
Action Cmd_PrintCvars(int client, int args)
{
    PrintToConsole(client, "");
    PrintToConsole(client, "======================================================================");
    PrintToConsole(client, "");
    PrintToConsole(client, "----------------- Plugin Cvars (l4d2_vomitjar_spit) ------------------");
    PrintToConsole(client, "");
    PrintToConsole(client, "l4d2_vomitjar_spit_version : %s", PLUGIN_VERSION);
    PrintToConsole(client, "l4d2_vomitjar_spit_enable : %b (%s)", plugin.enabled, plugin.enabled ? "true" : "false");
    PrintToConsole(client, "l4d2_vomitjar_spit_puddle_max : %i", plugin.puddleMax);
    PrintToConsole(client, "l4d2_vomitjar_spit_attach_particle : %b (%s)", plugin.attachParticle, plugin.attachParticle ? "true" : "false");
    PrintToConsole(client, "");
    PrintToConsole(client, "----------------------------- Array List -----------------------------");
    PrintToConsole(client, "");
    PrintToConsole(client, "g_alVomitjarProjectiles count : %i", g_alVomitjarProjectiles.Length);
    PrintToConsole(client, "");
    PrintToConsole(client, "======================================================================");
    PrintToConsole(client, "");

    return Plugin_Handled;
}

// ====================================================================================================
// Helpers
// ====================================================================================================
/**
 * Validates if is a valid client index.
 *
 * @param client        Client index.
 * @return              True if client index is valid, false otherwise.
 */
bool IsValidClientIndex(int client)
{
    return (1 <= client <= MaxClients);
}