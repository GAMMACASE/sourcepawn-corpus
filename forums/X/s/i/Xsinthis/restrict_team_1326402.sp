/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <cstrike>
#include <sdktools>

new Handle:db = INVALID_HANDLE;
new bool:IsClientRestricted[MAXPLAYERS + 1];

public Plugin:myinfo = 
{
	name = "Restrict Player's Teams",
	author = "Xsinthis`",
	description = "Restricts certain players from joining CT team",
	version = "1.0",
	url = "http://skulshockcommunity.com"
}

public OnPluginStart()
{
	RegAdminCmd("restrict_player", AddPlayerToList, ADMFLAG_UNBAN, "Adds a player to the restricted team list");
	if(SQL_CheckConfig("default")){
		SQL_TConnect(GotDatabase, "default");
	}else if(SQL_CheckConfig("storage-local")){
		SQL_TConnect(GotDatabase, "storage-local");
	}else{
		LogError("Error, could not find a valid database configuration")
	}
	HookEvent("player_team", Event_ChangeTeam);
}

public GotDatabase(Handle:owner, Handle:hndl, const String:error[], any:data)
{	
	decl String:ident[16];
	if (hndl == INVALID_HANDLE){
		SetFailState("Could not connect to database: %s", error);
		return;
	}else{
		db = hndl;
		SQL_ReadDriver(db, ident, sizeof(ident));
		decl String:query[512];
		if(strcmp(ident, "mysql", false) == 0){
			Format(query, sizeof(query), "CREATE TABLE IF DOES NOT EXIST restrict_team (name VARCHAR(32) NOT NULL, steamid VARCHAR(32) NOT NULL)");
		}else{
			Format(query, sizeof(query), "CREATE TABLE IF DOES NOT EXIST restrict_team (name TEXT, steamid TEXT)");
		}
		SQL_TQuery(db, SQLErrorCheckCallback, query);
	}
	
}

public OnClientAuthorized(client, const String:steamid[])
{
	decl String:query[512];
	Format(query, sizeof(query), "SELECT FROM restrict_team WHERE steamid='%s'", steamid);
	SQL_TQuery(db, SQL_IsPlayerRestricted, query, client);
	
	
}

public Action:Event_ChangeTeam(Handle:event, const String:name[], bool:dontBroadcast)
{
	decl String:teamName[512];
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new teamIndex = GetClientTeam(client);
	GetTeamName(teamIndex, teamName, sizeof(teamName));
	if(StrEqual(teamName, "Counter-Terrorists", false))
	{
		if(IsClientRestricted[client] && !IsFakeClient(client)){
			CS_SwitchTeam(client, CS_TEAM_T);
		}
	}
}

public Action:AddPlayerToList(client, args)
{
	decl String:query[512], String:clientName[MAX_NAME_LENGTH], String:steamid[32], String:arg1[MAX_TARGET_LENGTH];
	GetCmdArg(1, arg1, sizeof(arg1));
	client = FindTarget(0, arg1, true, false);
	GetClientName(client, clientName, sizeof(clientName));
	GetClientAuthString(client, steamid, sizeof(steamid));
	Format(query, sizeof(query), "INSERT INTO restrict_team (name, steamid) VALUES ('%s', '%s')", clientName, steamid);
}

public SQL_IsPlayerRestricted(Handle:owner, Handle:hndl, const String:error[], any:client)
{
	if(hndl == INVALID_HANDLE){
		LogError("Query Error: %s", error);
	}
	if(SQL_FetchRow(hndl)){
		IsClientRestricted[client] = true;
	}
}

public SQLErrorCheckCallback(Handle:owner, Handle:hndl, const String:error[], any:data) 
{
	if(!StrEqual("", error))
		LogError("Query failed(SQLErrorCheckCallback): %s", error);
}