/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

//##################+--------------+###########################
//##################| Skills menu |############################
//##################+--------------+###########################

//skillsmenu handler
public SkillmenuHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
    if(action==MenuAction_Select)
    {
        if(client>-1)
        {
            switch(selection)
            {
                //Experience
				case 0: 
                {
					new index = GetIndexFromClient(client);
					if (index > -1)
					{
						PrintToChat(client, "[Skillmenu] Current Experience: %i/%i", xp[index],SXPM_XpNeeded(client));
					}
					//return Plugin_Handled;
                }
                //Level
				case 1: 
                {
					new index = GetIndexFromClient(client);
					if (index > -1)
					{
						PrintToChat(client, "[Skillmenu] Current Level: %i/1800", lv[index]);
					}
					//return Plugin_Handled;
                }
                //Expend points
				case 2: 
                {
					new index = GetIndexFromClient(client);
					if (index > -1)
					{
						PrintToChat(client, "[Skillmenu] Current Expend Points: %i", ExpendPoints[index]);
					}
                }
                //skillmenu
				case 3: 
                {
					new String:args;
					skillsubmenu(client, args);
                }
                //Option 5: Menu for enabling or disabling showing the menu automatically
				case 4: 
                {
					new String:args;
					Settings_MessageMenu(client, args);
                }
                //Option 6: Go back to the main menu
				case 5: 
                {
					new String:args;
					generalmenu(client, args);
                }
			//the more choices the more cases.
			}
		}
	}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		//This message was annoying so I disabled it.
		//PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}
 
//skillsmenu
 public Action:skillmenu(client, args)
{
	new index = GetIndexFromClient(client);
	if (index > -1)
	{
		Format(Skill_Menu_Experiance, sizeof(Skill_Menu_Experiance), "Current Experience: %i/%i", xp[index],SXPM_XpNeeded(client));
		Format(Skill_Menu_Level, sizeof(Skill_Menu_Level), "Current Level: %i/1800", lv[index]);
		Format(Skill_Menu_Expend_point, sizeof(Skill_Menu_Expend_point), "Current Expend Points: %i", ExpendPoints[index]);
	}
	
	new Handle:menu = CreateMenu(SkillmenuHandler);
	SetMenuTitle(menu, "Skills | For this menu say !skills");
	AddMenuItem(menu,"op1",Skill_Menu_Experiance);
	AddMenuItem(menu,"op2",Skill_Menu_Level);//and so on
	AddMenuItem(menu,"op3",Skill_Menu_Expend_point);//and so on
	AddMenuItem(menu,"op4","Skills menu");//and so on
	AddMenuItem(menu,"op5","enable/disable autoshow");//and so on
	AddMenuItem(menu,"op6","Main menu");//and so on
	
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 5);
	
	return Plugin_Handled;
}
//##################+-----------------+###########################
//##################| Skills sub menu |###########################
//##################+-----------------+###########################

//skillsmenu handler
public SkillsubmenuHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
        if(action==MenuAction_Select)
        {
            if(client>-1)
            {
                switch(selection)
                {
                    //Option 1: View skills
					case 0: 
                    {
						new String:args;
						skillsubmenu_view(client, args);
                    }
                    //Option 2: Spend points
					case 1: 
                    {
						new String:args;
						skillsubmenu_spend(client, args);
                    }
                    //Option 3: Remove points
					case 2: 
                    {
						new String:args;
						skillsubmenu_remove(client, args);
                    }
                    //Option 4: Remove all points
					case 3: 
                    {
						new String:args;
						skillsubmenu_Resetall(client, args);
                    }
                    //Option 5: Confirm
					case 4: 
                    {
						new String:args;
						skillmenu(client, args);
                    }
			//the more choices the more cases.
				}
			}
		}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}
 
//skills sub menu
 public Action:skillsubmenu(client, args)
{
	new index = GetIndexFromClient(client);
	if (index > -1)
	{
	Format(Skill_Menu_Expend_point, sizeof(Skill_Menu_Expend_point), "Skills | Current Expend Points: %i", ExpendPoints[index]);
	}
	new Handle:menu = CreateMenu(SkillsubmenuHandler);
	SetMenuTitle(menu, Skill_Menu_Expend_point);
	AddMenuItem(menu,"op1","View skills");
	AddMenuItem(menu,"op2","Spend points");
	AddMenuItem(menu,"op3","Remove points");
	AddMenuItem(menu,"op4","Reset all points");
	AddMenuItem(menu,"op5","Back");
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
 
	return Plugin_Handled;
}

//###################+----------------------+###########################
//###################| Skills sub view menu |###########################
//###################+----------------------+###########################

//skillsmenu view handler
public Skillsubmenu_viewHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
        if(action==MenuAction_Select)
        {
            if(client>-1)
            {
                switch(selection)
                {
                    //Option 1: Give information about Strength points
					case 0: 
                    {
						PrintToChat(client, "Strength increases your maximum amount of health");
						//return Plugin_Handled;
                    }
                    //Option 2: Give information about Armor points
					case 1: 
                    {
						PrintToChat(client, "Armor increases your maximum amount of armor");
						//return Plugin_Handled;
                    }
                    //Option 3: Give information about health Regeneration
					case 2: 
                    {
						PrintToChat(client, "Health regeneration regenerates your health every so often. More points means faster regeneration and more each time.");
						//return Plugin_Handled;
                    }
                    //Option 4: Give information about NanoArmor
					case 3: 
                    {
						PrintToChat(client, "Nano armor regenerates your armor every so often. More points means faster regeneration and more each time");
						//return Plugin_Handled;
                    }
                    //Option 5: Give information about Ammo reincarnation
					case 4: 
                    {
						PrintToChat(client, "Ammo Reincarnation gives you ammo for your current weapon every so often. More points means faster reincarnation.");
						//return Plugin_Handled;
                    }
                    //Option 6: Give information about AntiGravity
					case 5: 
                    {
						PrintToChat(client, "Anti gravity makes you lighter, so you can jump higher. Do not set this skill very high or you will have trouble coming back down.");
						//return Plugin_Handled;
                    }
                    //Option 7: Give information about Speed
					case 6: 
                    {
						PrintToChat(client, "Speed makes you go faster. Do not set this skill very high or it makes it hard for you to move.");
						//return Plugin_Handled;
                    }
                    //Option 8: Give information about TeamPower
					case 7: 
                    {
						PrintToChat(client, "Teampower is supposed to heal players around you, but it's not working yet. Do not spend points on this.");
						//return Plugin_Handled;
                    }
                    //Option 9: Give information about BlockPoints
					case 8: 
                    {
						PrintToChat(client, "Blockpoints will block damage with a random probability. More points means a higher probability.");
						//return Plugin_Handled;
                    }
                    //Option 10: confirm
					case 9: 
                    {
						PrintToChat(client, "confirmed");
						//return Plugin_Handled;
                    }
			//the more choices the more cases.
				}
			}
		}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		//PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}
 
//skills sub view menu
 public Action:skillsubmenu_view(client, args)
{
	new index = GetIndexFromClient(client);
	if (index > -1)
	{
	Format(Skill_Sub_Menu_Strength, sizeof(Skill_Sub_Menu_Strength), "(1)Strengh points: %i/400", Strength[index]);
	Format(Skill_Sub_Menu_Armor, sizeof(Skill_Sub_Menu_Armor), "(2)Armor points: %i/450", Armor[index]);
	Format(Skill_Sub_Menu_Regeneration, sizeof(Skill_Sub_Menu_Regeneration), "(3)Regeneration: %i/300", Regeneration[index]);
	Format(Skill_Sub_Menu_NanoArmor, sizeof(Skill_Sub_Menu_NanoArmor), "(4)Nano Armor: %i/300", NanoArmor[index]);
	Format(Skill_Sub_Menu_AmmoRein, sizeof(Skill_Sub_Menu_AmmoRein), "(5)Ammo Reincarnation: %i/300", AmunRein[index]);
	Format(Skill_Sub_Menu_AntiGravity, sizeof(Skill_Sub_Menu_AntiGravity), "(6)Anti Gravity: %i/40", AntiGrav[index]);
	Format(Skill_Sub_Menu_Speed, sizeof(Skill_Sub_Menu_Speed), "(7)Speed: %i/80", SpeedI[index]);
	Format(Skill_Sub_Menu_TeamPower, sizeof(Skill_Sub_Menu_TeamPower), "(8)Team power: %i/60", TeamPower[index]);
	Format(Skill_Sub_Menu_BlockPoints, sizeof(Skill_Sub_Menu_BlockPoints), "(9)Block points: %i/140", BlockAttack[index]);
	}
	new Handle:menu = CreateMenu(Skillsubmenu_viewHandler);
	SetMenuTitle(menu, "View Skills");
	AddMenuItem(menu,"op1",Skill_Sub_Menu_Strength);
	AddMenuItem(menu,"op2",Skill_Sub_Menu_Armor);//and so on
	AddMenuItem(menu,"op3",Skill_Sub_Menu_Regeneration);//and so on
	AddMenuItem(menu,"op4",Skill_Sub_Menu_NanoArmor);//and so on
	AddMenuItem(menu,"op5",Skill_Sub_Menu_AmmoRein);//and so on
	AddMenuItem(menu,"op6",Skill_Sub_Menu_AntiGravity);//and so on
	AddMenuItem(menu,"op7",Skill_Sub_Menu_Speed);//and so on
	AddMenuItem(menu,"op8",Skill_Sub_Menu_TeamPower);//and so on
	AddMenuItem(menu,"op9",Skill_Sub_Menu_BlockPoints);//and so on
	AddMenuItem(menu,"op10","Ok");//and so on
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
 
	return Plugin_Handled;
}
//###################+-----------------------+###########################
//###################| Skills sub spend menu |###########################
//###################+-----------------------+###########################

//skills sub menu spend handler
public skillsubmenu_spendHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
        if(action==MenuAction_Select)
        {
            if(client>-1)
            {
                switch(selection)
                {
                    //Option 1: Give client instructions
					case 0: 
                    {
						PrintToChat(client, "Add 1 point to:");
						//return Plugin_Handled;
                    }
                    ////Option 2: add 1 point to Strength
					case 1: 
                    {
						PrintToChat(client, "Trying spend point on Strength...");
						new String:args;
						Skills_Add_Strength_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 3: add 1 point to Armor
					case 2: 
                    {
						PrintToChat(client, "Trying spend point on Armor...");
						new String:args;
						Skills_Add_Armor_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 4: add 1 point to Regen
					case 3: 
                    {
						PrintToChat(client, "Trying spend point on Regeneration...");
						new String:args;
						Skills_Add_Regen_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 5: add 1 point to NanoArmor
					case 4: 
                    {
						PrintToChat(client, "Trying spend point on NanoArmor...");
						new String:args;
						Skills_Add_NanoArmor_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 6: add 1 point to AmmoRein
					case 5: 
                    {
						PrintToChat(client, "Trying spend point on AmmoRein...");
						new String:args;
						Skills_Add_AmmoRein_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 7: add 1 point to AntiGravity
					case 6: 
                    {
						PrintToChat(client, "Trying spend point on AntiGravity...");
						new String:args;
						Skills_Add_AntiGravity_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 8: add 1 point to Speed
					case 7: 
                    {
						PrintToChat(client, "Trying spend point on speed...");
						new String:args;
						Skills_Add_Speed_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 9: add 1 point to TeamPower
					case 8: 
                    {
						PrintToChat(client, "Trying spend point on TeamPower...");
						new String:args;
						Skills_Add_TeamPower_Point(client, args);
						//return Plugin_Handled;
                    }
                    ////Option 10: add 1 point to BlockPoints
					case 9: 
                    {						
						PrintToChat(client, "Trying spend point on BlockPoints...");
						new String:args;
						Skills_Add_BlockPoints_Point(client, args);
						//return Plugin_Handled;
                    }
			//the more choices the more cases.
				}
			}
		}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
	//return Plugin_Handled;
}
 
//skills sub add points menu
 public Action:skillsubmenu_spend(client, args)
{
	new index = GetIndexFromClient(client);
	if (index > -1)
	{
	Format(Skill_Sub_Menu_Strength, sizeof(Skill_Sub_Menu_Strength), "(1)Strengh points: %i/400", Strength[index]);
	Format(Skill_Sub_Menu_Armor, sizeof(Skill_Sub_Menu_Armor), "(2)Armor points: %i/450", Armor[index]);
	Format(Skill_Sub_Menu_Regeneration, sizeof(Skill_Sub_Menu_Regeneration), "(3)Regeneration: %i/300", Regeneration[index]);
	Format(Skill_Sub_Menu_NanoArmor, sizeof(Skill_Sub_Menu_NanoArmor), "(4)Nano Armor: %i/300", NanoArmor[index]);
	Format(Skill_Sub_Menu_AmmoRein, sizeof(Skill_Sub_Menu_AmmoRein), "(5)Ammo Reincarnation: %i/300", AmunRein[index]);
	Format(Skill_Sub_Menu_AntiGravity, sizeof(Skill_Sub_Menu_AntiGravity), "(6)Anti Gravity: %i/40", AntiGrav[index]);
	Format(Skill_Sub_Menu_Speed, sizeof(Skill_Sub_Menu_Speed), "(7)Speed: %i/80", SpeedI[index]);
	Format(Skill_Sub_Menu_TeamPower, sizeof(Skill_Sub_Menu_TeamPower), "(8)Team power: %i/60", TeamPower[index]);
	Format(Skill_Sub_Menu_BlockPoints, sizeof(Skill_Sub_Menu_BlockPoints), "(9)Block points: %i/140", BlockAttack[index]);
	}
	
	new Handle:menu = CreateMenu(skillsubmenu_spendHandler);
	SetMenuTitle(menu, "Spend skill points | Expend points: %i", ExpendPoints[index]);
	AddMenuItem(menu,"op1","Spend 1 point on:");
	AddMenuItem(menu,"op2",Skill_Sub_Menu_Strength);
	AddMenuItem(menu,"op3",Skill_Sub_Menu_Armor);//and so on
	AddMenuItem(menu,"op4",Skill_Sub_Menu_Regeneration);//and so on
	AddMenuItem(menu,"op5",Skill_Sub_Menu_NanoArmor);//and so on
	AddMenuItem(menu,"op6",Skill_Sub_Menu_AmmoRein);//and so on
	AddMenuItem(menu,"op7",Skill_Sub_Menu_AntiGravity);//and so on
	AddMenuItem(menu,"op8",Skill_Sub_Menu_Speed);//and so on
	AddMenuItem(menu,"op9",Skill_Sub_Menu_TeamPower);//and so on
	AddMenuItem(menu,"op10",Skill_Sub_Menu_BlockPoints);//and so on
	AddMenuItem(menu,"op11","Ok");//and so on
	
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
 
	return Plugin_Handled;
	//return menu;
}
//###################+----------------------+###########################
//###################| Skills sub remove menu |###########################
//###################+----------------------+###########################

//skills sub menu remove handler
public skillsubmenu_removeHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
        if(action==MenuAction_Select)
        {
            if(client>-1)
            {
                switch(selection)
                {
                    //Option 1: Tell client instructions
					case 0: 
                    {
						PrintToChat(client, "Use this to remove a point from a skill");
						//return Plugin_Handled;
                    }
                    //Option 2: Remove 1 point from Strength
					case 1: 
                    {
						PrintToChat(client, "Trying remove Strength point...");
						new String:args;
						Skills_Remove_Strength_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 3: Remove 1 point from Armor
					case 2: 
                    {
						PrintToChat(client, "Trying remove Armor point...");
						new String:args;
						Skills_Remove_Armor_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 4: Remove 1 point from Regeneration
					case 3: 
                    {
						PrintToChat(client, "Trying remove Regeneration point...");
						new String:args;
						Skills_Remove_Regen_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 5: Remove 1 point from NanoArmor
					case 4: 
                    {
						PrintToChat(client, "Trying remove NanoArmor point...");
						new String:args;
						Skills_Remove_NanoArmor_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 6: Remove 1 point from AmmoRein
					case 5: 
                    {
						PrintToChat(client, "Trying remove AmmoRein point...");
						new String:args;
						Skills_Remove_AmmoRein_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 7: Remove 1 point from AntiGravity
					case 6: 
                    {
						PrintToChat(client, "Trying remove AntiGravity point...");
						new String:args;
						Skills_Remove_AntiGravity_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 8: Remove 1 point from Speed
					case 7: 
                    {
						PrintToChat(client, "Trying remove Speed point...");
						new String:args;
						Skills_Remove_Speed_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 9: Remove 1 point from TeamPower
					case 8: 
                    {
						PrintToChat(client, "Trying remove TeamPower point...");
						new String:args;
						Skills_Remove_TeamPower_Point(client, args);
						//return Plugin_Handled;
                    }
                    //Option 10: Remove 1 point from BlockPoints
					case 9: 
                    {
						PrintToChat(client, "Trying remove BlockPoints point...");
						new String:args;
						Skills_Remove_BlockPoints_Point(client, args);
						//return Plugin_Handled;
                    }
			//the more choices the more cases.
				}
			}
		}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}
 
//skills sub remove menu
 public Action:skillsubmenu_remove(client, args)
{
	new index = GetIndexFromClient(client);
	if (index > -1)
	{
	Format(Skill_Sub_Menu_Strength, sizeof(Skill_Sub_Menu_Strength), "(1)Strengh points: %i/400", Strength[index]);
	Format(Skill_Sub_Menu_Armor, sizeof(Skill_Sub_Menu_Armor), "(2)Armor points: %i/450", Armor[index]);
	Format(Skill_Sub_Menu_Regeneration, sizeof(Skill_Sub_Menu_Regeneration), "(3)Regeneration: %i/300", Regeneration[index]);
	Format(Skill_Sub_Menu_NanoArmor, sizeof(Skill_Sub_Menu_NanoArmor), "(4)Nano Armor: %i/300", NanoArmor[index]);
	Format(Skill_Sub_Menu_AmmoRein, sizeof(Skill_Sub_Menu_AmmoRein), "(5)Ammo Reincarnation: %i/300", AmunRein[index]);
	Format(Skill_Sub_Menu_AntiGravity, sizeof(Skill_Sub_Menu_AntiGravity), "(6)Anti Gravity: %i/40", AntiGrav[index]);
	Format(Skill_Sub_Menu_Speed, sizeof(Skill_Sub_Menu_Speed), "(7)Speed: %i/80", SpeedI[index]);
	Format(Skill_Sub_Menu_TeamPower, sizeof(Skill_Sub_Menu_TeamPower), "(8)Team power: %i/60", TeamPower[index]);
	Format(Skill_Sub_Menu_BlockPoints, sizeof(Skill_Sub_Menu_BlockPoints), "(9)Block points: %i/140", BlockAttack[index]);
	}
	new Handle:menu = CreateMenu(skillsubmenu_removeHandler);
	SetMenuTitle(menu, "Remove skill points | Expend points: %i", ExpendPoints[index]);
	AddMenuItem(menu,"op1","Retrieve 1 point from:");
	AddMenuItem(menu,"op2",Skill_Sub_Menu_Strength);
	AddMenuItem(menu,"op3",Skill_Sub_Menu_Armor);//and so on
	AddMenuItem(menu,"op4",Skill_Sub_Menu_Regeneration);//and so on
	AddMenuItem(menu,"op5",Skill_Sub_Menu_NanoArmor);//and so on
	AddMenuItem(menu,"op6",Skill_Sub_Menu_AmmoRein);//and so on
	AddMenuItem(menu,"op7",Skill_Sub_Menu_AntiGravity);//and so on
	AddMenuItem(menu,"op8",Skill_Sub_Menu_Speed);//and so on
	AddMenuItem(menu,"op9",Skill_Sub_Menu_TeamPower);//and so on
	AddMenuItem(menu,"op10",Skill_Sub_Menu_BlockPoints);//and so on
	AddMenuItem(menu,"op11","Ok");//and so on
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
 
	return Plugin_Handled;
}


//###################+--------------------------+###########################
//###################| Skills sub resetall menu |###########################
//###################+--------------------------+###########################

//skills sub menu Resetall handler
public skillsubmenu_ResetallHandler(Handle:menu, MenuAction:action, client, selection)
{
	/* If an option was selected, tell the client about the item. */
        if(action==MenuAction_Select)
        {
            if(client>-1)
            {
                switch(selection)
                {
                    //Option 1: Remove all skill points
					case 0: 
                    {
						new String:args;
						SXPM_Restart_Expend_Points(client, args);
						PrintToChat(client, "Skill points have been reset");
						//return Plugin_Handled;
                    }
                    //Option 2: Cancel
					case 1: 
                    {
						PrintToChat(client, "You cancelled");
						//return Plugin_Handled;
                    }
			//the more choices the more cases.
				}
			}
		}
	/* If the menu was cancelled, print a message to the server about it. */
	else if (action == MenuAction_Cancel)
	{
		PrintToServer("Client %d's menu was cancelled.  Reason: %d", client, selection);
	}
	/* If the menu has ended, destroy it */
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
	//return Plugin_Handled;
}
 
//skills sub Reset all menu
 public Action:skillsubmenu_Resetall(client, args)
{
	new Handle:menu = CreateMenu(skillsubmenu_ResetallHandler);
	SetMenuTitle(menu, "Reset all skill points?");
	AddMenuItem(menu,"op1","Yes");
	AddMenuItem(menu,"op2","No");
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
 
	return Plugin_Handled;
}