/* Plugin Template generated by Pawn Studio */
#define PLUGIN_NAME "[L4D2] Infected Release"
#define PLUGIN_AUTHOR "Thraka, Shadowysn"
#define PLUGIN_DESC "Allows infected players to release victims with the melee button."
#define PLUGIN_VERSION "1.4"
#define PLUGIN_URL "https://forums.alliedmods.net/showpost.php?p=2785849&postcount=150"
#define PLUGIN_NAME_SHORT "Infected Release"
//#define PLUGIN_NAME_TECH ""

#include <sourcemod>
#include <sdktools>

#pragma semicolon 1
#pragma newdecls required

#define INFECTEDTEAM 3
#define ZOMBIECLASS_SMOKER	1
//#define ZOMBIECLASS_BOOMER	2
#define ZOMBIECLASS_HUNTER	3
//#define ZOMBIECLASS_SPITTER	4
#define ZOMBIECLASS_JOCKEY	5
#define ZOMBIECLASS_CHARGER	6

static ConVar g_hConVar_JockeyReleaseOn,
g_hConVar_HunterReleaseOn,
g_hConVar_ChargerReleaseOn,
g_hConVar_SmokerReleaseOn,
g_hConVar_JockeyAttackDelay,
g_hConVar_HunterAttackDelay,
g_hConVar_ChargerAttackDelay,
g_hConVar_SmokerAttackDelay;
bool g_bJockeyReleaseOn, g_bHunterReleaseOn, g_bChargerReleaseOn, g_bSmokerReleaseOn;
float g_fJockeyAttackDelay, g_fHunterAttackDelay, g_fChargerAttackDelay, g_fSmokerAttackDelay, g_fVanillaChargeInterval = 1.0;

ConVar g_hConVar_ChargerChargeInterval;

float g_fButtonDelay[MAXPLAYERS+1];

public Plugin myinfo =
{
	name = PLUGIN_NAME,
	author = PLUGIN_AUTHOR,
	description = PLUGIN_DESC,
	version = PLUGIN_VERSION,
	url = PLUGIN_URL
}

public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
	EngineVersion ev = GetEngineVersion();
	if (ev == Engine_Left4Dead2)
	{
		return APLRes_Success;
	}
	strcopy(error, err_max, "Plugin only supports Left 4 Dead 2.");
	return APLRes_SilentFailure;
}

public void OnPluginStart()
{
	ConVar version_cvar = CreateConVar("l4d2_infected_release_ver", PLUGIN_VERSION, "Version of the infected release plugin.", FCVAR_NOTIFY|FCVAR_REPLICATED|FCVAR_DONTRECORD);
	if (version_cvar != null)
		version_cvar.SetString(PLUGIN_VERSION);
	
	g_hConVar_JockeyReleaseOn = CreateConVar("l4d2_jockey_dismount_on", "1", "Jockey dismount is on or off.\n1 = Allow dismount.\n0 = Disallow dismount.", FCVAR_NONE, true, 0.0, true, 1.0);
	g_hConVar_JockeyReleaseOn.AddChangeHook(CC_IR_JockeyReleaseOn);
	g_hConVar_HunterReleaseOn = CreateConVar("l4d2_hunter_release_on", "1", "Hunter release is on or off.\n1 = Allow release.\n0 = Disallow release.", FCVAR_NONE, true, 0.0, true, 1.0);
	g_hConVar_HunterReleaseOn.AddChangeHook(CC_IR_HunterReleaseOn);
	g_hConVar_ChargerReleaseOn = CreateConVar("l4d2_charger_release_on", "1", "Charger release is on or off.\n1 = Allow release.\n0 = Disallow release.", FCVAR_NONE, true, 0.0, true, 1.0);
	g_hConVar_ChargerReleaseOn.AddChangeHook(CC_IR_ChargerReleaseOn);
	g_hConVar_SmokerReleaseOn = CreateConVar("l4d2_smoker_release_on", "1", "Smoker release is on or off.\n1 = Allow release.\n0 = Disallow release.", FCVAR_NONE, true, 0.0, true, 1.0);
	g_hConVar_SmokerReleaseOn.AddChangeHook(CC_IR_SmokerReleaseOn);
	g_hConVar_JockeyAttackDelay = CreateConVar("l4d2_jockey_attackdelay", "1.5", "How long can Jockeys not use both attack buttons after dismounting?", FCVAR_NONE, true, 0.0);
	g_hConVar_JockeyAttackDelay.AddChangeHook(CC_IR_JockeyAttackDelay);
	g_hConVar_HunterAttackDelay = CreateConVar("l4d2_hunter_attackdelay", "1.5", "How long can Hunters not use both attack buttons after releasing?", FCVAR_NONE, true, 0.0);
	g_hConVar_HunterAttackDelay.AddChangeHook(CC_IR_HunterAttackDelay);
	g_hConVar_ChargerAttackDelay = CreateConVar("l4d2_charger_attackdelay", "1.5", "How long can Chargers not use both attack buttons after releasing?", FCVAR_NONE, true, 0.0);
	g_hConVar_ChargerAttackDelay.AddChangeHook(CC_IR_ChargerAttackDelay);
	g_hConVar_SmokerAttackDelay = CreateConVar("l4d2_smoker_attackdelay", "1.5", "How long can Smokers not use both attack buttons after releasing?", FCVAR_NONE, true, 0.0);
	g_hConVar_SmokerAttackDelay.AddChangeHook(CC_IR_SmokerAttackDelay);
	
	g_hConVar_ChargerChargeInterval = FindConVar("z_charge_interval");
	g_hConVar_ChargerChargeInterval.AddChangeHook(CC_Vanilla_ChargeInterval);
	
	AutoExecConfig(true, "l4d2_infected_release");
	SetCvarValues();
	
	HookEvent("player_team", ClearButtonDelay, EventHookMode_Post);
}

public void OnClientPutInServer(int client)
{
	g_fButtonDelay[client] = 0.0;
}

/*
* ===========================================================================================================
* ===========================================================================================================
* 
* CVAR Change events
* 
* ===========================================================================================================
* ===========================================================================================================
*/

void CC_IR_JockeyReleaseOn(ConVar convar, const char[] oldValue, const char[] newValue)		{ g_bJockeyReleaseOn =	convar.BoolValue;		}
void CC_IR_HunterReleaseOn(ConVar convar, const char[] oldValue, const char[] newValue)		{ g_bHunterReleaseOn =	convar.BoolValue;		}
void CC_IR_ChargerReleaseOn(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_bChargerReleaseOn =	convar.BoolValue;		}
void CC_IR_SmokerReleaseOn(ConVar convar, const char[] oldValue, const char[] newValue)		{ g_bSmokerReleaseOn =	convar.BoolValue;		}
void CC_IR_JockeyAttackDelay(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_fJockeyAttackDelay =	convar.FloatValue;	}
void CC_IR_HunterAttackDelay(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_fHunterAttackDelay =	convar.FloatValue;	}
void CC_IR_ChargerAttackDelay(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_fChargerAttackDelay =	convar.FloatValue;	}
void CC_IR_SmokerAttackDelay(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_fSmokerAttackDelay =	convar.FloatValue;	}
void SetCvarValues()
{
	CC_IR_JockeyReleaseOn(g_hConVar_JockeyReleaseOn, "", "");
	CC_IR_HunterReleaseOn(g_hConVar_HunterReleaseOn, "", "");
	CC_IR_ChargerReleaseOn(g_hConVar_ChargerReleaseOn, "", "");
	CC_IR_SmokerReleaseOn(g_hConVar_SmokerReleaseOn, "", "");
	CC_IR_JockeyAttackDelay(g_hConVar_JockeyAttackDelay, "", "");
	CC_IR_HunterAttackDelay(g_hConVar_HunterAttackDelay, "", "");
	CC_IR_ChargerAttackDelay(g_hConVar_ChargerAttackDelay, "", "");
	CC_IR_SmokerAttackDelay(g_hConVar_SmokerAttackDelay, "", "");
	if (g_hConVar_ChargerChargeInterval != null) CC_Vanilla_ChargeInterval(g_hConVar_ChargerChargeInterval, "", "");
}
void CC_Vanilla_ChargeInterval(ConVar convar, const char[] oldValue, const char[] newValue)	{ g_fVanillaChargeInterval = convar.FloatValue; }


/*
* ===========================================================================================================
* ===========================================================================================================
* 
* Normal Hooks\Events
* 
* ===========================================================================================================
* ===========================================================================================================
*/

public Action OnPlayerRunCmd(int client, int &buttons, int &impulse, float vel[3], float angles[3], int &weapon)
{
	if (client == 0 || IsFakeClient(client)) return Plugin_Continue;
	
	bool buttonsChanged = false;
	if (buttons & IN_ATTACK2 && g_fButtonDelay[client] < GetGameTime() && GetClientTeam(client) == INFECTEDTEAM)
	{
		int zClass = GetEntProp(client, Prop_Send, "m_zombieClass");
		int victim; float delay;
		switch (zClass)
		{
			case ZOMBIECLASS_JOCKEY:
			{
				if (g_bJockeyReleaseOn)
				{
					victim = GetEntPropEnt(client, Prop_Send, "m_jockeyVictim");
					delay = g_fJockeyAttackDelay;
				}
			}
			case ZOMBIECLASS_HUNTER:
			{
				if (g_bHunterReleaseOn)
				{
					victim = GetEntPropEnt(client, Prop_Send, "m_pounceVictim");
					delay = g_fHunterAttackDelay;
				}
			}
			case ZOMBIECLASS_CHARGER:
			{
				if (g_bChargerReleaseOn)
				{
					victim = GetEntPropEnt(client, Prop_Send, "m_pummelVictim");
					delay = g_fChargerAttackDelay;
				}
			}
			case ZOMBIECLASS_SMOKER:
			{
				if (g_bSmokerReleaseOn)
				{
					victim = GetEntPropEnt(client, Prop_Send, "m_tongueVictim");
					delay = g_fSmokerAttackDelay;
				}
			}
		}
		if (RealValidEntity(victim))
		{
			KnockAttacker(client);
			
			g_fButtonDelay[client] = GetGameTime()+delay;
			
			if (zClass == ZOMBIECLASS_CHARGER)
			{
				//CallResetAbility(client, g_fVanillaChargeInterval);
				int ability = GetEntPropEnt(client, Prop_Send, "m_customAbility");
				if (RealValidEntity(ability))
				{
					SetDTCountdownTimer(ability, "CBaseAbility", "m_nextActivationTimer", g_fVanillaChargeInterval);
					//ChangeEdictState(ability, FindSendPropInfo("CCharge", "m_nextActivationTimer"));
					//SetDTCountdownTimer(ability, "m_activationSupressedTimer", 1.0);
					//ChangeEdictState(ability, FindSendPropInfo("CCharge", "m_activationSupressedTimer"));
				}
				// my dum dum didn't realize i was using CTerrorPlayer for SetDTCountdownTimer's
				// SetEntPropFloat which was causing the server crashes
			}
		}
	}
	
	// If delayed, don't let them click
	if (buttons & IN_ATTACK && g_fButtonDelay[client] >= GetGameTime())
	{
		buttons &= ~IN_ATTACK;
		buttonsChanged = true;
	}
	
	// If delayed, don't let them click
	if (buttons & IN_ATTACK2 && g_fButtonDelay[client] >= GetGameTime())
	{
		buttons &= ~IN_ATTACK2;
		buttonsChanged = true;
	}
	
	if (buttonsChanged) return Plugin_Changed;
	return Plugin_Continue;
}

void ClearButtonDelay(Event event, const char[] name, bool dontbroadcast)
{
	int client = GetClientOfUserId(event.GetInt("userid"));
	if (!IsValidClient(client)) return;
		
	g_fButtonDelay[client] = 0.0;
}

/*
* ===========================================================================================================
* ===========================================================================================================
* 
* Private Methods
* 
* ===========================================================================================================
* ===========================================================================================================
*/

void KnockAttacker(int attacker)
{
	SetVariantString("self.Stagger(self.GetOrigin())");
	AcceptEntityInput(attacker, "RunScriptCode");
	SetDTCountdownTimer(attacker, "CTerrorPlayer", "m_staggerTimer", 0.0);
}

void SetDTCountdownTimer(int entity, const char[] classname, const char[] timer_str, float duration)
{
	SetEntDataFloat(entity, (FindSendPropInfo(classname, timer_str)+4), duration, true);
	SetEntDataFloat(entity, (FindSendPropInfo(classname, timer_str)+8), GetGameTime()+duration, true);
}
// We still need this to reset charger state
/*void CallResetAbility(int client, float time)
{
	if (hStartActivationTimer == null) return;
	
	int AbilityEnt = GetEntPropEnt(client, Prop_Send, "m_customAbility");
	if (!RealValidEntity(AbilityEnt)) return;
	SDKCall(hStartActivationTimer, AbilityEnt, time, 0.0);
}*/

stock bool RealValidEntity(int entity)
{ return (entity > 0 && IsValidEntity(entity)); }
stock bool IsValidClient(int client, bool replaycheck = true, bool isLoop = false)
{
	if ((isLoop || client > 0 && client <= MaxClients) && IsClientInGame(client))
	{
		if (HasEntProp(client, Prop_Send, "m_bIsCoaching")) // TF2, CSGO?
			if (view_as<bool>(GetEntProp(client, Prop_Send, "m_bIsCoaching"))) return false;
		if (replaycheck)
		{
			if (IsClientSourceTV(client) || IsClientReplay(client)) return false;
		}
		return true;
	}
	return false;
}