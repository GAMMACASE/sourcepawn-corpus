/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <multicolors>
#include <cstrike>
#include <geoip>
#define PLUGIN_VERSION "1.3"
static String: MessagesPath[PLATFORM_MAX_PATH];
new any:messagedelay ,any:messagecount, any: messagetype;
new String: messagetimeform[64];
new Handle: TimerMessage = INVALID_HANDLE;
new OldMessageID = -1;
new MessageCycle = 1

public Plugin:myinfo = 
{
	name = "OverCore Automatic Messages",
	author = "ESK0",
	description = "OverCore Automatic Messages",
	version = PLUGIN_VERSION,
	url = "www.overcore.eu"
}

public OnPluginStart()
{
	CreateConVar("sm_automaticmessages_version", PLUGIN_VERSION, "OverCore Automatic Messages", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	BuildPath(Path_SM, MessagesPath, sizeof(MessagesPath), "configs/OvCAutomaticMessages.ini");
}
public OnClientPutInServer(client)
{
}
public OnMapStart()
{
	LoadSettings();
	if (TimerMessage == INVALID_HANDLE){
		TimerMessage = CreateTimer(messagedelay, TimerMessages,_,TIMER_REPEAT);}
	else{
		CloseHandle(TimerMessage);
		TimerMessage = CreateTimer(messagedelay, TimerMessages,_,TIMER_REPEAT);}
}
public Action: TimerMessages(Handle: timer)
{
	if (messagetype == 1){
		if ( messagecount == 1){ messagetype = 2;}
		else {
			new MessageID = GetRandomInt ( 1, messagecount);
			if ( OldMessageID != MessageID){
				PrintMessages(MessageID);
				OldMessageID = MessageID;}
			else {
				TimerMessages(Handle: timer);}
		}
	}
	else if (messagetype == 2){
		PrintMessages(MessageCycle);
		MessageCycle++
		if (MessageCycle > messagecount) {MessageCycle = 1;}
	}
}
void: LoadSettings()
{
	new Handle:Messages = CreateKeyValues("Messages");
	FileToKeyValues(Messages, MessagesPath);
	if (KvJumpToKey(Messages, "Settings"))
	{
		messagedelay = KvGetFloat(Messages, "Delay", 2.0);
		messagecount = KvGetNum(Messages, "MsgCount", 2);
		messagetype = KvGetNum(Messages, "MsgShowType", 1);
		KvGetString(Messages, "TimeForm", messagetimeform, sizeof(messagetimeform));
	}
	CloseHandle(Messages);
}
	
void: PrintMessages(messageid)
{
	new Handle:Messages = CreateKeyValues("Messages");
	FileToKeyValues(Messages, MessagesPath);
	new String: IDOfMessage[12];
	IntToString(messageid, IDOfMessage, sizeof(IDOfMessage));
	if (KvJumpToKey(Messages, IDOfMessage, true))
	{
		for ( new clientx = 1; clientx <= MaxClients+1; clientx++)
		{
			if (IsValidClient(clientx)){
				new String: Message[128];
				decl String: ClientCountry[3];
				decl String: ClientIP[26];
				decl String: MessageBuffer[128];
				GetClientIP(clientx, ClientIP, sizeof(ClientIP));
				GeoipCode2(ClientIP, ClientCountry);
				KvGetString(Messages, ClientCountry, Message, sizeof(Message), "LANGNOTFOUND");
				if (StrEqual(Message, "LANGNOTFOUND"))
				{
					KvGetString(Messages, "default", Message, sizeof(Message));
				}
				if(StrContains(Message, "{MAPNAME}") != -1)
				{
					GetCurrentMap(MessageBuffer, sizeof(MessageBuffer));
					ReplaceString(Message, sizeof(Message), "{MAPNAME}", MessageBuffer);
				}
				if(StrContains(Message, "{THETIME}") != -1)
				{
					FormatTime(MessageBuffer, sizeof(MessageBuffer), messagetimeform, GetTime());
					ReplaceString(Message, sizeof(Message), "{THETIME}", MessageBuffer);
				}
				if(StrContains(Message, "{teamcolor}", false)          != -1)
				{
					if (GetClientTeam(clientx) == CS_TEAM_CT){ Format(MessageBuffer, sizeof(MessageBuffer), "{blue}");}
					if (GetClientTeam(clientx) == CS_TEAM_T){ Format(MessageBuffer, sizeof(MessageBuffer), "{red}"); }
					if (GetClientTeam(clientx) == CS_TEAM_SPECTATOR){ Format(MessageBuffer, sizeof(MessageBuffer), "{grey}");}
					ReplaceString(Message, sizeof(Message), "{teamcolor}", MessageBuffer);
				}
				CPrintToChat(clientx, "%s", Message);
			}
		}
	}
	CloseHandle(Messages);
}
stock bool:IsValidClient(client, bool:alive = false){
    if(client >= 1 && client <= MaxClients && IsClientConnected(client) && IsClientInGame(client) && (alive == false || IsPlayerAlive(client))){
        return true;
    }
   
    return false;
}