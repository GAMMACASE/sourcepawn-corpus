/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>

#define PL_VERSION "0.0.2"
#define SOUND_A "misc/talk.wav"
#define SOUND_B "vo/spy_painsevere03.wav"

public Plugin:myinfo = 
{
	name = "Fake Death",
	author = "RIKUSYO",
	description = "Spy Fake Death.",
	version = PL_VERSION,
	url = "http://ameblo.jp/rikusyo/"
}

new bool:g_IsRunning = true;
new bool:g_Players[MAXPLAYERS+1];
new bool:g_PlayerBurn[MAXPLAYERS+1];
new g_PlayerLastHealth[MAXPLAYERS+1];
new Float:g_PlayersLastMeter[MAXPLAYERS+1];
new bool:g_PlayerInvisible[MAXPLAYERS+1];
new Handle:g_PlayerButtonDown[MAXPLAYERS+1] = INVALID_HANDLE;
new Handle:g_NextBody[MAXPLAYERS+1] = INVALID_HANDLE;
new Handle:g_IsFakeDeathOn = INVALID_HANDLE;
new Handle:g_UseCloakMeter = INVALID_HANDLE;
new Handle:g_IsDeathMessageOn = INVALID_HANDLE;
new Handle:g_IsStartMessageOn = INVALID_HANDLE;
new Handle:g_WaitTime = INVALID_HANDLE;

new AtacanteID[MAXPLAYERS+1];
new String:WeaponName[MAXPLAYERS+1][32];

new String:Sons[12][32];

public OnPluginStart()
{
	LoadTranslations("common.phrases");
	LoadTranslations("fake_death.phrases");
	
	CreateConVar("sm_fd_version", PL_VERSION, "Fake Death", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	g_IsFakeDeathOn = CreateConVar("sm_fd_enable","0","Enable/Disable Fake Death (0 = disabled | 1 = enabled)");
	g_UseCloakMeter = CreateConVar("sm_fd_use_cloak_meter","10.0","Cloak Meter required for fake death(0.0-100.0)");
	g_IsDeathMessageOn = CreateConVar("sm_fd_death_message","1","Enable/Disable death message (0 = disabled | 1 = enabled)");
	g_IsStartMessageOn = CreateConVar("sm_fd_start_message","1","Enable/Disable start message (0 = disabled | 1 = enabled)");
	g_WaitTime = CreateConVar("sm_fd_wait_time","3.0","Time before can show the next body(0.0-10.0)");

	HookConVarChange(g_IsFakeDeathOn, ConVarChange_IsFakeDeathOn);
	HookConVarChange(g_UseCloakMeter, ConVarChange_UseCloakMeter);
	HookConVarChange(g_WaitTime, ConVarChange_WaitTime);

	HookEvent("player_spawn", Event_PlayerSpawn);
	HookEvent("player_changeclass", Event_PlayerClass);
	HookEvent("player_death", Event_PlayerDeath);
	HookEvent("player_team", Event_PlayerTeam);
	HookEvent("teamplay_round_active", Event_RoundStart);
	HookEvent("player_hurt", Event_PlayerHurt);

	Sons[0] = "vo/spy_painsevere01.wav";
	Sons[1] = "vo/spy_painsevere02.wav";
	Sons[2] = "vo/spy_painsevere03.wav";
	Sons[3] = "vo/spy_painsevere04.wav";
	Sons[4] = "vo/spy_painsevere05.wav";
	Sons[5] = "vo/spy_painsharp01.wav";
	Sons[6] = "vo/spy_painsharp02.wav";
	Sons[7] = "vo/spy_painsharp03.wav";
	Sons[8] = "vo/spy_painsharp04.wav";
	Sons[9] = "vo/spy_paincrticialdeath01.wav";
	Sons[10] = "vo/spy_paincrticialdeath02.wav";
	Sons[11] = "vo/spy_paincrticialdeath03.wav";	
}

public OnMapStart()
{
	PrecacheModel("models/player/hwm/spy.mdl", true);
	
	PrecacheSound(SOUND_A, true);
	PrecacheSound(SOUND_B, true);

	g_IsRunning = true;
}

public OnClientDisconnect(client)
{
	g_Players[client] = false;
	g_PlayerBurn[client] = false;
	g_PlayerInvisible[client] = false;
	g_PlayerLastHealth[client] = 0;
	g_PlayersLastMeter[client] = 1.0;
	
	if(g_PlayerButtonDown[client] != INVALID_HANDLE)
	{
		KillTimer(g_PlayerButtonDown[client]);
		g_PlayerButtonDown[client] = INVALID_HANDLE;
	}
	if(g_NextBody[client] != INVALID_HANDLE)
	{
		KillTimer(g_NextBody[client]);
		g_NextBody[client] = INVALID_HANDLE;
	}
		
}

public OnGameFrame()
{	
	if(!g_IsRunning)
		return;

	// MODóLå¯ÅH
	new FakeDeathOn = GetConVarInt(g_IsFakeDeathOn)
	if (FakeDeathOn != 1)
		return;

	new maxclients = GetMaxClients();
	for (new i = 1; i <= maxclients; i++)
	{
		if (g_Players[i] && g_PlayerButtonDown[i] == INVALID_HANDLE && IsClientInGame(i))
		{
			if( g_PlayersLastMeter[i] > TF2_GetCloakMeter(i) )
			{
				g_PlayerInvisible[i] = true;
			}
			else if( g_PlayersLastMeter[i] < TF2_GetCloakMeter(i) )
			{
				g_PlayerInvisible[i] = false;
				g_PlayerBurn[i] = false;
			}
			
			if( g_PlayerLastHealth[i] < TF2_GetHealth(i) )
			{
				g_PlayerBurn[i] = false;
			}
			
			g_PlayersLastMeter[i] = TF2_GetCloakMeter(i);
			g_PlayerLastHealth[i] = TF2_GetHealth(i);
			
			if( g_PlayerInvisible[i] )
			{
				if(TF2_GetCloakMeter(i) == 0)
				{
					g_PlayerInvisible[i] = false;
				}
			}			
			
			if (GetClientButtons(i) & IN_ATTACK)
			{
				g_PlayerButtonDown[i] = CreateTimer(0.5, Timer_ButtonUp, i);
			
				TF_SpawnFakeBody(i);
			}
		}
	}
}

public Action:Timer_ButtonUp(Handle:timer, any:client)
{
	g_PlayerButtonDown[client] = INVALID_HANDLE;
}

public Action:Timer_NextBodyTimer(Handle:timer, any:client)
{
	g_NextBody[client] = INVALID_HANDLE;
}

public ConVarChange_IsFakeDeathOn(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if (StringToInt(newValue) > 0)
	{
		g_IsRunning = true
		PrintToChatAll("\x01 %t", "Enabled Fake Death");
	}
	else
	{
		g_IsRunning = false;
		PrintToChatAll("\x01 %t", "Disabled Fake Death");
	}
}

public ConVarChange_UseCloakMeter(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if (StringToFloat(newValue) < 0.0 || StringToFloat(newValue) > 100.0)
	{
		SetConVarFloat(convar, StringToFloat(oldValue), false, false);
		PrintToServer("Warning: Value has to be between 0.0 and 100.0");
	}
}

public ConVarChange_WaitTime(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if (StringToFloat(newValue) < 0.0 || StringToFloat(newValue) > 10.0)
	{
		SetConVarFloat(convar, StringToFloat(oldValue), false, false);
		PrintToServer("Warning: Value has to be between 0.0 and 10.0");
	}
}

public Action:Event_RoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	new FakeDeathOn = GetConVarInt(g_IsFakeDeathOn)
	new StartMessageOn = GetConVarInt(g_IsStartMessageOn)
	if(FakeDeathOn && StartMessageOn)
	{
		PrintToChatAll("\x01 %t", "OnCommand Fake Death", GetConVarInt(g_UseCloakMeter) );
	}

}

public Action:Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new TFClassType:class = TF2_GetPlayerClass(client);
	if (class != TFClass_Spy)
	{
		g_Players[client] = false;
		g_PlayerBurn[client] = false;
		g_PlayerInvisible[client] = false;
		g_PlayerLastHealth[client] = 0;
		g_PlayersLastMeter[client] = 1.0;
		return;
	}
	
	if(g_PlayerButtonDown[client] != INVALID_HANDLE)
	{
		KillTimer(g_PlayerButtonDown[client]);
		g_PlayerButtonDown[client] = INVALID_HANDLE;
	}
	if(g_NextBody[client] != INVALID_HANDLE)
	{
		KillTimer(g_NextBody[client]);
		g_NextBody[client] = INVALID_HANDLE;
	}
	
	g_PlayerInvisible[client] = false;
	
}

public Action:Event_PlayerClass(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new any:class = GetEventInt(event, "class");
	if (class != TFClass_Spy)
	{
		g_Players[client] = false;
		g_PlayerBurn[client] = false;
		g_PlayerInvisible[client] = false;
		g_PlayerLastHealth[client] = 0;
		g_PlayersLastMeter[client] = 1.0;
		if(g_PlayerButtonDown[client] != INVALID_HANDLE)
		{
			KillTimer(g_PlayerButtonDown[client]);
			g_PlayerButtonDown[client] = INVALID_HANDLE;
		}
		if(g_NextBody[client] != INVALID_HANDLE)
		{
			KillTimer(g_NextBody[client]);
			g_NextBody[client] = INVALID_HANDLE;
		}
		g_PlayerInvisible[client] = false;
		
		return;
	}
	g_Players[client] = true;
	if(g_PlayerButtonDown[client] != INVALID_HANDLE)
	{
		KillTimer(g_PlayerButtonDown[client]);
		g_PlayerButtonDown[client] = INVALID_HANDLE;
	}
	if(g_NextBody[client] != INVALID_HANDLE)
	{
		KillTimer(g_NextBody[client]);
		g_NextBody[client] = INVALID_HANDLE;
	}
	g_PlayerInvisible[client] = false;
	
	new FakeDeathOn = GetConVarInt(g_IsFakeDeathOn)
	if(FakeDeathOn)
	{
		PrintToChat(client, "\x01 %t", "OnCommand Fake Death", GetConVarInt(g_UseCloakMeter) );
	}
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	
	if(!g_IsRunning)
		return;
	new FakeDeathOn = GetConVarInt(g_IsFakeDeathOn)
	if (FakeDeathOn != 1)
		return;
	
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	if (!g_Players[client] || !IsClientInGame(client))
		return;
	
	new TFClassType:class = TF2_GetPlayerClass(client);
	if (class != TFClass_Spy)
		return;
	
	if(g_PlayerButtonDown[client] != INVALID_HANDLE)
	{
		KillTimer(g_PlayerButtonDown[client]);
		g_PlayerButtonDown[client] = INVALID_HANDLE;
	}
	if(g_NextBody[client] != INVALID_HANDLE)
	{
		KillTimer(g_NextBody[client]);
		g_NextBody[client] = INVALID_HANDLE;
	}
	g_PlayerInvisible[client] = false;
}

public Action:Event_PlayerTeam(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	if (client != 0)
	{
		new team = GetEventInt(event, "team");
		if (team < 2 && IsClientInGame(client))
		{
			g_Players[client] = false;
			g_PlayerBurn[client] = false;
			g_PlayerInvisible[client] = false;
			g_PlayerLastHealth[client] = 0;
			g_PlayersLastMeter[client] = 1.0;
			if(g_PlayerButtonDown[client] != INVALID_HANDLE)
			{
				KillTimer(g_PlayerButtonDown[client]);
				g_PlayerButtonDown[client] = INVALID_HANDLE;
			}
			if(g_NextBody[client] != INVALID_HANDLE)
			{
				KillTimer(g_NextBody[client]);
				g_NextBody[client] = INVALID_HANDLE;
			}
			g_PlayerInvisible[client] = false;
			
		}
	}
}

public Action:Event_PlayerHurt(Handle:Event, const String:name[], bool:dontBroadcast)
{
	new client_victim = GetClientOfUserId(GetEventInt(Event, "userid"));

	new TFClassType:class = TF2_GetPlayerClass(client_victim);
	if (class == TFClass_Spy)
	{
		new offset = FindDataMapOffs(client_victim, "m_bitsDamageType");
		if( (GetEntData(client_victim, offset) & 16779272) != 0 )
		{
			g_PlayerBurn[client_victim] = true;
		}
		
		AtacanteID[client_victim] = GetEventInt(Event, "attacker"); 
		GetClientWeapon(GetClientOfUserId(GetEventInt(Event, "attacker")), WeaponName[client_victim], 32);
	}
    return Plugin_Continue;
}  


stock TF_GetCurrentWeaponClass(client, String:name[], maxlength)
{
	new index = GetEntPropEnt(client, Prop_Send, "m_hActiveWeapon");
	if (index != 0)
		GetEntityNetClass(index, name, maxlength);
}

stock Float:TF2_GetCloakMeter(client)
{
    return GetEntPropFloat(client, Prop_Send, "m_flCloakMeter");
}

stock TF2_SetCloakMeter(client,Float:cloakMeter)
{
    SetEntPropFloat(client, Prop_Send, "m_flCloakMeter", cloakMeter);
}

stock TF2_GetHealth(client)
{
    return GetEntData(client, FindDataMapOffs(client, "m_iHealth")); 
}

stock TF_SpawnFakeBody(client)
{
	new Float:PlayerPosition[3];
		
	if( g_PlayerInvisible[client])
	{
		new Float:UseMeter = GetConVarFloat(g_UseCloakMeter);
		new Float:NowMeter = TF2_GetCloakMeter(client);
		new Float:WaitTime = GetConVarFloat(g_WaitTime);
	
		if( NowMeter > UseMeter  && g_NextBody[client] == INVALID_HANDLE)
		{
			if(GetConVarInt(g_IsDeathMessageOn)){
				new WeaponID;
				new String:WeaponName2[32];
				new CustomID = 0;
			
				if(StrEqual("tf_weapon_bat", WeaponName[client], false)){
				WeaponID = 1;
				WeaponName2 = "bat";
				}
				else if(StrEqual("tf_weapon_bottle", WeaponName[client], false)){
				WeaponID = 2;
				WeaponName2 = "bottle";
				}
				else if(StrEqual("tf_weapon_fireaxe", WeaponName[client], false)){
				WeaponID = 3;
				WeaponName2 = "fireaxe";
				}
				else if(StrEqual("tf_weapon_axtinguisher", WeaponName[client], false)){
				WeaponID = 3;
				WeaponName2 = "axtinguisher";
				}
				else if(StrEqual("tf_weapon_club", WeaponName[client], false)){
				WeaponID = 4;
				WeaponName2 = "club";
				}
				else if(StrEqual("tf_weapon_knife", WeaponName[client], false)){
				WeaponID = 6;
				WeaponName2 = "knife";
				}
				else if(StrEqual("tf_weapon_fists", WeaponName[client], false)){
				WeaponID = 7;
				WeaponName2 = "fists";
				}
				else if(StrEqual("tf_weapon_shovel", WeaponName[client], false)){
				WeaponID = 8;
				WeaponName2 = "shovel";
				}
				else if(StrEqual("tf_weapon_wrench", WeaponName[client], false)){
				WeaponID = 9;
				WeaponName2 = "wrench";
				}
				else if(StrEqual("tf_weapon_bonesaw", WeaponName[client], false)){
				WeaponID = 9;
				WeaponName2 = "bonesaw";
				}
				else if(StrEqual("tf_weapon_ubersaw", WeaponName[client], false)){
				WeaponID = 9;
				WeaponName2 = "ubersaw";
				}
				else if(StrEqual("tf_weapon_shotgun_primary", WeaponName[client], false)){
				WeaponID = 11;
				WeaponName2 = "shotgun_primary";
				}
				else if(StrEqual("tf_weapon_shotgun_soldier", WeaponName[client], false)){
				WeaponID = 12;
				WeaponName2 = "shotgun_soldier";
				}
				else if(StrEqual("tf_weapon_shotgun_hwg", WeaponName[client], false)){
				WeaponID = 13;
				WeaponName2 = "shotgun_hwg";
				}
				else if(StrEqual("tf_weapon_shotgun_pyro", WeaponName[client], false)){
				WeaponID = 14;
				WeaponName2 = "shotgun_pyro";
				}
				else if(StrEqual("tf_weapon_scattergun", WeaponName[client], false)){
				WeaponID = 15;
				WeaponName2 = "scattergun";
				}
				else if(StrEqual("tf_weapon_sniperrifle", WeaponName[client], false)){
				WeaponID = 16;
				WeaponName2 = "sniperrifle";
				}
				else if(StrEqual("tf_weapon_minigun", WeaponName[client], false)){
				WeaponID = 17;
				WeaponName2 = "minigun";
				}
				else if(StrEqual("tf_weapon_smg", WeaponName[client], false)){
				WeaponID = 18;
				WeaponName2 = "smg";
				}
				else if(StrEqual("tf_weapon_syringegun_medic", WeaponName[client], false)){
				WeaponID = 19;
				WeaponName2 = "syringegun_medic";
				}
				else if(StrEqual("tf_weapon_blutsauger", WeaponName[client], false)){
				WeaponID = 19;
				WeaponName2 = "blutsauger";
				}
				else if(StrEqual("tf_weapon_rocketlauncher", WeaponName[client], false)){
				WeaponID = 21;
				WeaponName2 = "tf_projectile_rocket";
				}
				else if(StrEqual("tf_weapon_flamethrower", WeaponName[client], false)){
				WeaponID = 24;
				WeaponName2 = "flamethrower";
				}
				else if(StrEqual("tf_weapon_backburner", WeaponName[client], false)){
				WeaponID = 24;
				WeaponName2 = "backburner";
				}
				else if(StrEqual("tf_weapon_pipebomblauncher", WeaponName[client], false)){
				WeaponID = 34;
				WeaponName2 = "tf_projectile_pipe_remote";
				}
				else if(StrEqual("tf_weapon_pistol", WeaponName[client], false)){
				WeaponID = 37;
				WeaponName2 = "pistol";
				}
				else if(StrEqual("tf_weapon_pistol_scout", WeaponName[client], false)){
				WeaponID = 38;
				WeaponName2 = "pistol_scout";
				}
				else if(StrEqual("tf_weapon_revolver", WeaponName[client], false)){
				WeaponID = 39;
				WeaponName2 = "revolver";
				}
				else if(StrEqual("tf_weapon_grenadelauncher", WeaponName[client], false)){
				WeaponID = 49;
				WeaponName2 = "tf_projectile_pipe";
				}
				else if(StrEqual("tf_weapon_flaregun", WeaponName[client], false)){
				WeaponID = 54;
				WeaponName2 = "flaregun";
				}
				else{
				WeaponID = 0;
				CustomID = 6;
				AtacanteID[client] = GetClientUserId(client);
				WeaponName2 = "world";
				WeaponName[client] = "world"
				}
				// || !IsClientInGame(AtacanteID[client])
				if(!AtacanteID[client]){
				WeaponID = 0;
				CustomID = 6;
				AtacanteID[client] = GetClientUserId(client);
				WeaponName2 = "world";
				WeaponName[client] = "world"
				}				
				
				new Handle:hPlayerDeath = CreateEvent("player_death", true);
				SetEventInt(hPlayerDeath, "userid", GetClientUserId(client));	
				SetEventInt(hPlayerDeath, "attacker", AtacanteID[client]);
				SetEventString(hPlayerDeath, "weapon",	WeaponName2);
				SetEventInt(hPlayerDeath, "weaponid", WeaponID);
				SetEventInt(hPlayerDeath, "damagebits", 0);
				SetEventInt(hPlayerDeath, "customkill", CustomID);
				SetEventInt(hPlayerDeath, "assister", -1);
				SetEventInt(hPlayerDeath, "dominated", 0);
				SetEventInt(hPlayerDeath, "assister_dominated", 0);
				SetEventInt(hPlayerDeath, "revenge", 0);
				SetEventInt(hPlayerDeath, "assister_revenge", 0);
				SetEventString(hPlayerDeath, "weapon_logclassname", WeaponName[client]);
				FireEvent(hPlayerDeath);
			}
		
			new FakeBody = CreateEntityByName("tf_ragdoll");
		
			if (DispatchSpawn(FakeBody))
			{
				GetClientAbsOrigin(client, PlayerPosition);
				new offset = FindSendPropOffs("CTFRagdoll", "m_vecRagdollOrigin");
				SetEntDataVector(FakeBody, offset, PlayerPosition);
				
				offset = FindSendPropOffs("CTFRagdoll", "m_iClass");
				SetEntData(FakeBody, offset, 8);

				new Handle:hPlayerExtinguished = CreateEvent("player_extinguished", true);
				SetEventInt(hPlayerExtinguished, "userid", GetClientUserId(client));	
				FireEvent(hPlayerExtinguished);
				
				if(g_PlayerBurn[client])
				{
					offset = FindSendPropOffs("CTFRagdoll", "m_bBurning");
					SetEntData(FakeBody, offset, 1);					
				}
				g_PlayerBurn[client] = false;

				offset = FindSendPropOffs("CTFRagdoll", "m_iPlayerIndex");
				SetEntData(FakeBody, offset, client);
				
				new team = GetClientTeam(client);
				offset = FindSendPropOffs("CTFRagdoll", "m_iTeam");
				SetEntData(FakeBody, offset, team);
				
				EmitSoundToAll(Sons[GetRandomInt(0, 11)], FakeBody, _, _, _, 1.0);

				
				NowMeter = NowMeter - UseMeter;
				TF2_SetCloakMeter(client,NowMeter);
				g_NextBody[client] = CreateTimer(WaitTime, Timer_NextBodyTimer, client);
		
				return;
			}						
		}
		EmitSoundToClient(client, SOUND_A, _, _, _, _, 0.55);
	}
}
