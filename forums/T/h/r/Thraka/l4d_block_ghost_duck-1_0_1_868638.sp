/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

#define CVAR_FLAGS FCVAR_PLUGIN
#define PLUGIN_VERSION "1.0.1"
#define INFECTEDTEAM 3

public Plugin:myinfo = 
{
	name = "[L4D] Block Ghost Duck",
	author = "Thraka",
	description = "Forces a player (on spawn) to duck-unduck. Prevents ghosts from using exploits.",
	version = PLUGIN_VERSION,
	url = "http://forums.alliedmods.net/showthread.php?p=868638"
}

public OnPluginStart()
{
	CreateConVar("l4d_ghost_duck_block_ver", PLUGIN_VERSION, "Version of the ghost block plugin.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	
	HookEvent("player_spawn", Player_Spawn);
}


public Player_Spawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	
	// Check for correct team
	if (GetClientTeam(client) == INFECTEDTEAM)
	{
		if (!IsFakeClient(client))
		{
			// They spawned, check in a millisecond if they are still ducked and not ducking
			CreateTimer(0.1, DuckPlayer, client);
		}
	}
}

public Action:DuckPlayer(Handle:timer, any:client)
{
	new ducked = GetEntProp(client, Prop_Send, "m_bDucked");
	new ducking = GetEntProp(client, Prop_Send, "m_bDucking");
	new Float:fallingFloat = GetEntPropFloat(client, Prop_Send, "m_flFallVelocity");
	
	// Check to see if player is ducked, but not in process of ducking (using the duck command)
	if (ducked == 1 && ducking == 0 && fallingFloat == 0)
	{
		// If they do not have the duck button pushed
		if (!(GetClientButtons(client) & IN_DUCK)) 
		{
			ClientCommand(client, "+duck");	
			CreateTimer(0.01, UnDuckPlayer, client);
		}
	}
}

public Action:UnDuckPlayer(Handle:timer, any:client)
{
	ClientCommand(client, "-duck");	
}