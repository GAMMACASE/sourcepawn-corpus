/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools_functions>

new Handle:crit_e, Handle:crit_ao, Handle:crit_cc, Handle:crit_m;

public Plugin:myinfo = 
{
	name = "CritHit System",
	author = "Chefe",
	description = "Allows to modify the Crit-Calculation.",
	version = "1.0",
	url = "www.sourcemod.net"
}

public OnPluginStart()
{
	crit_e = CreateConVar("sm_crit_enabled", "0", "Enable or Disable the Plugin.");
	crit_ao = CreateConVar("sm_crit_only_admins", "1", "Enable or Disable only for Admins.");
	crit_cc = CreateConVar("sm_crit_chance", "0.50", "Set the Critchance in Mode 1.", _, true, 0.0, true, 1.0);
	crit_m = CreateConVar("sm_crit_mode", "1", "Set the crit Mode ( 1 = chance set in sm_crit_chance | 2 = crit only | 3 = Aim mode)");
	CreateConVar("sm_crit_version", "1.0", "Version of the Critplugin", FCVAR_NOTIFY);
}


public Action:TF2_CalcIsAttackCritical(client, weapon, String:weaponname[], &bool:result)
{
	new AdminId:admin_id = GetUserAdmin(client);
	new client_aim = GetClientAimTarget(client, true);
	
	if (GetConVarBool(crit_e))
	{
		if (GetConVarInt(crit_m) == 1)
		{
			if (!GetConVarBool(crit_ao) && IsClientInGame(client))
			{
				if (GetConVarFloat(crit_cc) > GetRandomFloat(0.0, 1.0))
				{
					result = true;
					return Plugin_Handled;
				}
			}
			else if (GetConVarBool(crit_ao) && IsClientInGame(client) && admin_id != INVALID_ADMIN_ID)
			{
				if (GetConVarFloat(crit_cc) > GetRandomFloat(0.0, 1.0))
				{
					result = true;
					return Plugin_Handled;
				}
			}
		}
		else if (GetConVarInt(crit_m) == 2)
		{
			if (!GetConVarBool(crit_ao) && IsClientInGame(client))
			{
				result = true;
				return Plugin_Handled;
			}
			else if (GetConVarBool(crit_ao) && IsClientInGame(client) && admin_id != INVALID_ADMIN_ID)
			{
				result = true;
				return Plugin_Handled;
			}
		}
		else if (GetConVarInt(crit_m) == 3)
		{
			if (GetConVarBool(crit_ao) && admin_id != INVALID_ADMIN_ID && IsClientInGame(client))
			{
				if (client_aim != -1)
				{
					result = true;
					return Plugin_Handled;
				}
				else if (client_aim == -1)
				{
					result = false;
					return Plugin_Handled;
				}
			}
			else if (!GetConVarBool(crit_ao) && IsClientInGame(client))
			{
				if (client_aim != -1)
				{
					result = true;
					return Plugin_Handled;
				}
				else if (client_aim == -1)
				{
					result = false;
					return Plugin_Handled;
				}
			}
		}
	}
	else
	{
		return Plugin_Continue;
	}
	
	return Plugin_Continue;
}
