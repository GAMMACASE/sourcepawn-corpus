/* Plugin Template generated by Pawn Studio */

// 2012-01/13 <-> LumiStance
//	Patched in pieces from include file.

#include <sourcemod>

public Plugin:myinfo =
{
	name = "ReloadSwitchSilence_BarTime",
	author = "fs_wTong",
	description = "Reload Switch Silence BarTime",
	version = "1.0-lm",
	url = "http://www.moddev.cn/forum.php?mod=viewthread&tid=125"
}

// ----- From modified entity_prop_stocks.inc
#define NONE			0
/* CS:S µÄÎäÆ÷ ID */
#define CSW_P228		1
#define CSW_SCOUT		3
#define CSW_HEGRENADE		4
#define CSW_XM1014		5
#define CSW_C4			6
#define CSW_MAC10		7
#define CSW_AUG			8
#define CSW_SMOKEGRENADE	9
#define CSW_ELITE		10
#define CSW_FIVESEVEN		11
#define CSW_UMP45		12
#define CSW_SG550		13
#define CSW_GALIL		14
#define CSW_FAMAS		15
#define CSW_USP			16
#define CSW_GLOCK18		17
#define CSW_AWP			18
#define CSW_MP5NAVY		19
#define CSW_M249		20
#define CSW_M3			21
#define CSW_M4A1		22
#define CSW_TMP			23
#define CSW_G3SG1		24
#define CSW_FLASHBANG		25
#define CSW_DEAGLE		26
#define CSW_SG552		27
#define CSW_AK47		28
#define CSW_KNIFE		29
#define CSW_P90			30

new g_maxplayers;
new bool:g_bSilenceAnim[33] = false;

public OnPluginStart()
{
	// Add your own code here...
	HookEvent("player_death", Event_PlayerDeath);
	HookUserMessage(GetUserMessageId("ReloadEffect"),Event_PlayerReload);
}

public OnMapStart()
{
	g_maxplayers = GetMaxClients();
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new victim = GetClientOfUserId(GetEventInt(event, "userid"));
	if(GetEntProp(victim, Prop_Send, "m_iProgressBarDuration")>0)
		SetEntProp(victim, Prop_Send, "m_iProgressBarDuration",0);

	g_bSilenceAnim[victim] = false;
}

public Action:Event_PlayerReload(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
{
	new client = BfReadByte(bf);
	if(IsClientUsingShotgun(client))
		return;

	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetWeaponNextPrimaryAttack(GetClientActiveWeapon(client))-GetGameTime()));
}


public Event_WeaponSwitch(client,newweapon,oldweapon)
{
	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetClientNextAttack(client)-GetGameTime()));
}

public Event_SilenceAnim(client)
{
	SetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime", GetGameTime());
	SetEntProp(client, Prop_Send, "m_iProgressBarDuration",RoundToNearest(GetWeaponNextPrimaryAttack(GetClientActiveWeapon(client))-GetGameTime()));
}

public OnGameFrame()
{
	static oldweapon[33],newweapon[33];
	for(new client = 1; client <= g_maxplayers; client++)
	{

		if(!IsClientInGame(client)) continue;
 		if(IsClientConnected(client) && IsPlayerAlive(client))
		{
			new Float:flBarStartTime = GetEntPropFloat(client, Prop_Send, "m_flProgressBarStartTime");
			new iBarDuration = GetEntProp(client, Prop_Send, "m_iProgressBarDuration");
			if(iBarDuration>0 && flBarStartTime+float(iBarDuration) < GetGameTime())
				SetEntProp(client, Prop_Send, "m_iProgressBarDuration",0);

			newweapon[client] = GetClientActiveWeapon(client);
			if(newweapon[client] != oldweapon[client])
				Event_WeaponSwitch(client,newweapon[client],oldweapon[client]);
			oldweapon[client] = GetClientActiveWeapon(client);

			if(IsClientSilenceAnim(client) && !g_bSilenceAnim[client])
			{
				g_bSilenceAnim[client] = true;
				Event_SilenceAnim(client);
			}
			else if(!IsClientSilenceAnim(client) && g_bSilenceAnim[client])
			{
				g_bSilenceAnim[client] = false;
			}
		}

	}

}

public OnClientConnected(client)
{
	g_bSilenceAnim[client] = false;
}

public OnClientDisconnect_Post(client)
{
	g_bSilenceAnim[client] = false;
}

stock bool:IsClientUsingShotgun(client)
{
	new weapon = GetClientWeaponIndex(client);
	if(weapon == CSW_XM1014 || weapon == CSW_M3)
		return true;

	return false;
}

stock bool:IsClientSilenceAnim(client)
{
	new weapon = GetClientWeaponIndex(client);
	new iAnim = GetViewModelSequence(client);
	if(weapon == CSW_USP && (iAnim == 7 || iAnim == 15))
	{
		return true;
	}
	else if(weapon == CSW_M4A1 && (iAnim == 6 || iAnim == 13))
	{
		return true;
	}

	return false;
}

// ----- From modified entity_prop_stocks.inc
stock Float:GetWeaponNextPrimaryAttack(WeaponIndex)
{
	return GetEntPropFloat(WeaponIndex, Prop_Send,"m_flNextPrimaryAttack");
}

stock Float:GetClientNextAttack(client)
{
	return GetEntPropFloat(client, Prop_Send, "m_flNextAttack");
}

// »ñÈ¡Íæ¼Òµ±Ç°µÄÎäÆ÷ÊµÌå
stock GetClientActiveWeapon(client)
{
	return GetEntPropEnt(client, Prop_Send, "m_hActiveWeapon");
}

// »ñÈ¡Íæ¼Òµ±Ç°ÎäÆ÷Ðòº
stock GetClientWeaponIndex(client)
{
	//if(!IsClientConnected(client) || !IsPlayerAlive(client))
		//return -1;

	new String: WeaponName[32];
	//GetEdictClassname(!client ? Entity : GetClientWeaponEntity(Client), WeaponName,sizeof(WeaponName));
	//GetEdictClassname(GetClientWeaponEntity(client), WeaponName,sizeof(WeaponName));
	GetClientWeapon(client,WeaponName,sizeof(WeaponName));
	if(StrEqual(WeaponName[7],"p228")) return CSW_P228;
	if(StrEqual(WeaponName[7],"scout")) return CSW_SCOUT;
	if(StrEqual(WeaponName[7],"hegrenade")) return CSW_HEGRENADE;
	if(StrEqual(WeaponName[7],"xm1014")) return CSW_XM1014;
	if(StrEqual(WeaponName[7],"c4")) return CSW_C4;
	if(StrEqual(WeaponName[7],"mac10")) return CSW_MAC10;
	if(StrEqual(WeaponName[7],"aug")) return CSW_AUG;
	if(StrEqual(WeaponName[7],"smokegrenade")) return CSW_SMOKEGRENADE;
	if(StrEqual(WeaponName[7],"elite")) return CSW_ELITE;
	if(StrEqual(WeaponName[7],"fiveseven")) return CSW_FIVESEVEN;
	if(StrEqual(WeaponName[7],"ump45")) return CSW_UMP45;
	if(StrEqual(WeaponName[7],"sg550")) return CSW_SG550;
	if(StrEqual(WeaponName[7],"galil")) return CSW_GALIL;
	if(StrEqual(WeaponName[7],"famas")) return CSW_FAMAS;
	if(StrEqual(WeaponName[7],"usp")) return CSW_USP;
	if(StrEqual(WeaponName[7],"glock")) return CSW_GLOCK18;
	if(StrEqual(WeaponName[7],"awp")) return CSW_AWP;
	if(StrEqual(WeaponName[7],"mp5navy")) return CSW_MP5NAVY;
	if(StrEqual(WeaponName[7],"m249")) return CSW_M249;
	if(StrEqual(WeaponName[7],"m3")) return CSW_M3;
	if(StrEqual(WeaponName[7],"m4a1")) return CSW_M4A1;
	if(StrEqual(WeaponName[7],"tmp")) return CSW_TMP;
	if(StrEqual(WeaponName[7],"g3sg1")) return CSW_G3SG1;
	if(StrEqual(WeaponName[7],"flashbang")) return CSW_FLASHBANG;
	if(StrEqual(WeaponName[7],"deagle")) return CSW_DEAGLE;
	if(StrEqual(WeaponName[7],"sg552")) return CSW_SG552;
	if(StrEqual(WeaponName[7],"ak47")) return CSW_AK47;
	if(StrEqual(WeaponName[7],"knife")) return CSW_KNIFE;
	if(StrEqual(WeaponName[7],"p90")) return CSW_P90;
	if(StrEqual(WeaponName[7],"usp")) return CSW_USP;

	return -1;
}

// »ñÈ¡Íæ¼ÒVÄ£ÐÍ¶¯×÷ÐòÁÐ
stock GetViewModelSequence(client)
{
	return GetEntProp(GetEntPropEnt(client, Prop_Send, "m_hViewModel"), Prop_Send, "m_nSequence");
}
