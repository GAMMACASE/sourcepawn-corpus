/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#define LP_VERSION "2.1"

new sql_id[MAXPLAYERS];

new Handle:cv_tablename;
new Handle:cv_serverid;
new Handle:cv_price_rs_1day, Handle:cv_price_rs_7day, Handle:cv_price_rs_14day, Handle:cv_price_rs_30day;
new Handle:cv_quaterplayers, Handle:cv_halfplayers, Handle:cv_morethenhalf;
new Handle:cv_rsflags, Handle:cv_immu;
//new Handle:cv_removeall;
new price_rs_1day, price_rs_7day, price_rs_14day, price_rs_30day;
new quaterplayers, halfplayers, morethenhalf;
new String:rsflags[50];
//new bool:removeflags;
new rsimmunity;

new serverid;
new tablename;
new Handle:dbcon = INVALID_HANDLE;

public Plugin:myinfo = 
{
	name = "-",
	author = "-",
	description = "-",
	version = LP_VERSION,
	url = "-"
}

public OnPluginStart()
{
	CreateTimer(300.0, ForgivePoints, _, TIMER_REPEAT);
	CreateTimer(86400.0, CleanDatabase, _, TIMER_REPEAT);
	RegConsoleCmd("sm_slot", CommandLP);
	RegConsoleCmd("sm_ip", CommandLP);
	RegAdminCmd("sm_ip_refresh", CommandRefresh, ADMFLAG_CONFIG);
	CreateConVar("sm_ip_version", LP_VERSION, "Shows current plugin version.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY|FCVAR_DONTRECORD);
	cv_tablename = CreateConVar("sm_ip_tablename", "noname");
	cv_serverid = CreateConVar("sm_ip_serverid", "0");
	
	cv_price_rs_1day = CreateConVar("sm_ip_rs_price_1day", "100");
	cv_price_rs_7day = CreateConVar("sm_ip_rs_price_7day", "450");
	cv_price_rs_14day = CreateConVar("sm_ip_rs_price_14day", "900");
	cv_price_rs_30day = CreateConVar("sm_ip_rs_price_30day", "1500");
	
	cv_quaterplayers = CreateConVar("sm_ip_quaterplayers", "3");
	cv_halfplayers = CreateConVar("sm_ip_halfplayers", "2");
	cv_morethenhalf = CreateConVar("sm_ip_morethenhalf", "1");
	
	cv_rsflags = CreateConVar("sm_ip_flags", "a");
	//cv_removeall = CreateConVar("sm_lp_removeallflags", "0", "Enable/disable that only the flags set in sm_lp_flags or all flags get removed when the reserved slot expire.");
	cv_immu = CreateConVar("sm_ip_immunity", "5");
	
	AutoExecConfig(true);
	
	SQL_TConnect(DBInit, "default");
}

public DBInit(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE)
	{
		LogError("[LP] Database connection failed: %s", error);
		SetFailState("Unable to connect to database, look for more infos in the error logs!");
		return;
	}
	
	dbcon = hndl;
}

public OnConfigsExecuted()
{
	price_rs_1day = GetConVarInt(cv_price_rs_1day);
	price_rs_7day = GetConVarInt(cv_price_rs_7day);
	price_rs_14day = GetConVarInt(cv_price_rs_14day);
	price_rs_30day = GetConVarInt(cv_price_rs_30day);
	
	quaterplayers = GetConVarInt(cv_quaterplayers);
	halfplayers = GetConVarInt(cv_halfplayers);
	morethenhalf = GetConVarInt(cv_morethenhalf);
	
	serverid = GetConVarInt(cv_serverid);
	tablename = GetConVarInt(cv_tablename);
	
	GetConVarString(cv_rsflags, rsflags, sizeof(rsflags));
	//removeflags = GetConVarBool(cv_removeall);
	rsimmunity = GetConVarInt(cv_immu);
}

public OnClientAuthorized(client, const String:auth[])
{
	if (strcmp(auth, "BOT", false) != 0)
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM fort WHERE steamid = '%s'", auth);
		new String:sqlstring2[255];
		Format(sqlstring2, sizeof(sqlstring2), "SELECT id FROM points WHERE steamid = '%s'", auth);
		
		SQL_TQuery(dbcon, InitDBCheck1, sqlstring, client);
	}
	else
	{
		sql_id[client] = -1;
	}
	
	
}

public InitDBCheck1(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		if (SQL_GetRowCount(hndl) == 0)
		{
			new String:auth[100];
			GetClientAuthString(data, auth, sizeof(auth));
			
			new String:createsql[250];
			Format(createsql, sizeof(createsql), "INSERT INTO fort(steamid, ingameid, ingame) VALUES ('%s',%i,1)", auth, serverid);
			new String:createsql2[250];
			Format(createsql2, sizeof(createsql2), "INSERT INTO points(steamid, points, ingameid, ingame) VALUES ('%s',0,%i,1)", auth, serverid);
			SQL_TQuery(dbcon, InitDBCheck2, createsql, data);
		}
		else
		{
			SQL_FetchRow(hndl);
			sql_id[data] = SQL_FetchInt(hndl, 0);
			
			new String:updatesql[255];
			Format(updatesql, sizeof(updatesql), "UPDATE fort SET ingame = 1, ingameid = %i WHERE id = %i", serverid, sql_id[data]);
			new String:updatesql2[255];
			Format(updatesql2, sizeof(updatesql2), "UPDATE points SET ingame = 1, ingameid = %i WHERE id = %i", serverid, sql_id[data]);
			SQL_TQuery(dbcon, EmptyResultSet, updatesql);
		}
	}
}

public InitDBCheck2(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		new String:auth[100];
		GetClientAuthString(data, auth, sizeof(auth));
		
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM fort WHERE steamid = '%s'", auth);
		new String:sqlstring2[255];
		Format(sqlstring2, sizeof(sqlstring2), "SELECT id FROM points WHERE steamid = '%s'", auth);
		SQL_TQuery(dbcon, InitDBCheck3, sqlstring, data);
	}
}

public InitDBCheck3(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		SQL_FetchRow(hndl);
		sql_id[data] = SQL_FetchInt(hndl, 0);
	}
}

public OnClientDisconnect(client)
{
	new String:sqlstring[255];
	Format(sqlstring, sizeof(sqlstring), "UPDATE fort SET ingame = 0 WHERE id = %i", sql_id[client]);
	new String:sqlstring2[255];
	Format(sqlstring2, sizeof(sqlstring2), "UPDATE points SET ingame = 0 WHERE id = %i", sql_id[client]);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	sql_id[client] = -1;
}

public Action:CommandRefresh(client, args)
{
	RefreshSet();
	ReplyToCommand(client, "[ICT Ponints] Przeladowalem ustawienia");
	return Plugin_Handled;
}

public Action:CommandLP(client, args)
{
	new Handle:menu = CreateMenu(MenuHandler);
	SetMenuTitle(menu, "ICT Points System.");
	AddMenuItem(menu, "1", "Pokaz moje IP");
	
	if (HaveClientRS(client))
	{
		new String:s_menu5[100];
		new client_rsmin = GetRSMIN(client);
		if (client_rsmin <= 60)
		{
			Format(s_menu5, sizeof(s_menu5), "Twoj slot konczy sie za %i min", GetRSMIN(client));
		}
		else if (client_rsmin <= 1440)
		{
			Format(s_menu5, sizeof(s_menu5), "Twoj slot konczy sie za %i h", GetRSMIN(client)/60);
		}
		else
		{
			Format(s_menu5, sizeof(s_menu5), "Twoj slot konczy sie za %i d", GetRSMIN(client)/1440);
		}
		AddMenuItem(menu, "6", s_menu5, ITEMDRAW_DISABLED);
	}
	else
	{
		AddMenuItem(menu, "7", "Kup slot!");
	}
	
	DisplayMenu(menu, client, MENU_TIME_FOREVER);
	
	return Plugin_Handled;
}

public MenuHandler(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		switch(StringToInt(info))
		{
			case 1:
			{
				new lp = GetLP(param1);
				PrintToChat(param1, "\x04[ICT Points]\x01 %N, masz %i IP!", param1, lp);
			}
			case 7:
			{
				new String:rs_menu1[100];
				Format(rs_menu1, sizeof(rs_menu1), "1 Dzien (%i ip)", price_rs_1day);
				new String:rs_menu2[100];
				Format(rs_menu2, sizeof(rs_menu2), "7 Dni (%i ip)", price_rs_7day);
				new String:rs_menu3[100];
				Format(rs_menu3, sizeof(rs_menu3), "14 Dni (%i ip)", price_rs_14day);
				new String:rs_menu4[100];
				Format(rs_menu4, sizeof(rs_menu4), "30 Dni (%i ip)", price_rs_30day);
				
				new Handle:menu2 = CreateMenu(MenuRS);
				SetMenuTitle(menu2, "Wybierz czas slotu");
				AddMenuItem(menu2, "1", rs_menu1);
				AddMenuItem(menu2, "2", rs_menu2);
				AddMenuItem(menu2, "3", rs_menu3);
				AddMenuItem(menu2, "4", rs_menu4);
				DisplayMenu(menu2, param1, MENU_TIME_FOREVER);
			}
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}

public MenuRS(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		new lp = GetLP(param1)
		
		switch(StringToInt(info))
		{
			case 1:
			{
				if (lp >= price_rs_1day)
				{
					RemoveLP(param1, price_rs_1day)
					GiveRS(param1, 1440);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x04[ICT Points]\x01 Kupiles slot!! Przy pelnym serwerze uzyj w konsoli komendy connect, aby dolaczyc.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x04[ICT Points]\x01 Masz %i ic, a potrzebujesz %i na 1 dniowy slot!", lp, price_rs_1day);
				}
			}
			case 2:
			{
				if (lp >= price_rs_7day)
				{
					
					RemoveLP(param1, price_rs_7day)
					GiveRS(param1, 10080);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x04[ICT Points]\x01 Kupiles slot!! Przy pelnym serwerze uzyj w konsoli komendy connect, aby dolaczyc.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x04[ICT Points]\x01 Masz %i ic, a potrzebujesz %i na tygodniowy slot!", lp, price_rs_7day);
				}
			}
			case 3:
			{
				if (lp >= price_rs_14day)
				{
					
					RemoveLP(param1, price_rs_14day)
					GiveRS(param1, 20160);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x04[ICT Points]\x01 Kupiles slot!! Przy pelnym serwerze uzyj w konsoli komendy connect, aby dolaczyc.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x04[ICT Points]\x01 Masz %i ic, a potrzebujesz %i na 2 tygodniowy slot!", lp, price_rs_14day);
				}
			}
			case 4:
			{
				if (lp >= price_rs_30day)
				{
					
					RemoveLP(param1, price_rs_30day)
					GiveRS(param1, 43200);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x04[ICT Points]\x01 Kupiles slot!! Przy pelnym serwerze uzyj w konsoli komendy connect, aby dolaczyc.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x04[ICT Points]\x01 Masz %i ic, a potrzebujesz %i na 2 30dniowy slot!", lp, price_rs_30day);
				}
			}
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}

public Action:ForgivePoints(Handle:timer)
{
	new players = GetClientCount(false);
	new players_max = GetMaxClients();
	
	if (players <= (players_max / 4))
	{
		GiveLP(quaterplayers);
	}
	else if (players <= (players_max / 2))
	{
		GiveLP(halfplayers);
	}
	else
	{
		GiveLP(morethenhalf);
	}
	
	RemoveRSMIN(5);
	
	PrintToChatAll("\x04[ICT Points]\x01 Wpisz \x04!slot\x01 lub \x04!ip\x01 i kup sobie slot!");
}

public Action:CleanDatabase(Handle:timer)
{
	RemoveInaktivePlayers();
}

GetLP(client)
{
	new String:sqlstring[255];
	Format(sqlstring, sizeof(sqlstring), "SELECT points FROM points WHERE id = %i", sql_id[client]);
	
	SQL_LockDatabase(dbcon);
	
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_FetchRow(sql);
	new lp = SQL_FetchInt(sql, 0);
	CloseHandle(sql);
	
	SQL_UnlockDatabase(dbcon);
	
	return lp;
}

GiveLP(amount)
{
	new String:sqlstring[256];
	Format(sqlstring, sizeof(sqlstring), "UPDATE points SET points = points + %i WHERE ingame = 1 AND ingameid = %i", amount, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
}

RemoveLP(client, amount)
{
	if (IsClientInGame(client))
	{
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE points SET points = points - %i WHERE id = %i", amount, sql_id[client]);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	}
}

GiveRS(client, min)
{
	if (IsClientInGame(client))
	{
		// In die lp-Datenbank eintragen (Step 1)
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE fort SET rs = 1, rsmin = %i, serverid = %i WHERE steamid = '%s'", min, serverid, steamid);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
		
		// In die sm-Admin Datenbank eintragen (Step 2)
		new String:sqlstring2[256];
		Format(sqlstring2, sizeof(sqlstring2), "INSERT INTO sm_admins(authtype, identity, flags, name, immunity) VALUES ('steam' ,'%s', '%s', '%N', %i)", steamid, rsflags, client, rsimmunity);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring2);
		
		ServerCommand("sm_reloadadmins");
	}
}

bool:HaveClientRS(client)
{
	if (IsClientInGame(client))
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM fort WHERE id = %i AND rs = '1'", sql_id[client]);
		SQL_LockDatabase(dbcon);
		new Handle:sql = SQL_Query(dbcon, sqlstring);
		new rs_bool = SQL_GetRowCount(sql);
		CloseHandle(sql);
		SQL_UnlockDatabase(dbcon);
		
		if (rs_bool)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	return true;
}

GetRSMIN(client)
{
	new String:steamid[50];
	GetClientAuthString(client, steamid, sizeof(steamid));
	new String:sqlstring[200];
	Format(sqlstring, sizeof(sqlstring), "SELECT rsmin FROM fort WHERE steamid = '%s'", steamid);
	SQL_LockDatabase(dbcon);
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_UnlockDatabase(dbcon);
	SQL_FetchRow(sql);
	new rsmin = SQL_FetchInt(sql, 0);
	
	CloseHandle(sql);
	
	return rsmin;
}

RemoveRSMIN(min)
{
	new String:sqlstring[150];
	Format(sqlstring, sizeof(sqlstring), "UPDATE fort SET rsmin = rsmin - %i WHERE rs = 1 AND serverid = %i", min, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	new String:sqlstring2[150];
	Format(sqlstring2, sizeof(sqlstring2), "SELECT steamid FROM fort WHERE rs = 1 AND serverid = %i AND rsmin <= 0", serverid);
	
	SQL_TQuery(dbcon, RemoveInPl1, sqlstring2);
}

public RemoveInPl1(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	new number = SQL_GetRowCount(hndl);
	
	if (number != 0)
	{
		for (new a = 0; a != number; a++)
		{
			new String:steamid[256];
			SQL_FetchRow(hndl);
			SQL_FetchString(hndl, 0, steamid, sizeof(steamid));
			
			// Aus der LP-Datenbank austragen (Step 1)
			new String:sqlstr[256];
			Format(sqlstr, sizeof(sqlstr), "UPDATE fort SET rs = 0, rsmin = 0, serverid = 0 WHERE steamid = '%s'", steamid);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
			
			// Aus der SM-Admin Datenbank austragen (Step 2)
			new String:sqlstr2[150];
			/*
			if (removeflags)
			{
				Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s'", steamid);
			}
			else
			{
				Format(sqlstr3, sizeof(sqlstr3), "UPDATE sm_admins SET flags = replace(flags, '%s' WHERE identity = '%s'", steamid);
			}
			*/
			Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s'", steamid);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr2);
		}
		ServerCommand("sm_reloadadmins");
	}
}

RemoveInaktivePlayers()
{
	new String:sqlstr[150];
	Format(sqlstr, sizeof(sqlstr), "DELETE FROM fort WHERE ingame = 0 AND rs = 0");
	SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
}

RefreshSet()
{
	price_rs_1day = GetConVarInt(cv_price_rs_1day);
	price_rs_7day = GetConVarInt(cv_price_rs_7day);
	price_rs_14day = GetConVarInt(cv_price_rs_14day);
	price_rs_30day = GetConVarInt(cv_price_rs_30day);
	
	quaterplayers = GetConVarInt(cv_quaterplayers);
	halfplayers = GetConVarInt(cv_halfplayers);
	morethenhalf = GetConVarInt(cv_morethenhalf);
	
	serverid = GetConVarInt(cv_serverid);
	tablename = GetConVarInt(cv_tablename);

	GetConVarString(cv_rsflags, rsflags, sizeof(rsflags));
	//removeflags = GetConVarBool(cv_removeall);
	rsimmunity = GetConVarInt(cv_immu);
}

public EmptyResultSet(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
}