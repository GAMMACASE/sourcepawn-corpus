/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

public Plugin:myinfo = 
{
	name = "Super Beacon",
	author = "LightningZLaser",
	description = "Allows creating beacons of many different colors, as well as custom colored beacons.",
	version = "1.00",
	url = "www.FireWaLLCS.net/forums"
}

new String:BeaconPrefix[32];
new BeaconYellow[MAXPLAYERS + 1] = 0;
new BeaconOrange[MAXPLAYERS + 1] = 0;
new BeaconPink[MAXPLAYERS + 1] = 0;
new BeaconCyan[MAXPLAYERS + 1] = 0;
new BeaconPurple[MAXPLAYERS + 1] = 0;
new BeaconWhite[MAXPLAYERS + 1] = 0;
new BeaconRed[MAXPLAYERS + 1] = 0;
new BeaconGreen[MAXPLAYERS + 1] = 0;
new BeaconBlue[MAXPLAYERS + 1] = 0;
new BeaconCustom[MAXPLAYERS + 1] = 0;
new customColor[4] = {0, 0, 0, 255};

public OnPluginStart()
{
	CreateConVar("super_beacon", "1", "Super Beacon Plugin by LightningZLaser", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	CreateConVar("sb_display_public_message", "1", "1 to enable displaying public messages. 0 to disable.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	RegAdminCmd("sbeacon", SMENU, ADMFLAG_KICK);
	CreateTimer(1.0, Timer_Beacon_Yellow, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Orange, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Pink, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Cyan, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Purple, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_White, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Red, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Green, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Blue, _, TIMER_REPEAT);
	CreateTimer(1.0, Timer_Beacon_Custom, _, TIMER_REPEAT);
	HookEvent("player_death", PlayerDeath);
	HookEvent("round_start", GameStart);
}

public Action:SMENU(client, args)
{
	new Handle:menu = CreateMenu(SmenuHandler);
	SetMenuTitle(menu, "Super Beacon");
	AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
	AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
	AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
	AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
	AddMenuItem(menu, "Green Beacon", "Green Beacon");
	AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
	AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
	AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
	AddMenuItem(menu, "Red Beacon", "Red Beacon");
	AddMenuItem(menu, "White Beacon", "White Beacon");
	AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 0);
	
	return Plugin_Handled;
}

public Action:Timer_Beacon_Yellow(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconYellow[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 255;
			beaconColor[1] = 255;
			beaconColor[2] = 0;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Orange(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconOrange[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 250;
			beaconColor[1] = 130;
			beaconColor[2] = 0;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Pink(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconPink[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 255;
			beaconColor[1] = 120;
			beaconColor[2] = 175;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Cyan(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconCyan[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 0;
			beaconColor[1] = 255;
			beaconColor[2] = 255;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Purple(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconPurple[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 128;
			beaconColor[1] = 0;
			beaconColor[2] = 128;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_White(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconWhite[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 255;
			beaconColor[1] = 255;
			beaconColor[2] = 255;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Red(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconRed[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 255;
			beaconColor[1] = 0;
			beaconColor[2] = 0;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Green(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconGreen[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 0;
			beaconColor[1] = 255;
			beaconColor[2] = 0;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Blue(Handle:timer, any:value)
{
	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconBlue[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new beaconColor[4];
			beaconColor[0] = 0;
			beaconColor[1] = 0;
			beaconColor[2] = 255;
			beaconColor[3] = 500;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, beaconColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public Action:Timer_Beacon_Custom(Handle:timer, any:value)
{

	for (new i = 1; i <= GetMaxClients(); i++)
	{
		if ((BeaconCustom[i] == 1) && (IsClientInGame(i)) && (IsPlayerAlive(i)))
		{
			new Float:vec[3];
			GetClientAbsOrigin(i, vec);
			vec[2] += 30;
			new modelindex = PrecacheModel("sprites/laser.vmt");
			new haloindex = PrecacheModel("sprites/glow02.vmt");
			TE_SetupBeamRingPoint(vec, 10.0, 750.0, modelindex, haloindex, 0, 10, 0.6, 10.0, 0.5, customColor, 10, 0);
			TE_SendToAll();
			PrecacheSound("tools/ifm/beep.wav", false);
			EmitAmbientSound("tools/ifm/beep.wav", vec, i);
		}
	}
	return Plugin_Continue;
}

public BeaconYellowHandle(Handle:beaconyellow, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconyellow, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconYellow[i] == 0)
					{
						BeaconYellow[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a yellow beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a yellow beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconYellow[i] == 1)
					{
						BeaconYellow[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a yellow beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a yellow beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconyellow);
		SetMenuTitle(beaconyellow, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconYellow[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconyellow, name, name);
				}
				if (BeaconYellow[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconyellow, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconyellow, true);
		DisplayMenu(beaconyellow, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconOrangeHandle(Handle:beaconorange, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconorange, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconOrange[i] == 0)
					{
						BeaconOrange[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s an orange beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01an orange beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconOrange[i] == 1)
					{
						BeaconOrange[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed an orange beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed an orange beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconorange);
		SetMenuTitle(beaconorange, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconOrange[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconorange, name, name);
				}
				if (BeaconOrange[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconorange, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconorange, true);
		DisplayMenu(beaconorange, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconPinkHandle(Handle:beaconpink, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconpink, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconPink[i] == 0)
					{
						BeaconPink[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a pink beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a pink beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconPink[i] == 1)
					{
						BeaconPink[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a pink beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a pink beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconpink);
		SetMenuTitle(beaconpink, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconPink[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconpink, name, name);
				}
				if (BeaconPink[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconpink, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconpink, true);
		DisplayMenu(beaconpink, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconCyanHandle(Handle:beaconcyan, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconcyan, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconCyan[i] == 0)
					{
						BeaconCyan[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a cyan beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a cyan beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconCyan[i] == 1)
					{
						BeaconCyan[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a cyan beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a cyan beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconcyan);
		SetMenuTitle(beaconcyan, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconCyan[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconcyan, name, name);
				}
				if (BeaconCyan[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconcyan, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconcyan, true);
		DisplayMenu(beaconcyan, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconPurpleHandle(Handle:beaconpurple, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconpurple, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconPurple[i] == 0)
					{
						BeaconPurple[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a purple beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a purple beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconPurple[i] == 1)
					{
						BeaconPurple[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a purple beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a purple beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconpurple);
		SetMenuTitle(beaconpurple, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconPurple[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconpurple, name, name);
				}
				if (BeaconPurple[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconpurple, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconpurple, true);
		DisplayMenu(beaconpurple, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconWhiteHandle(Handle:beaconwhite, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconwhite, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconWhite[i] == 0)
					{
						BeaconWhite[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a white beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a white beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconWhite[i] == 1)
					{
						BeaconWhite[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a white beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a white beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconwhite);
		SetMenuTitle(beaconwhite, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconWhite[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconwhite, name, name);
				}
				if (BeaconWhite[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconwhite, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconwhite, true);
		DisplayMenu(beaconwhite, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconRedHandle(Handle:beaconred, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconred, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconRed[i] == 0)
					{
						BeaconRed[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a red beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a red beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconRed[i] == 1)
					{
						BeaconRed[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a red beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a red beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconred);
		SetMenuTitle(beaconred, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconRed[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconred, name, name);
				}
				if (BeaconRed[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconred, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconred, true);
		DisplayMenu(beaconred, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconGreenHandle(Handle:beacongreen, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beacongreen, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconGreen[i] == 0)
					{
						BeaconGreen[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a green beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a green beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconGreen[i] == 1)
					{
						BeaconGreen[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a green beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a green beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beacongreen);
		SetMenuTitle(beacongreen, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconGreen[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beacongreen, name, name);
				}
				if (BeaconGreen[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beacongreen, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beacongreen, true);
		DisplayMenu(beacongreen, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public BeaconBlueHandle(Handle:beaconblue, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconblue, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconBlue[i] == 0)
					{
						BeaconBlue[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a blue beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a blue beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconBlue[i] == 1)
					{
						BeaconBlue[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a blue beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a blue beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconblue);
		SetMenuTitle(beaconblue, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconBlue[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconblue, name, name);
				}
				if (BeaconBlue[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconblue, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconblue, true);
		DisplayMenu(beaconblue, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}
//
public BeaconCustomHandle(Handle:beaconcustom, MenuAction:action, client, param2)
{
	new String:name[64];
	if(action == MenuAction_Select) 
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, sizeof(nameclient1));
		GetMenuItem(beaconcustom, param2, nameclient2, sizeof(nameclient2));
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if ((IsClientInGame(i)) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, sizeof(loopname));
				if ((StrEqual(loopname, nameclient2, true)) && (IsClientInGame(i)))
				{
					if (BeaconCustom[i] == 0)
					{
						BeaconCustom[i] = 1;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You gave %s a custom beacon", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01gave \x03%s \x01a custom beacon", nameclient1, nameclient2);
						}
					}
					else if (BeaconCustom[i] == 1)
					{
						BeaconCustom[i] = 0;
						new Handle:publicMessage = FindConVar("sb_display_public_message");
						new displayMessage = GetConVarInt(publicMessage);
						if (displayMessage == 0)
						{
							PrintToChat(client, "\x03[\x04Super Beacon\x03] \x01You removed a custom beacon from %s", nameclient2);
						}
						else if (displayMessage == 1)
						{
							PrintToChatAll("\x03[\x04Super Beacon\x03] %s \x01removed a custom beacon from \x03%s", nameclient1, nameclient2);
						}
					}
				}
			}
		}
		RemoveAllMenuItems(beaconcustom);
		SetMenuTitle(beaconcustom, "Select Player to Beacon/Unbeacon");
		for (new i = 1; i <= GetMaxClients(); i++)
		{
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (BeaconCustom[i] == 0)
				{
					GetClientName(i, name, sizeof(name));
					AddMenuItem(beaconcustom, name, name);
				}
				if (BeaconCustom[i] == 1)
				{
					GetClientName(i, name, sizeof(name));
					BeaconPrefix = "[BEACONED] ";
					StrCat(BeaconPrefix, 64, name);
					AddMenuItem(beaconcustom, name, BeaconPrefix);
				}
			}
		}
		SetMenuExitBackButton(beaconcustom, true);
		DisplayMenu(beaconcustom, client, 0);
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:menu = CreateMenu(SmenuHandler);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}

public Action:PlayerDeath(Handle:Event, const String:Name[], bool:Broadcast)
{
	new dieduserid = GetEventInt(Event, "userid");
	new diedindex = GetClientOfUserId(dieduserid);
	BeaconYellow[diedindex] = 0;
	BeaconOrange[diedindex] = 0;
	BeaconPink[diedindex] = 0;
	BeaconCyan[diedindex] = 0;
	BeaconPurple[diedindex] = 0;
	BeaconWhite[diedindex] = 0;
	BeaconRed[diedindex] = 0;
	BeaconGreen[diedindex] = 0;
	BeaconBlue[diedindex] = 0;
	BeaconCustom[diedindex] = 0;
}

public Action:GameStart(Handle:Event, const String:Name[], bool:Broadcast)
{
	for (new i = 1; i <= (GetMaxClients()); i++)
	{
		if (IsValidEntity(i))
		{
			BeaconYellow[i] = 0;
			BeaconOrange[i] = 0;
			BeaconPink[i] = 0;
			BeaconCyan[i] = 0;
			BeaconPurple[i] = 0;
			BeaconWhite[i] = 0;
			BeaconRed[i] = 0;
			BeaconGreen[i] = 0;
			BeaconBlue[i] = 0;
			BeaconCustom[i] = 0;
		}
	}
}

public MenuHandlerNew(Handle:changecolourmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[64];
		GetMenuItem(changecolourmenu, param2, info, sizeof(info));
		if (strcmp(info, "Red +1") == 0)
		{
			if (customColor[0] <= 254)
			{
				customColor[0] += 1;
			}
			else
			{
				customColor[0] = 0;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Red +5") == 0)
		{
			if (customColor[0] <= 250)
			{
				customColor[0] += 5;
			}
			else
			{
				customColor[0] = 0;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Red +10") == 0)
		{
			if (customColor[0] <= 245)
			{
				customColor[0] += 10;
			}
			else
			{
				customColor[0] = 0;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Red -1") == 0)
		{
			if (customColor[0] >= 1)
			{
				customColor[0] -= 1;
			}
			else
			{
				customColor[0] = 255;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Red -5") == 0)
		{
			if (customColor[0] >= 5)
			{
				customColor[0] -= 5;
			}
			else
			{
				customColor[0] = 255;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Red -10") == 0)
		{
			if (customColor[0] >= 10)
			{
				customColor[0] -= 10;
			}
			else
			{
				customColor[0] = 255;
			}
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green +1") == 0)
		{
			if (customColor[1] <= 254)
			{
				customColor[1] += 1;
			}
			else
			{
				customColor[1] = 0;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green +5") == 0)
		{
			if (customColor[1] <= 250)
			{
				customColor[1] += 5;
			}
			else
			{
				customColor[1] = 0;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green +10") == 0)
		{
			if (customColor[1] <= 245)
			{
				customColor[1] += 10;
			}
			else
			{
				customColor[1] = 0;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green -1") == 0)
		{
			if (customColor[1] >= 1)
			{
				customColor[1] -= 1;
			}
			else
			{
				customColor[1] = 255;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green -5") == 0)
		{
			if (customColor[1] >= 5)
			{
				customColor[1] -= 5;
			}
			else
			{
				customColor[1] = 255;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Green -10") == 0)
		{
			if (customColor[1] >= 10)
			{
				customColor[1] -= 10;
			}
			else
			{
				customColor[1] = 255;
			}
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue +1") == 0)
		{
			if (customColor[2] <= 254)
			{
				customColor[2] += 1;
			}
			else
			{
				customColor[2] = 0;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue +5") == 0)
		{
			if (customColor[2] <= 250)
			{
				customColor[2] += 5;
			}
			else
			{
				customColor[2] = 0;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue +10") == 0)
		{
			if (customColor[2] <= 245)
			{
				customColor[2] += 10;
			}
			else
			{
				customColor[2] = 0;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue -1") == 0)
		{
			if (customColor[2] >= 1)
			{
				customColor[2] -= 1;
			}
			else
			{
				customColor[2] = 255;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue -5") == 0)
		{
			if (customColor[2] >= 5)
			{
				customColor[2] -= 5;
			}
			else
			{
				customColor[2] = 255;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Blue -10") == 0)
		{
			if (customColor[2] >= 10)
			{
				customColor[2] -= 10;
			}
			else
			{
				customColor[2] = 255;
			}
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha +1") == 0)
		{
			if (customColor[3] <= 254)
			{
				customColor[3] += 1;
			}
			else
			{
				customColor[3] = 0;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha +5") == 0)
		{
			if (customColor[3] <= 250)
			{
				customColor[3] += 5;
			}
			else
			{
				customColor[3] = 0;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha +10") == 0)
		{
			if (customColor[3] <= 245)
			{
				customColor[3] += 10;
			}
			else
			{
				customColor[3] = 0;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha -1") == 0)
		{
			if (customColor[3] >= 1)
			{
				customColor[3] -= 1;
			}
			else
			{
				customColor[3] = 255;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha -5") == 0)
		{
			if (customColor[3] >= 5)
			{
				customColor[3] -= 5;
			}
			else
			{
				customColor[3] = 255;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		else if (strcmp(info, "Alpha -10") == 0)
		{
			if (customColor[3] >= 10)
			{
				customColor[3] -= 10;
			}
			else
			{
				customColor[3] = 255;
			}
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			new Handle:changecolormenu = CreateMenu(SmenuHandler);
			SetMenuTitle(changecolormenu, "Choose which value you wish to modify");
			AddMenuItem(changecolormenu, "Red", "Red");
			AddMenuItem(changecolormenu, "Green", "Green");
			AddMenuItem(changecolormenu, "Blue", "Blue");
			AddMenuItem(changecolormenu, "Alpha", "Alpha");
			SetMenuExitBackButton(changecolormenu, true);
			DisplayMenu(changecolormenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
	}
}

public SmenuHandler(Handle:menu, MenuAction:action, client, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[64];
		new String:name[64];
		GetMenuItem(menu, param2, info, sizeof(info));
		if(strcmp(info, "Yellow Beacon") == 0)
		{
			new Handle:beaconyellow = CreateMenu(BeaconYellowHandle);
			SetMenuTitle(beaconyellow, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconYellow[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconyellow, name, name);
					}
					if (BeaconYellow[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconyellow, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconyellow, true);
			DisplayMenu(beaconyellow, client, 0);
		}
		if(strcmp(info, "Orange Beacon") == 0)
		{
			new Handle:beaconorange = CreateMenu(BeaconOrangeHandle);
			SetMenuTitle(beaconorange, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconOrange[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconorange, name, name);
					}
					if (BeaconOrange[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconorange, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconorange, true);
			DisplayMenu(beaconorange, client, 0);
		}
		if(strcmp(info, "Pink Beacon") == 0)
		{
			new Handle:beaconpink = CreateMenu(BeaconPinkHandle);
			SetMenuTitle(beaconpink, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconPink[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconpink, name, name);
					}
					if (BeaconPink[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconpink, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconpink, true);
			DisplayMenu(beaconpink, client, 0);
		}
		if(strcmp(info, "Cyan Beacon") == 0)
		{
			new Handle:beaconcyan = CreateMenu(BeaconCyanHandle);
			SetMenuTitle(beaconcyan, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconCyan[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconcyan, name, name);
					}
					if (BeaconCyan[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconcyan, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconcyan, true);
			DisplayMenu(beaconcyan, client, 0);
		}
		if(strcmp(info, "White Beacon") == 0)
		{
			new Handle:beaconwhite = CreateMenu(BeaconWhiteHandle);
			SetMenuTitle(beaconwhite, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconWhite[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconwhite, name, name);
					}
					if (BeaconWhite[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconwhite, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconwhite, true);
			DisplayMenu(beaconwhite, client, 0);
		}
		if(strcmp(info, "Purple Beacon") == 0)
		{
			new Handle:beaconpurple = CreateMenu(BeaconPurpleHandle);
			SetMenuTitle(beaconpurple, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconPurple[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconpurple, name, name);
					}
					if (BeaconPurple[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconpurple, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconpurple, true);
			DisplayMenu(beaconpurple, client, 0);
		}
		if(strcmp(info, "Red Beacon") == 0)
		{
			new Handle:beaconred = CreateMenu(BeaconRedHandle);
			SetMenuTitle(beaconred, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconRed[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconred, name, name);
					}
					if (BeaconRed[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconred, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconred, true);
			DisplayMenu(beaconred, client, 0);
		}
		if(strcmp(info, "Green Beacon") == 0)
		{
			new Handle:beacongreen = CreateMenu(BeaconGreenHandle);
			SetMenuTitle(beacongreen, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconGreen[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beacongreen, name, name);
					}
					if (BeaconGreen[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beacongreen, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beacongreen, true);
			DisplayMenu(beacongreen, client, 0);
		}
		if(strcmp(info, "Blue Beacon") == 0)
		{
			new Handle:beaconblue = CreateMenu(BeaconBlueHandle);
			SetMenuTitle(beaconblue, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconBlue[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconblue, name, name);
					}
					if (BeaconBlue[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconblue, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconblue, true);
			DisplayMenu(beaconblue, client, 0);
		}
		if(strcmp(info, "Custom Beacon") == 0)
		{
			new Handle:beaconcustom = CreateMenu(BeaconCustomHandle);
			SetMenuTitle(beaconcustom, "Select Player to Beacon/Unbeacon");
			for (new i = 1; i <= GetMaxClients(); i++)
			{
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (BeaconCustom[i] == 0)
					{
						GetClientName(i, name, sizeof(name));
						AddMenuItem(beaconcustom, name, name);
					}
					if (BeaconCustom[i] == 1)
					{
						GetClientName(i, name, sizeof(name));
						BeaconPrefix = "[BEACONED] ";
						StrCat(BeaconPrefix, 64, name);
						AddMenuItem(beaconcustom, name, BeaconPrefix);
					}
				}
			}
			SetMenuExitBackButton(beaconcustom, true);
			DisplayMenu(beaconcustom, client, 0);
		}
		if(strcmp(info, "Change Custom Beacon Values") == 0)
		{
			new Handle:changecolourmenu = CreateMenu(SmenuHandler);
			SetMenuTitle(changecolourmenu, "Choose which value you wish to modify");
			AddMenuItem(changecolourmenu, "Red", "Red");
			AddMenuItem(changecolourmenu, "Green", "Green");
			AddMenuItem(changecolourmenu, "Blue", "Blue");
			AddMenuItem(changecolourmenu, "Alpha", "Alpha");
			SetMenuExitBackButton(changecolourmenu, true);
			DisplayMenu(changecolourmenu, client, 0);
			PrintToChat(client, "Current RGBA Values: %i %i %i %i", customColor[0], customColor[1], customColor[2], customColor[3]);
		}
		if(strcmp(info, "Red") == 0)
		{
			new Handle:redmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(redmenu, "Red Value");
			AddMenuItem(redmenu, "Red +1", "Red +1");
			AddMenuItem(redmenu, "Red +5", "Red +5");
			AddMenuItem(redmenu, "Red +10", "Red +10");
			AddMenuItem(redmenu, "Red -1", "Red -1");
			AddMenuItem(redmenu, "Red -5", "Red -5");
			AddMenuItem(redmenu, "Red -10", "Red -10");
			SetMenuExitBackButton(redmenu, true);
			SetMenuExitButton(redmenu, true);
			DisplayMenu(redmenu, client, 0);
		}
		if(strcmp(info, "Green") == 0)
		{
			new Handle:greenmenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(greenmenu, "Green Value");
			AddMenuItem(greenmenu, "Green +1", "Green +1");
			AddMenuItem(greenmenu, "Green +5", "Green +5");
			AddMenuItem(greenmenu, "Green +10", "Green +10");
			AddMenuItem(greenmenu, "Green -1", "Green -1");
			AddMenuItem(greenmenu, "Green -5", "Green -5");
			AddMenuItem(greenmenu, "Green -10", "Green -10");
			SetMenuExitBackButton(greenmenu, true);
			SetMenuExitButton(greenmenu, true);
			DisplayMenu(greenmenu, client, 0);
		}
		if(strcmp(info, "Blue") == 0)
		{
			new Handle:bluemenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(bluemenu, "Blue Value");
			AddMenuItem(bluemenu, "Blue +1", "Blue +1");
			AddMenuItem(bluemenu, "Blue +5", "Blue +5");
			AddMenuItem(bluemenu, "Blue +10", "Blue +10");
			AddMenuItem(bluemenu, "Blue -1", "Blue -1");
			AddMenuItem(bluemenu, "Blue -5", "Blue -5");
			AddMenuItem(bluemenu, "Blue -10", "Blue -10");
			SetMenuExitBackButton(bluemenu, true);
			SetMenuExitButton(bluemenu, true);
			DisplayMenu(bluemenu, client, 0);
		}
		if(strcmp(info, "Alpha") == 0)
		{
			new Handle:alphamenu = CreateMenu(MenuHandlerNew);
			SetMenuTitle(alphamenu, "Alpha Value");
			AddMenuItem(alphamenu, "Alpha +1", "Alpha +1");
			AddMenuItem(alphamenu, "Alpha +5", "Alpha +5");
			AddMenuItem(alphamenu, "Alpha +10", "Alpha +10");
			AddMenuItem(alphamenu, "Alpha -1", "Alpha -1");
			AddMenuItem(alphamenu, "Alpha -5", "Alpha -5");
			AddMenuItem(alphamenu, "Alpha -10", "Alpha -10");
			SetMenuExitBackButton(alphamenu, true);
			SetMenuExitButton(alphamenu, true);
			DisplayMenu(alphamenu, client, 0);
		}
	}
	else if (action == MenuAction_Cancel)
	{
		if (param2 == MenuCancel_ExitBack)
		{
			RemoveAllMenuItems(menu);
			SetMenuTitle(menu, "Super Beacon");
			AddMenuItem(menu, "Custom Beacon", "Custom Beacon");
			AddMenuItem(menu, "Change Custom Beacon Values", "Change Custom Beacon Values");
			AddMenuItem(menu, "Blue Beacon", "Blue Beacon");
			AddMenuItem(menu, "Cyan Beacon", "Cyan Beacon");
			AddMenuItem(menu, "Green Beacon", "Green Beacon");
			AddMenuItem(menu, "Orange Beacon", "Orange Beacon");
			AddMenuItem(menu, "Pink Beacon", "Pink Beacon");
			AddMenuItem(menu, "Purple Beacon", "Purple Beacon");
			AddMenuItem(menu, "Red Beacon", "Red Beacon");
			AddMenuItem(menu, "White Beacon", "White Beacon");
			AddMenuItem(menu, "Yellow Beacon", "Yellow Beacon");
			SetMenuExitButton(menu, true);
			DisplayMenu(menu, client, 0);
		}
	}
}