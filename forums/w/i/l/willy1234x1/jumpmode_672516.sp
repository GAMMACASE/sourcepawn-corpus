/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>

#define PLUGIN_VERSION  "1.0"

public Plugin:myinfo = 
{
	name = "Jump Mode",
	author = "TheJCS",
	description = "Utilities to TF2 Jump Maps",
	version = PLUGIN_VERSION,
	url = "http://kongbr.com.br"
}
static const TFClass_MaxAmmo[TFClassType][3] =
{
  {-1, -1, -1}, {32, 36, -1},
  {25, 75, -1}, {16, 32, -1},
  {16, 24, -1}, {150, -1, -1},
  {200, 32, -1}, {200, 32, -1},
  {24, -1, -1}, {32, 200, 200}
};

static const TFClass_MaxClip[TFClassType][2] = 
{
  {-1, -1}, {6, 12}, {25, 0}, {4, 6}, {4, 8}, 
  {40, -1}, {-1, 6}, {-1, 6}, {6, -1}, {6, 12}
};

new Handle:g_hPluginEnabled
new Handle:g_hTeleport
new Handle:g_hAutoTeleport
new Handle:g_hAutoRespawn
new Handle:g_hAutoHeal
new Handle:g_hAutoRessuply;
new Handle:g_hRessuply;
new Handle:g_hCriticals;
new bool:g_bPluginEnabled;
new Float:g_fLocation[33][3];
new g_iMaxClients;

public OnPluginStart()
{
	// ConVars
	CreateConVar("jm_version", PLUGIN_VERSION, "Jump Mode plugin Version", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	g_hPluginEnabled = CreateConVar("jm_enabled", "1", "Enable the Jump Mode", FCVAR_PLUGIN, true, 0.0, true, 2.0);
	g_hTeleport = CreateConVar("jm_teleport_enabled", "1", "Enable the Jump Mode Teleporter", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hAutoTeleport = CreateConVar("jm_autoteleport", "1", "Enable the Jump Mode Auto Teleporter", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hAutoRespawn = CreateConVar("jm_autorespawn", "1", "Enable the Jump Mode Auto Respawn", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hAutoHeal = CreateConVar("jm_autoheal", "1", "Enable the Jump Mode Auto Healer", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hAutoRessuply = CreateConVar("jm_autoressuply", "1", "Enable the Jump Mode Auto Ressuply", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hRessuply = CreateConVar("jm_ressuply_enabled", "1", "Enable the Jump Mode Ressuply", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hCriticals = CreateConVar("jm_criticals", "0", "Set Jump Mode Criticals", FCVAR_PLUGIN, true, 0.0, true, 2.0);
	
	// Commands
	RegConsoleCmd("jm_saveloc", cmdSaveLoc, "Save your current position");
	RegConsoleCmd("jm_resetloc", cmdResetLoc, "Reset your saved location");	
	RegConsoleCmd("jm_teleport", cmdTeleport, "Teleport you to the saved position");
	RegConsoleCmd("jm_ressuply", cmdRessuply, "Ressuply your ammo");

	HookEvent("teamplay_round_start", eventRoundStart);
	
	HookEvent("player_changeclass", eventChangeClass);
	HookEvent("player_team", eventChangeClass);
	HookEvent("player_death", eventPlayerDeath);
	HookEvent("player_spawn", eventPlayerSpawn);
	HookEvent("player_hurt", eventPlayerHurt);
	
	HookConVarChange(g_hPluginEnabled, cvarEnabledChanged);	
	
	g_iMaxClients = GetMaxClients();
	
	ChangePluginStatus();
}

// Loader

public cvarEnabledChanged(Handle:convar, const String:oldValue[], const String:newValue[])
{
	ChangePluginStatus();
}

ChangePluginStatus()
{
	new iEnabled = GetConVarInt(g_hPluginEnabled);
	if(iEnabled == 0)
		TurnOffPlugin();
	else if(iEnabled == 1)
	{
		new String:sMapName[32];
		GetCurrentMap(sMapName, 32);
		if(StrContains(sMapName, "jump", "rj", false) != -1)
			TurnOnPlugin();
		else
			TurnOffPlugin();
	}
	else
		TurnOnPlugin();
}

TurnOnPlugin()
{
	g_bPluginEnabled = true;
	for(new i = 0; i < g_iMaxClients; i++)
		ZeroLoc(i);
	PrintToChatAll("\x04[JM]\x01 Jump Mode has been turned on");
}

TurnOffPlugin()
{
	g_bPluginEnabled = false;
	PrintToChatAll("\x04[JM]\x01 Jump Mode has been turned off");
}

 
// Location Resets

public OnClientPutInServer(client)
{
	if(g_bPluginEnabled)
		ZeroLoc(client);
}

public Action:eventRoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(g_bPluginEnabled)
	{
		for(new i = 0; i < g_iMaxClients; i++)
			ZeroLoc(i);
	}
}


public Action:eventChangeClass(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(g_bPluginEnabled)
	{
		new client = GetClientOfUserId(GetEventInt(event, "userid"));
		ZeroLoc(client);
		PrintToChat(client, "\x04[JM]\x01 Your position has been reset");
	}
}


public Action:cmdResetLoc(client, args) {
	ResetLoc(client);
}

ResetLoc(client)
{
	if(!g_bPluginEnabled)
		PrintToChat(client, "\x04[JM]\x01 Jump Mode is not enabled");
	else if(!GetConVarBool(g_hTeleport))
		PrintToChat(client, "\x04[JM]\x01 Jump Mode Teleporter is not enabled");
	else
	{
		ZeroLoc(client);
		PrintToChat(client, "\x04[JM]\x01 Your location has been reset");
	}
}
	
ZeroLoc(id)
{
	g_fLocation[id][0] = 0.0;
	g_fLocation[id][1] = 0.0;
	g_fLocation[id][2] = 0.0;
}

// Ressuply

public Action:eventPlayerHurt(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(g_bPluginEnabled)
	{
		new client = GetClientOfUserId(GetEventInt(event, "userid"));
		if(GetConVarBool(g_hAutoHeal))
			CreateTimer(0.1, timerRegen, client);
		if(GetConVarBool(g_hAutoRessuply))
			Ressuply(client);
	}
}

public Action:timerRegen(Handle:timer, any:client)
{
	new iMaxHealth = TF2_GetPlayerResourceData(client, TFResource_MaxHealth);
	SetEntityHealth(client, iMaxHealth);
}

public Action:cmdRessuply(client, args)
{
	if(GetConVarBool(g_hRessuply))
		Ressuply(client);
	else
		PrintToChat(client, "\x04[JM]\x01 Ressuply is disabled")
}

Ressuply(client)
{
	new TFClassType:iClass = TF2_GetPlayerClass(client);
	for (new i = 0; i < 3; i++)
	{
		if (TFClass_MaxAmmo[iClass][i] != -1)
			SetEntData(client, FindSendPropInfo("CTFPlayer", "m_iAmmo") + ((i+1)*4), TFClass_MaxAmmo[iClass][i]);
		if (i != 2 && TFClass_MaxClip[iClass][i] != -1)
			SetEntData(GetPlayerWeaponSlot(client, i), FindSendPropInfo("CTFWeaponBase", "m_iClip1"), TFClass_MaxClip[iClass][i]);
	}
}

// Location Saver

public Action:cmdSaveLoc(client, args)
{
	SaveLoc(client);
}

SaveLoc(client)
{
	if(!g_bPluginEnabled)
		PrintToChat(client, "\x04[JM]\x01 Jump Mode is not enabled");
	else if(!GetConVarBool(g_hTeleport))
		PrintToChat(client, "\x04[JM]\x01 Jump Mode Teleporter is not enabled");		
	else if(!IsPlayerAlive(client))
		PrintToChat(client, "\x04[JM]\x01 You must be alive to save your location");
	else
	{
		GetClientAbsOrigin(client, g_fLocation[client]);
		PrintToChat(client, "\x04[JM]\x01 Your location has been saved");
	}
}


// Teleporter

public Action:eventPlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	if(g_bPluginEnabled  && GetConVarBool(g_hAutoTeleport) && g_fLocation[client][0] != 0.0)
	{
		TeleportEntity(client, g_fLocation[client], NULL_VECTOR, NULL_VECTOR);
		PrintToChat(client, "\x04[JM]\x01 You have been auto teleported");
	}
}

public Action:cmdTeleport(client, args) {
	Teleport(client);
}

Teleport(client){
	if(!g_bPluginEnabled)
		PrintToChat(client, "\x04[JM]\x01 Jump Mode is not enabled");
	else if(!GetConVarBool(g_hTeleport))
		PrintToChat(client, "\x04[JM]\x01 Jump Mode Teleporter is not enabled");		
	else if(!IsPlayerAlive(client))
		PrintToChat(client, "\x04[JM]\x01 You must be alive to teleport");
	else if(g_fLocation[client][0] == 0.0)
		PrintToChat(client, "\x04[JM]\x01 You haven't saved your position yet");
	else
	{
		TeleportEntity(client, g_fLocation[client], NULL_VECTOR, NULL_VECTOR);
		PrintToChat(client, "\x04[JM]\x01 You have been teleported");
	}
}

// Auto Respawn

public Action:eventPlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(g_bPluginEnabled && GetConVarBool(g_hAutoRespawn))
	{
		new client = GetClientOfUserId(GetEventInt(event, "userid"));
		CreateTimer(0.1, timerRespawn, client);
	}
}

public Action:timerRespawn(Handle:timer, any:client)
{
	TF2_RespawnPlayer(client);
}

// Criticals

public Action:TF2_CalcIsAttackCritical(client, weapon, String:weaponname[], &bool:result)
{
 	new criticals = GetConVarInt(g_hCriticals);
	if(!g_bPluginEnabled || criticals  == 1)
		return Plugin_Continue;	
	else if(criticals  == 0)
		result = false;	
	else if(criticals  == 2)
		result = true;	
	return Plugin_Handled;
}

