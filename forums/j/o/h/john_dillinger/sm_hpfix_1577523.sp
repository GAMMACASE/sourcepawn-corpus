/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdkhooks>
#include <zombiereloaded>



#define CLIENT_HP_LIMIT 500



new players_hp [MAXPLAYERS];

public Plugin:myinfo = 
{
	name = "HP Fix",
	author = "John Dillinger",
	description = "Fix the hp bug",
	version = "1.0",
	url = "hellz.fr"
}

public OnPluginStart()
{	
	HookEvent("player_jump", Event_PlayerJump, EventHookMode_PostNoCopy)
	HookEvent("round_start", Event_RoundStart, EventHookMode_PostNoCopy)

	
	for (new client = 1; client < MaxClients; client++)
	{
		if (ValidPlayer(client))
		{	
		//PrintToServer("before checking for clients");
			//SDKHook(client, SDKHook_OnTakeDamage, OnTakeDamage);
			SDKHook(client,SDKHook_TraceAttack,SDK_Forwarded_TraceAttack);
			//PrintToServer("onstartup fired");
		}		
	}
}



public OnPluginEnd()
{
	for (new client = 1;client <= MAXPLAYERS;client++)
	{
		if (ValidPlayer(client))
		{
		SDKUnhook (client,SDKHook_TraceAttack,SDK_Forwarded_TraceAttack );
		//PrintToServer("onend fired");
		}
		
	}
	
	UnhookEvent("player_jump", Event_PlayerJump)
	UnhookEvent("round_start", Event_RoundStart)
	

}

public OnClientPutInServer(client){
	SDKHook(client,SDKHook_TraceAttack,SDK_Forwarded_TraceAttack);
}



public OnClientDisconnect(client)
{
	SDKUnhook(client,SDKHook_TraceAttack,SDK_Forwarded_TraceAttack);
	//PrintToServer("ondisconnect fired");
}
	



public Action:Event_PlayerJump(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	if (ValidPlayer(client) && ZR_IsClientZombie(client))
	{
		//PrintToConsole(client, "[SM: HP Fix] Event_PlayerJump: Before Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client),players_hp[client])
		reset_hp(client);
		//PrintToConsole(client, "[SM: HP Fix] Event_PlayerJump: After Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client), players_hp[client])
	}
}


/*
public ZR_OnClientRespawned(client, ZR_RespawnCondition:condition)
{
	
	if (ValidPlayer(client) && ZR_IsClientZombie(client))
	{	
		players_hp[client] = 0;
		PrintToConsole(client, "[SM: HP Fix] ZR_OnClientRespawned(): Before Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client),players_hp[client])
		reset_hp(client);
		PrintToConsole(client, "[SM: HP Fix] ZR_OnClientRespawned(): After Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client), players_hp[client])
		
	}
}
* */

public ZR_OnClientInfected(client, attacker, bool:motherInfect, bool:respawnOverride, bool:respawn)
{
	if (ValidPlayer(client))
	{	
		players_hp[client] = 0;
		//PrintToConsole(client, "[SM: HP Fix] ZR_OnClientInfected(): Before Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client),players_hp[client])
		reset_hp(client);
		//PrintToConsole(client, "[SM: HP Fix] ZR_OnClientInfected(): After Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client), players_hp[client])
	}
}



public reset_hp(client){
	new hp = GetClientHealth(client)
	if( hp > CLIENT_HP_LIMIT){
		players_hp[client] +=  hp - CLIENT_HP_LIMIT
		SetEntityHealth(client,CLIENT_HP_LIMIT)
	}
}


public Action:Event_RoundStart(Handle:event, const String:name[], bool:broadcast) {
	PrintToChatAll("\x01\x04[SM HPFix]\x01 by John Dillinger - www.hellz.fr")
	PrintToChatAll("\x01\x04[SM HPFix]\x01 Jump when you collide on ground.")
	for (new client = 1;client <= MAXPLAYERS;client++)
	{
		if (ValidPlayer(client))
		{
			//PrintToConsole(client, "[SM: HP Fix] Event_RoundStart:Before Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client), players_hp[client])
			players_hp[client] = 0;
			//PrintToConsole(client, "[SM: HP Fix] Event_RoundStart: After Fixing HP: HP= %d, remaining HP=%d", GetClientHealth(client), players_hp[client])
		}
	}
}


public Action:SDK_Forwarded_TraceAttack(client, &attacker, &inflictor, &Float:damage, &damagetype)
{
	
	
	if(!ValidPlayer(client) || !ZR_IsClientZombie(client)){
		return Plugin_Continue
	}
	
	decl String:client_name[64];
    
	GetClientName(client, client_name, sizeof(client_name))
	
	new hp = GetClientHealth(client)
	
	new new_hp
	
	
	//PrintToConsole(client, "[SM: HP Fix]client=%d, client_name=%s, attacker=%d, inflictor=%d, HP= %d, damage=%d, remaining HP=%d",client,client_name,attacker,inflictor,hp, dmg, players_hp[client])
	
	
	if( hp > CLIENT_HP_LIMIT){
		players_hp[client] +=  hp - CLIENT_HP_LIMIT
		new_hp = CLIENT_HP_LIMIT
	}else if(hp < 200){
		
		new delta = CLIENT_HP_LIMIT - hp
		new available_hp = players_hp[client]
		
		if(available_hp >= delta){
			players_hp[client] -= delta
			new_hp = CLIENT_HP_LIMIT
		}
		else{
			new_hp = hp + players_hp[client]
			players_hp[client] = 0
		}
		
		
	}
	
	if(new_hp != 0){
			//PrintToConsole(client, "[SM: HP Fix] Before Increasing HP: HP= %d, new HP=%d, remaining HP=%d", GetClientHealth(client),new_hp, players_hp[client])
			SetEntityHealth(client,new_hp)
			//PrintToConsole(client, "[SM: HP Fix] After Increasing HP: HP= %d, new HP=%d, remaining HP=%d", GetClientHealth(client),new_hp, players_hp[client])
	}	
		
	return Plugin_Continue
    
}

stock bool:ValidPlayer(client){
	return client>0 && client<=MaxClients && IsClientConnected(client) && IsClientInGame(client) && IsPlayerAlive(client);	
}