/* Plugin Template generated by Pawn Studio */
#pragma semicolon 1
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions> 
#include <sdkhooks>
 
#define Pai 3.14159265358979323846 
 
#define action_normal 1
#define action_walk 2
#define action_crawl 3
#define action_run 4
 
new Tank_Class;

public Plugin:myinfo = 
{
	name = "Prevent Tank From Suicide",
	author = "Pan XiaoHai",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}
 
new GameMode;
new L4D2Version;
 
public OnPluginStart()
{
	GameCheck(); 
	if(GameMode!=1)return; 
	HookEvent("player_incapacitated", player_incapacitated );   
}  
public Action:player_incapacitated(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{ 
 	new victim = GetClientOfUserId(GetEventInt(hEvent, "userid"));  
	new attacker = GetClientOfUserId(GetEventInt(hEvent, "attacker"));
	if(victim >0 && attacker >0 && attacker==victim)
	{
		if(GetClientTeam(victim)==3 && GetEntProp(victim, Prop_Send, "m_zombieClass")==Tank_Class)
		{ 
			 
			new Float:pos[3];
			new Float:ang[3]; 
			
			new flag=GetEntProp(victim, Prop_Send, "m_fFlags");
			new m_nSequence = GetEntProp(victim, Prop_Data, "m_nSequence");
			new m_iHealth= GetEntProp(victim, Prop_Send, "m_iHealth" );
			new m_iMaxHealth= GetEntProp(victim, Prop_Send, "m_iMaxHealth" );	
			GetEntPropVector(victim, Prop_Send, "m_vecOrigin", pos); 
			GetEntPropVector(victim, Prop_Send, "m_angRotation", ang);
			AcceptEntityInput(victim, "kill");
			
			new tank=CreateTank(victim);	
			if(tank>0)
			{
				SetEntProp(tank, Prop_Send, "m_fFlags", flag);
				SetEntProp(tank, Prop_Data, "m_nSequence",m_nSequence);		
				SetEntProp(tank, Prop_Send, "m_iHealth", m_iHealth);
				SetEntProp(tank, Prop_Send, "m_iMaxHealth", m_iMaxHealth);	
				TeleportEntity(tank, pos, ang, NULL_VECTOR);  
				PrintToChatAll("Tank try to suicide, but failed!");
			} 
		}
	}
}
CreateTank(oldtank)
{
	new tank=0;
	decl bool:exsit[MAXPLAYERS+1];
	for(new i=1; i<=MaxClients; i++)
	{
		exsit[i]=false;
		if(IsClientInGame(i) && GetClientTeam(i)==3 && IsPlayerAlive(i))
		{
			if(GetEntProp(i, Prop_Send, "m_zombieClass")==Tank_Class)
			{
				exsit[i]=true;
			}
		}
	}
	 
	new flags = GetCommandFlags("z_spawn");
	SetCommandFlags("z_spawn", flags & ~FCVAR_CHEAT);
	FakeClientCommand(oldtank, "z_spawn tank");
	SetCommandFlags("z_spawn", flags);
	
	for(new i=1; i<=MaxClients; i++)
	{ 
		if(IsClientInGame(i) && GetClientTeam(i)==3 && IsPlayerAlive(i))
		{
			if(GetEntProp(i, Prop_Send, "m_zombieClass")==Tank_Class)
			{
				if(exsit[i]==false)
				{
					tank=i;
					break;
				}
			}
		}
	}	 
	return tank;
} 
GameCheck()
{
	decl String:GameName[16];
	GetConVarString(FindConVar("mp_gamemode"), GameName, sizeof(GameName));
	
	
	if (StrEqual(GameName, "survival", false))
		GameMode = 3;
	else if (StrEqual(GameName, "versus", false) || StrEqual(GameName, "teamversus", false) || StrEqual(GameName, "scavenge", false) || StrEqual(GameName, "teamscavenge", false))
		GameMode = 2;
	else if (StrEqual(GameName, "coop", false) || StrEqual(GameName, "realism", false))
		GameMode = 1;
	else
	{
		GameMode = 0;
 	}
	GameMode+=0;
 
	GetGameFolderName(GameName, sizeof(GameName));
	if (StrEqual(GameName, "left4dead2", false))
	{
		 
		L4D2Version=true;
		Tank_Class=8;
	}	
	else
	{
		Tank_Class=5;
		L4D2Version=false;
	}
	L4D2Version=!!L4D2Version;
}

 