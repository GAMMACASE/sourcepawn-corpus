/* Plugin Template generated by Pawn Studio */
#pragma semicolon 1
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions> 

public Plugin:myinfo = 
{
	name = "Variable Size Of Infected and Witch",
	author = "Pan XiaoHai",
	description = "<- Description ->",
	version = "1.3",
	url = "<- URL ->"
}
new Handle:l4d_scale_infected= INVALID_HANDLE;
new Handle:l4d_scale_witch= INVALID_HANDLE;
new Handle:l4d_scale_jockey= INVALID_HANDLE;

new Handle:l4d_scale_infected_min= INVALID_HANDLE;
new Handle:l4d_scale_infected_max= INVALID_HANDLE;

new Handle:l4d_scale_witch_min= INVALID_HANDLE;
new Handle:l4d_scale_witch_max= INVALID_HANDLE;

public OnPluginStart()
{
	
	l4d_scale_infected = CreateConVar("l4d_scale_infected", "15.0", "chance of common infected [0.0, 100.0] ", FCVAR_PLUGIN);
	l4d_scale_jockey = CreateConVar("l4d_scale_jockey", "40.0", "chance of jockey [0.0, 100.0]", FCVAR_PLUGIN);
	l4d_scale_witch = CreateConVar("l4d_scale_witch", "80.0", "chance of witch [0.0, 100.0]", FCVAR_PLUGIN);
	
	l4d_scale_infected_min = CreateConVar("l4d_scale_infected_min", "0.4", "min size for common infected [0.1, 10.0] ", FCVAR_PLUGIN);
	l4d_scale_infected_max = CreateConVar("l4d_scale_infected_max", "3.0", "max size for common infected [min, 10.0]", FCVAR_PLUGIN);
	
	l4d_scale_witch_min = CreateConVar("l4d_scale_witch_min", "1.5", "min size for witch [0.1, 10.0]", FCVAR_PLUGIN);
	l4d_scale_witch_max = CreateConVar("l4d_scale_witch_max", "3.5", "max size for witch [min, 10.0]", FCVAR_PLUGIN);

	AutoExecConfig(true, "l4d_scale");
	HookEvent("witch_spawn", witch_spawn); 
	HookEvent("player_spawn", player_spawn);
	RegConsoleCmd("sm_scale", sm_scale);
}
public Action:sm_scale(client,args)
{
	if(client>0 && IsClientInGame(client) && IsPlayerAlive(client))
	{
		decl String:text[192];
		GetCmdArg(1, text, sizeof(text));
		PrintToChat(client, "set scale %s", text);
		new Float:scale=1.0;
		if(strlen(text)!=0)
		{
			scale=StringToFloat(text);
			if(scale<0.05)scale=0.05;
			if(scale>20.0)scale=20.0;
		}		 
		new ent=GetClientAimTarget(client, false);
		if(ent>MaxClients)
		{
			SetEntPropFloat(ent, Prop_Send,"m_flModelScale", scale); 
		}
	}
}
public Action:player_spawn(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{ 
	new client = GetClientOfUserId(GetEventInt(hEvent, "userid"));
	if(client>0 && GetClientTeam(client) == 3)
	{ 
		new class = GetEntProp(client, Prop_Send, "m_zombieClass");
		if(class==5) // jockey
		{
			new Float:p=GetConVarFloat(l4d_scale_jockey);
			new Float:r=GetRandomFloat(0.0, 100.0);
			if(r<p)	CreateTimer(1.0, SetJockeySize, client);
		} 
	}
}
 
public Action:witch_spawn(Handle:h_Event, const String:s_Name[], bool:b_DontBroadcast)
{
	
	new witchid = GetEventInt(h_Event, "witchid");
	if(witchid>0)
	{
		new Float:chance=GetConVarFloat(l4d_scale_witch);
		new Float:r=GetRandomFloat(0.0, 100.0);
		if(r<chance)
		{
			CreateTimer(1.0, DelaySetTrace, witchid, TIMER_FLAG_NO_MAPCHANGE);
		}
	}
}
public Action:DelaySetTrace(Handle:timer, any:witchid)
{
	if(!IsWitch(witchid))return;
	new Float:s=GetEntPropFloat(witchid , Prop_Send,"m_flModelScale");
	if(s!=1.0)return;
	if(GetRandomInt(0, 1)==0)CreateTimer(0.1, TraceWitch, EntIndexToEntRef(witchid), TIMER_REPEAT | TIMER_FLAG_NO_MAPCHANGE);
	else 
	{
		new Float:scale=GetRandomFloat(GetConVarFloat(l4d_scale_witch_min), GetConVarFloat(l4d_scale_witch_max));
		if(scale>0.1 && scale<10.0)
		{
			SetEntPropFloat(witchid , Prop_Send,"m_flModelScale", scale); 
		}
	}
}
IsWitch(witch)
{
	if(witch>0 && IsValidEdict(witch) && IsValidEntity(witch))
	{
		decl String:classname[32];
		GetEdictClassname(witch, classname, sizeof(classname));
		if(StrEqual(classname, "witch"))
		{
			return true;
		}
	}
	return false;
}
public Action:TraceWitch(Handle:timer, any:witch)
{
	if(witch !=INVALID_ENT_REFERENCE && IsValidEdict(witch) && IsValidEntity(witch))
	{
		decl Stirng:sname[32];
		GetEdictClassname(witch, sname, sizeof(sname)); 
		if(StrEqual(sname, "witch"))
		{
			new Float:rage=GetEntPropFloat(witch, Prop_Send, "m_rage");
			new rush=GetEntProp(witch, Prop_Send, "m_mobRush" );
			//PrintToChatAll("rage %f", rage); 
			new Float:scale=1.0+rage* (GetConVarFloat(l4d_scale_witch_max)-1.0);
			SetEntPropFloat(witch, Prop_Send,"m_flModelScale", scale); 
			if(rush)
			{
				SetEntPropFloat(witch, Prop_Send,"m_flModelScale", GetConVarFloat(l4d_scale_witch_max)); 
				return Plugin_Stop;
			}
			return Plugin_Continue;
		}
		else return Plugin_Stop;
	}
	return Plugin_Stop;
}
 
public OnEntityCreated(entity, const String:classname[])
{ 
	new Float:chance=GetConVarFloat(l4d_scale_infected);
	if(chance==0.0)return;
	if(StrEqual(classname, "infected") )
	{
		Start(entity, chance);
	} 
} 
Start(entity, Float:chance )
{
	if(chance==0.0)return;
	new Float:r=GetRandomFloat(0.0, 100.0);
	if(r<chance)
	{ 
		 CreateTimer(0.05, SetInfectedSize, EntIndexToEntRef(entity), TIMER_FLAG_NO_MAPCHANGE); 
	}
}
 
public Action:SetInfectedSize(Handle:timer, any:ent)
{
	if(ent !=INVALID_ENT_REFERENCE && IsValidEdict(ent) && IsValidEntity(ent))
	{
		new Float:scale;
		scale=GetRandomFloat(GetConVarFloat(l4d_scale_infected_min), GetConVarFloat(l4d_scale_infected_max));
		if(scale>0.1 && scale<10.0)
		{
			SetEntPropFloat(ent, Prop_Send,"m_flModelScale", scale); 
		}
	}
}
public Action:SetJockeySize(Handle:timer, any:client)
{
	if(client>0 && IsClientInGame(client) && IsPlayerAlive(client) && GetClientTeam(client) == 3)
	{ 
		new class = GetEntProp(client, Prop_Send, "m_zombieClass");
		if(class==5) // jockey
		{
			new Float:scale;
			scale=GetRandomFloat(GetConVarFloat(l4d_scale_infected_min), GetConVarFloat(l4d_scale_infected_max));
			if(scale>0.1 && scale<10.0)
			{
				SetEntPropFloat(client, Prop_Send,"m_flModelScale", scale); 			
				if(scale>1.0)
				{
					new hp=GetEntProp(client, Prop_Send, "m_iHealth");
					new newhp=RoundFloat(hp*scale);
					SetEntProp(client, Prop_Send, "m_iHealth", newhp);
					SetEntProp(client, Prop_Send, "m_iMaxHealth", newhp); 
				}		
			}
		} 
	}	 
}
 