/* Plugin Template generated by Pawn Studio */

#pragma semicolon 1
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions>

#define State_None 0
#define State_BT 1
 

#define Msg_Wait 0
#define Msg_Agree 1
#define Msg_Disagree 2
new State[MAXPLAYERS+1];
new BTTarget[MAXPLAYERS+1];
new Answer[MAXPLAYERS+1];
new Blood[MAXPLAYERS+1];
new Float:ProcessTime[MAXPLAYERS+1];
new bool:Error[MAXPLAYERS+1];
new Msg[MAXPLAYERS+1];
new GameMode;
new L4D2Version;
new Handle:timer_handle=INVALID_HANDLE;

public Plugin:myinfo = 
{
	name = "Blood Transfusion.",
	author = "Pan Xiaohai",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}
new Handle:l4d_bt_enable ;
new Handle:l4d_bt_msg ;
public OnPluginStart()
{
	GameCheck();
   	l4d_bt_enable = CreateConVar("l4d_bt_enable", "2", "  0:disable, 1:enable in coop mode, 2: enable in all mode ", FCVAR_PLUGIN);
	l4d_bt_msg=CreateConVar("l4d_bt_msg", "2", "how many times to display usage information , 0 disable  ", FCVAR_PLUGIN);	
	 
	HookEvent("round_start", round_end);
	HookEvent("round_end", round_end);
	HookEvent("finale_win", round_end);
	HookEvent("mission_lost", round_end);
	HookEvent("map_transition", round_end);	 	 
	
	HookEvent("player_shoved", player_shoved ); 
	HookEvent("weapon_fire", weapon_fire ); 
	 
	AutoExecConfig(true, "l4d_blood_transfusion"); 
	timer_handle=CreateTimer(20.0, HPTimer, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
}

public Action:round_end(Handle:event, const String:name[], bool:dontBroadcast)
{
	ResetAllState();
}
public OnMapStart()
{
	if(timer_handle==INVALID_HANDLE)timer_handle=CreateTimer(20.0, HPTimer, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
}
 
public Action:HPTimer(Handle:timer, any:hp)
{
	if(!CanUse())return Plugin_Continue;
	new msgcount=GetConVarInt(l4d_bt_msg);
	for(new client = 1; client <= MaxClients; client++)
	{
		if( IsClientInGame(client) && IsPlayerAlive(client) && GetClientTeam(client)==2)
		{
			new hardhp = GetClientHealth(client) + 0; 			 
			if(hardhp<=40)
			{
				if(Msg[client]<msgcount)
				{
					Msg[client]++;
					PrintToChat(client, "\x05[Blood Transfusion] \x01Request someone to \x04Blood Transfusion \x01with you : \x04E+SHOVE");
					PrintToChat(client, "\x05[Blood Transfusion] \x01\x04Blood Transfusion \x01with someone : \x04Duck+E+SHOVE");
				}
			}
		}
	}
	return Plugin_Continue;
}
ResetAllState()
{
	for(new i=1; i<=MaxClients; i++)
	{
		State[i]=State_None;
		Answer[i]=0;
		Msg[i]=0;
	}  
} 
bool:CanUse()
{
	new mode=GetConVarInt(l4d_bt_enable);
	if(mode==0)return false;
	if(mode==1 && GameMode==2)return false;
	return true; 
}
 
public Action:player_shoved(Handle:event, String:event_name[], bool:dontBroadcast)
{
	if(!CanUse()) return Plugin_Continue; 	  
	new sender  = GetClientOfUserId(GetEventInt(event, "attacker"));
	new receiver  = GetClientOfUserId(GetEventInt(event, "userid"));  
	if(sender>0 && IsClientInGame(sender) && !IsFakeClient(sender))
	{		
		new button=GetClientButtons(sender);
		if(button & IN_USE)
		{			 
			if(receiver>0 &&  GetClientTeam(sender)== GetClientTeam(receiver))
			{  
				if(button & IN_DUCK)
				{
					PrintToChat(sender, "\x05[Blood Transfusion] \x01Waiting \x04%N \x01to response!",receiver);
					RequestTransfusion(receiver,sender);
				}
				else 
				{
					RequestTransfusion(sender, receiver);
				}
			}
		}
	}
	return Plugin_Continue;
}
public Action:weapon_fire(Handle:event, String:event_name[], bool:dontBroadcast)
{
	if(!CanUse()) return Plugin_Continue; 	  
	new sender  = GetClientOfUserId(GetEventInt(event, "userid"));   
	if(sender>0 && IsClientInGame(sender) && GetClientTeam(sender)==3 && !IsFakeClient(sender))
	{		
		new button=GetClientButtons(sender);
		if(button & IN_USE)
		{			
			new receiver=GetClientAimTarget(sender);   
			if(receiver>0 )
			{  
				
				if(button & IN_DUCK)
				{
					PrintToChat(sender, "\x05[Blood Transfusion] \x01Waiting \x04%N \x01to response!",receiver);
					RequestTransfusion(receiver,sender);
				}
				else 
				{
					RequestTransfusion(sender, receiver);
				}
			}
		}
	}
	return Plugin_Continue;
}
RequestTransfusion(sender, receiver)
{ 
	if(State[sender]==State_BT && State[receiver]==State_BT)
	{
		return;
	}
	Error[sender]=false;
	Blood[sender]=0;
	Blood[receiver]=0;
	State[sender]=State_BT; 
	State[receiver]=State_BT; 
	
	BTTarget[sender]=receiver;
	BTTarget[receiver]=sender;
	Answer[sender]=Msg_Wait;
	Answer[receiver]=Msg_Wait; 
	 
	decl String:str[100];
	new Handle:menu = CreateMenu(MenuSelectorRequestBT);
	Format(str, 100, "Do you want to request Blood Transfusion with %N?", receiver);
	SetMenuTitle(menu, str); 
	AddMenuItem(menu, "Yes", "Yes");
	AddMenuItem(menu, "No", "No"); 
	SetMenuExitButton(menu, true);		 
	DisplayMenu(menu, sender, 2);   
	 
	ProcessTime[sender]=GetEngineTime();
	 	
	new Handle:h=CreateDataPack();
	WritePackCell(h, sender);
	WritePackCell(h, receiver);
	WritePackFloat(h, GetEngineTime());
	CreateTimer(0.1, TimerProcessRequestBT, h, TIMER_FLAG_NO_MAPCHANGE | TIMER_REPEAT); 

} 

public MenuSelectorRequestBT(Handle:menu, MenuAction:action, data, param2)
{
	if (action == MenuAction_Select)
	{  
		new sender=data ;
		new receiver=BTTarget[data]; 
	
		if(!IsAlivePlayer2(sender, receiver))return;		
	 	if(State[sender]==State_None || State[receiver]==State_None)return;
		decl String:item[256], String:display[256];	
 				
		GetMenuItem(menu, param2, item, sizeof(item), _, display, sizeof(display));	
		 
		if (StrEqual(item, "Yes"))
		{
			Answer[sender]=Msg_Agree; 
			ProcessTime[sender]=GetEngineTime();
			decl String:str[100];
			new Handle:menu = CreateMenu(MenuSelectorAnswerBT);
			Format(str, 100, "Do you agree to Blood Transfusion with %N?", sender);
			SetMenuTitle(menu, str); 
			AddMenuItem(menu, "Yes", "Yes");
			AddMenuItem(menu, "No", "No"); 
			SetMenuExitButton(menu, true);		 
			DisplayMenu(menu, receiver, 2); 
			PrintToChat(sender, "\x05[Blood Transfusion] \x01Waiting \x04%N \x01to response!",receiver);
		}
		else if(StrEqual(item, "No"))
		{
			Answer[sender]=Msg_Disagree; 
			//PrintToChatAll("%N select no", sender);
		} 
	} 
 
}
public MenuSelectorAnswerBT(Handle:menu, MenuAction:action, data, param2)
{
	if (action == MenuAction_Select)
	{  
		new sender=BTTarget[data]  ;
		new receiver=data; 
	
		if(!IsAlivePlayer2(sender, receiver))return;		
	 	if(State[sender]==State_None || State[receiver]==State_None)return;		
		
		decl String:item[256], String:display[256];		
		GetMenuItem(menu, param2, item, sizeof(item), _, display, sizeof(display));	
		if (StrEqual(item, "Yes"))
		{
			Answer[receiver]=Msg_Agree; 
			ProcessTime[receiver]=GetEngineTime(); 
			ShowMsg(sender, receiver);
		}
		else if(StrEqual(item, "No"))
		{
			Answer[receiver]=Msg_Disagree; 
			PrintToChat(sender, "\x05[Blood Transfusion] \x04%N \x01disagree witch you!",receiver );
			PrintToChat(receiver, "\x05[Blood Transfusion] \x01You disagree witch \x04%N!",sender );
		} 
	} 
 
}
ShowMsg(sender, receiver)
{
	//PrintToChat(sender, "\x05[Blood Transfusion] \x04%N \x01agree witch you!",receiver );
	//PrintToChat(receiver, "\\x05[Blood Transfusion] x03You agree with \x04%N!",sender );
	
	if(IsFakeClient(receiver))PrintToChat(sender, "\x05[Blood Transfusion] \x01Stay close with \x04%N!, \x01press \x04E \x01begin blood transfusion!",receiver  );
	else PrintToChat(sender, "\x05[Blood Transfusion] Stay close with %N!",receiver  );
	PrintToChat(receiver, "\x05[Blood Transfusion] \x01Stay close witch \x04%N ,\x01press \x04E \x01begin blood transfusion!", sender);
	PrintToChat(sender, "\x05[Blood Transfusion] \x01Press \x04shove \x01to quite!");
	PrintToChat(receiver, "\x05[Blood Transfusion] \x01Press \x04shove \x01to quite!");

}
public Action:TimerProcessRequestBT(Handle:timer, Handle:h)
{
	
	ResetPack(h);
 	new sender=ReadPackCell(h);
	new receiver=ReadPackCell(h);
	if(Error[sender])
	{
		State[sender]=State_None; 
		State[receiver]=State_None; 
		return Plugin_Stop;
	}
	new Float:startTime=ReadPackFloat(h);
	new Float:time=GetEngineTime();
	Error[sender]=true;
	if(!IsAlivePlayer2(sender, receiver))
	{
		return StopTB(sender, receiver, h);	
	} 
	new count = GetEntData(receiver, FindSendPropInfo("CTerrorPlayer", "m_currentReviveCount"), 1);
	if(count!=0 || IsPlayerIncapped(receiver))
	{
		PrintToChat(sender, "\x05[Blood Transfusion] \x04%N \x01can not give blood to you any more", receiver);
		PrintToChat(receiver, "\x05[Blood Transfusion] \x01You can not give blood to \x04%N \x01any more", sender);
		return StopTB(sender, receiver, h);	
	}
	if(Answer[sender]==Msg_Wait)
	{
		if(time>startTime+2.5)
		{ 
			if(!IsFakeClient(sender))
			{
				return StopTB(sender, receiver, h);	
			}
			else
			{
				Answer[sender]=Msg_Agree; 
				ProcessTime[sender]=GetEngineTime();
				decl String:str[100];
				new Handle:menu = CreateMenu(MenuSelectorAnswerBT);
				Format(str, 100, "Do you agree to Blood Transfusion with %N?", sender);
				SetMenuTitle(menu, str); 
				AddMenuItem(menu, "Yes", "Yes");
				AddMenuItem(menu, "No", "No"); 
				SetMenuExitButton(menu, true);		 
				DisplayMenu(menu, receiver, 2); 
				PrintToChat(sender, "\x05[Blood Transfusion] \x01Waiting \x04%N \x01to answer!",receiver );
			}
			 	
		} 
		else return Continue(sender);
	}
	else if(Answer[sender]==Msg_Disagree)
	{ 
		return StopTB(sender, receiver, h);
	} 
	
	
	if(Answer[receiver]==Msg_Wait)
	{
		if(time>ProcessTime[sender]+2.5)
		{
			if(!IsFakeClient(receiver))
			{
				PrintToChat(sender, "\x05[Blood Transfusion] \x04%N \x01did not pay attention to your request", receiver);
				return StopTB(sender, receiver, h);		
			}
			else
			{
				Answer[receiver]=Msg_Agree; 
				ProcessTime[receiver]=time; 
				ShowMsg(sender, receiver);
			}
		} 
		return Continue(sender);
	}
	else if(Answer[receiver]==Msg_Disagree)
	{ 
		return StopTB(sender, receiver, h);
	}
	
	new button1;
	new button2;
	if(IsFakeClient(receiver))
	{
		button1=GetClientButtons(sender);
		button2=GetClientButtons(receiver);
	}
	else
	{
		button1=GetClientButtons(receiver);
		button2=GetClientButtons(sender);
	}
	if(button1 & IN_USE)
	{
		decl Float:pos1[3];
		decl Float:pos2[3];
		GetClientEyePosition(sender, pos1);
		GetClientEyePosition(receiver, pos2);
		if(GetVectorDistance(pos1, pos2)<100.0)
		{
			//SetEntityMoveType(sender, MOVETYPE_NONE);
			//SetEntityMoveType(receiver, MOVETYPE_NONE);
			new d=2;
			if(GetClientTeam(sender)==3 && GetClientTeam(receiver)==3)
			{
				d=5;
			}
			Blood[sender]+=d;
			Blood[receiver]+=d;
			PrintCenterText(sender, "%N give boold to you, %d", receiver, Blood[sender]);
			PrintCenterText( receiver, "You give boold to %N, %d", sender, Blood[sender]);
			AddHealth(sender, d);
			AddHealth(receiver, 0-d);
		}
		else
		{
			//SetEntityMoveType(sender, MOVETYPE_WALK);
			//SetEntityMoveType(receiver, MOVETYPE_WALK);
			PrintCenterText(sender, "%N is too far from you", receiver );
			PrintCenterText( receiver, "%N is too far from you", sender );			
		}
	}
	else
	{
		//SetEntityMoveType(sender, MOVETYPE_WALK);
		//SetEntityMoveType(receiver, MOVETYPE_WALK);
	}
	if((button1 & IN_ATTACK2) || (button2 & IN_ATTACK2))
	{
		return StopTB(sender, receiver, h);
	}
	if(time>startTime+30.0)
	{ 
		return StopTB(sender, receiver, h);
	}	
	return Continue(sender);
	  
}
Action:StopTB(sender, receiver, Handle:h)
{
	State[sender]=State_None; 
	State[receiver]=State_None; 
	CloseHandle(h); 
	if(IsClientInGame(sender))
	{ 
		//SetEntityMoveType(sender, MOVETYPE_WALK);
	}
	if(IsClientInGame(receiver))
	{
		//SetEntityMoveType(receiver, MOVETYPE_WALK);
	}
	if(IsClientInGame(sender) && IsClientInGame(sender))
	{
		if(Blood[receiver]>0)PrintToChatAll("\x05[Blood Transfusion] \x04%N \x01give \x04%d \x01blood to \x04%N", receiver, Blood[sender], sender);
	}
	return Plugin_Stop;
}
Action:Continue(sender)
{
	Error[sender]=false;
	return Plugin_Continue;
}
stock DamageEffect(target , String:damage[])
{
	decl String:N[20];
	Format(N, 20, "target%d", target);	
	new pointHurt = CreateEntityByName("point_hurt");			
	DispatchKeyValue(target, "targetname", N);			
	DispatchKeyValue(pointHurt, "Damage", damage);				
	DispatchKeyValue(pointHurt, "DamageTarget", N);
	DispatchKeyValue(pointHurt, "DamageType", "65536");			
	DispatchSpawn(pointHurt);									
	AcceptEntityInput(pointHurt, "Hurt"); 					
	AcceptEntityInput(pointHurt, "Kill"); 
}
AddHealth(client, add)
{
	if(add<=0)
	{
		decl String:arg1[10];
		Format(arg1, sizeof(arg1), "%d", -add);
		DamageEffect(client, arg1);
	}
	else
	{
		new hardhp = GetClientHealth(client) + 0; 
		SetEntityHealth(client, hardhp + add);
	}
	return;
}
bool:IsPlayerIncapped(client)
{
	if (GetEntProp(client, Prop_Send, "m_isIncapacitated", 1)) return true;
	return false;
}
bool:IsAlivePlayer(client)
{
	if(client>0 && IsClientInGame(client) && IsPlayerAlive(client))return true;
	return false;
}
bool:IsAlivePlayer2(client1, client2)
{
	new bool:ok=false;
	if(client1>0 && IsClientInGame(client1) && IsPlayerAlive(client1))ok=true;
	else ok=false;
	if(ok && client2>0 && IsClientInGame(client2) && IsPlayerAlive(client2))ok=true;
	else ok=false;
	return ok;
}
GameCheck()
{
	decl String:GameName[16];
	GetConVarString(FindConVar("mp_gamemode"), GameName, sizeof(GameName));
	
	
	if (StrEqual(GameName, "survival", false))
		GameMode = 3;
	else if (StrEqual(GameName, "versus", false) || StrEqual(GameName, "teamversus", false) || StrEqual(GameName, "scavenge", false) || StrEqual(GameName, "teamscavenge", false))
		GameMode = 2;
	else if (StrEqual(GameName, "coop", false) || StrEqual(GameName, "realism", false))
		GameMode = 1;
	else
	{
		GameMode = 0;
 	}
	
 
	GetGameFolderName(GameName, sizeof(GameName));
	if (StrEqual(GameName, "left4dead2", false)) 
	{		 
		L4D2Version=true;
	}	
	else
	{
		L4D2Version=false;
	}
 
}