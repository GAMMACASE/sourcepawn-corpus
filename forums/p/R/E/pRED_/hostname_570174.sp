/* Plugin Template generated by Pawn Studio */

#pragma semicolon 1

#include <sourcemod>

#define PLUGIN_VERSION "1.0"

new Handle:g_frequency = INVALID_HANDLE;

new g_currentHostName = 0;
new g_hostNameCount;

new Handle:g_hostNames = INVALID_HANDLE;

new String:g_prefix[256];

new Handle:g_configParser = INVALID_HANDLE;


public Plugin:myinfo = 
{
	name = "Hostname Changer",
	author = "pRED*",
	description = "Changes server hostname",
	version = PLUGIN_VERSION,
	url = "http://www.sourcemod.net/"
}

public OnPluginStart()
{
	g_frequency = CreateConVar("sm_hostname_frequency", "60.0", "How often to cycle through hostnames");
	
	CreateConVar("sm_hostname_version", PLUGIN_VERSION, "Hostname Changer Version", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	
	g_hostNames = CreateArray(512);
}

public OnConfigsExecuted()
{
	CreateTimer(GetConVarFloat(g_frequency), ChangeHostName);
}

public OnMapStart()
{
	LoadHostNames();	
}

public Action:ChangeHostName(Handle:timer)
{
	decl String:buffer[512];
	GetArrayString(g_hostNames, g_currentHostName, buffer, sizeof(buffer));
	
	ServerCommand("hostname \"%s%s\"", g_prefix, buffer);
	ServerExecute();
	
	g_currentHostName++;
	
	if (g_currentHostName >= g_hostNameCount)
	{
		g_currentHostName = 0;
	}
	
	CreateTimer(GetConVarFloat(g_frequency), ChangeHostName);
}

LoadHostNames()
{	
	ClearArray(g_hostNames);
	
	if (g_configParser == INVALID_HANDLE)
	{
		g_configParser = SMC_CreateParser();
	}
	
	SMC_SetReaders(g_configParser, NewSection, KeyValue, EndSection);	
	
	decl String:configPath[256];
	BuildPath(Path_SM, configPath, sizeof(configPath), "configs/hostnames.txt");
	
	if (!FileExists(configPath))
	{
		LogError("Unable to locate exec config file, no maps loaded.");
			
		return;		
	}
	
	new line;
	new SMCError:err = SMC_ParseFile(g_configParser, configPath, line);
	if (err != SMCError_Okay)
	{
		decl String:error[256];
		SMC_GetErrorString(err, error, sizeof(error));
		LogError("Could not parse file (line %d, file \"%s\"):", line, configPath);
		LogError("Parser encountered error: %s", error);
	}
	
	return;
}

public SMCResult:NewSection(Handle:smc, const String:name[], bool:opt_quotes)
{

}

public SMCResult:KeyValue(Handle:smc, const String:key[], const String:value[], bool:key_quotes, bool:value_quotes)
{
	if (!StrEqual(key, "prefix"))
	{
		PushArrayString(g_hostNames, value);
	}
	else
	{
		strcopy(g_prefix, sizeof(g_prefix), value);
	}
}

public SMCResult:EndSection(Handle:smc)
{
	g_hostNameCount = GetArraySize(g_hostNames);
}

