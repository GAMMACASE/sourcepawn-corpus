/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

#define VERSION ".9"

new NumberIncaps = 0;
new Float:IncapScoreLoss;
new PlayerList[18][2]; // [#][0] = userid && [#][1] = number of incaps
new Handle:MaxIncaps;
new Handle:SurvivalPoints;
new Handle:l4d1score;
new Handle:TieBreakerBonus;
new Handle:MaxPlayerIncaps

public Plugin:myinfo = 
{
	name = "Roadkill's Competive Scoring l4d2",
	author = "Roadkill",
	description = "Changes scoring system for more competive games, closer to l4d1 style.  Maxium of half your score is based on incaps",
	version = "VERSION",
	url = ""
}

public OnPluginStart()
{
	TieBreakerBonus = CreateConVar("l4d2_TiePoints", "100", "Sets the tiebreaker score value", FCVAR_PLUGIN|FCVAR_NOTIFY);
	l4d1score = CreateConVar("CompScoring_enable", "1", "Enables the Plugin", FCVAR_PLUGIN|FCVAR_NOTIFY);
	SurvivalPoints = CreateConVar("l4d2_SurvivalPoints", "100", "Sets the maxium score per survivors alive at the end of the round", FCVAR_PLUGIN|FCVAR_NOTIFY);
	MaxIncaps = CreateConVar("l4d2_MaxTeamIncaps", "8", "Set the number of incaps you can have until you have no survival bonus", FCVAR_PLUGIN|FCVAR_NOTIFY);
	MaxPlayerIncaps = CreateConVar("l4d2_MaxPlayerIncaps", "2", "Sets the amount of incaps a player can take to reduce your survival bonus", FCVAR_PLUGIN|FCVAR_NOTIFY);
	AutoExecConfig(true, "rkCompScoring");
	CreateConVar("rk_compscore_version", ".9", "Tells you the version", FCVAR_PLUGIN|FCVAR_NOTIFY);
	HookEvent("player_incapacitated", Event_PlayerIncap);
	HookEvent("round_start", Event_RoundStart, EventHookMode_PostNoCopy);
	//HookEvent("player_death", Event_PlayerKilled);
}

public Action:Event_RoundStart(Handle:event, const String:Name[], bool:dontBroadcast)
{
	for(new i = 0; i <18; i++)
	{
		PlayerList[i][0] = -1;
		PlayerList[i][1] = 0;
	}
	if(GetConVarInt(l4d1score) == 1)
	{
		SetConVarFloat(FindConVar("vs_survival_bonus"), GetConVarFloat(SurvivalPoints));
		SetConVarFloat(FindConVar("vs_tiebreak_bonus"), GetConVarFloat(TieBreakerBonus));
		IncapScoreLoss = GetConVarFloat(SurvivalPoints)/GetConVarFloat(MaxIncaps);
		NumberIncaps = 0;
	}
}

public Action:Event_PlayerIncap(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetEventInt(event, "userid")-1;
	if(NumberIncaps < GetConVarInt(MaxIncaps) && GetConVarInt(l4d1score) == 1 && GetClientTeam(client) == 2)
	{
		new bool:found = false;
		new i = 0;
		while(i<18 && !found)
		{
			if(PlayerList[i][0] == client)
			{
				found = true;
				if(PlayerList[i][1] < GetConVarInt(MaxPlayerIncaps))
				{
					NumberIncaps++;
					PlayerList[i][1] = PlayerList[i][1] + 1;
				}
			}
			i++
		}
		if(!found)
		{
			i = 0;
			while(i<18)
			{
				if(PlayerList[i][0] == -1)
				{
					PlayerList[i][0] = client;
					NumberIncaps++;
					PlayerList[i][1] = 1;
					break;
				}
				i++
			}
		}
		changeSurvivorBonus();
	}
}

/*public Action:Event_PlayerKilled(Handle:event, const String:name[], bool:dontBroadcst)
{
	new String:pname[64];
	new String:aname[64];
	new client = GetEventInt(event, "userid")-1;
	new attacker = GetEventInt(event, "attacker")-1;
	GetClientName(attacker, aname, sizeof(aname));
	GetClientName(client, pname, sizeof(pname));
	PrintToChatAll("%s is on team %d and was killed by %s on team %d", pname, GetClientTeam(client), aname, GetClientTeam(attacker));
	if(NumberIncaps < GetConVarInt(MaxIncaps) && GetConVarInt(l4d1score) == 1)
	{
		if(!IsFakeClient(client) && GetClientTeam(client) == 2)
		{	
			GetClientName(client, pname, sizeof(pname));
			PrintToChatAll("%s is on team %d", pname, GetClientTeam(client));
			new bool:found = false;
			new i = 0;
			while(i<8 && !found)
			{
				if(PlayerList[i][0] == GetEventInt(event, "userid"))
				{
					found = true;
					if(PlayerList[i][1] < GetConVarInt(MaxPlayerIncaps))
					{
						NumberIncaps = NumberIncaps + GetConVarInt(MaxPlayerIncaps) - PlayerList[i][1];
						PlayerList[i][1] = GetConVarInt(MaxPlayerIncaps);
						PrintToChatAll("Found Dead %d", GetEventInt(event, "userid"));
					}
				}
				i++;
				PrintToChatAll("Try Death Check %d", i);
			}
			if(!found)
			{
				PrintToChatAll("Not Found Dead");
				i = 0;
				while(i<8)
				{
					if(PlayerList[i][0] == -1)
					{
						PlayerList[i][0] = GetEventInt(event, "userid");
						NumberIncaps = NumberIncaps + GetConVarInt(MaxPlayerIncaps) - PlayerList[i][1];
						PlayerList[i][1] = GetConVarInt(MaxPlayerIncaps);
						PrintToChatAll("Added Death %d", GetEventInt(event, "userid"));
						break;
					}
					PrintToChatAll("Try Death Check %d for -1", i);
				}
				i++
			}
			changeSurvivorBonus()
		}
	}
}*/

public changeSurvivorBonus()
{
	if(NumberIncaps > GetConVarInt(MaxIncaps))
	{
		NumberIncaps = GetConVarInt(MaxIncaps);
	}
	SetConVarFloat(FindConVar("vs_survival_bonus"), ((GetConVarFloat(MaxIncaps)-NumberIncaps)*IncapScoreLoss));
	PrintToChatAll("New survivor end round bonus is %f", ((GetConVarFloat(MaxIncaps)-NumberIncaps)*IncapScoreLoss));
}
