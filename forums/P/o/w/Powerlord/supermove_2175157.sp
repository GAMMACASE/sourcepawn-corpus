/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2_stocks>

#define PLUGIN_VERSION			"0.6"

#define CVAR_VERSION			0
#define CVAR_MESSAGE			1
#define CVAR_ENABLE				2
#define CVAR_BROUNDTIME			3
#define CVAR_FFIRE				4
#define CVAR_PRINT				5
#define CVAR_TAGS					6

#define NUM_CVARS				7

#pragma semicolon 1

new Handle:g_cvars[NUM_CVARS] = INVALID_HANDLE;

public Plugin:myinfo = 
{
	name = "Super Move",
	author = "Jindo",
	description = "Enable friendly fire at the end of rounds.",
	version = PLUGIN_VERSION,
	url = "http://www.topaz-games.com/"
}

public OnPluginStart()
{
	g_cvars[CVAR_VERSION] = CreateConVar("smove_version", PLUGIN_VERSION, "Version of the plugin.", FCVAR_NOTIFY|FCVAR_REPLICATED);
	g_cvars[CVAR_MESSAGE] = CreateConVar("smove_message", "1", "1 enables the center message which appears when friendly fire is activated/deactivated.", FCVAR_PLUGIN);
	g_cvars[CVAR_ENABLE] = CreateConVar("smove_enable", "1", "1 enables the plugin.", FCVAR_PLUGIN);
	g_cvars[CVAR_PRINT] = CreateConVar("smove_printname", "Friendly Fire", "Text to show in the \"X engaged/disengaged\" messages (if smove_message is non-zero.)", FCVAR_PLUGIN);
	
	g_cvars[CVAR_BROUNDTIME] = FindConVar("mp_bonusroundtime");
	g_cvars[CVAR_FFIRE] = FindConVar("mp_friendlyfire");
	g_cvars[CVAR_TAGS] = FindConVar("sv_tags");
	
	HookEvent("teamplay_round_win", Event_FFOn, EventHookMode_PostNoCopy);
	HookEvent("teamplay_round_start", Event_FFOff, EventHookMode_PostNoCopy);
	
	HookEvent("player_death", Event_PlayerDeath, EventHookMode_Pre);
}

public Action:Event_FFOn(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (!GetConVarBool(g_cvars[CVAR_ENABLE]))
	{
		return Plugin_Continue;
	}
	
	SetConVarBool(g_cvars[CVAR_FFIRE], true);

	if (GetConVarBool(g_cvars[CVAR_MESSAGE]))
	{
		decl String:printname[64];
		GetConVarString(g_cvars[CVAR_PRINT], printname, sizeof(printname));
		PrintCenterTextAll("%s in action.", printname);
	}
	
	new Float:left = GetConVarFloat(g_cvars[CVAR_BROUNDTIME]);
	CreateTimer(left, Timer_FFOff);
	
	return Plugin_Continue;
}

public Action:Event_FFOff(Handle:event, const String:name[], bool:dontBroadcast)
{
	SetConVarBool(g_cvars[CVAR_FFIRE], false);
	
	return Plugin_Continue;
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "attacker"));
	new userid = GetClientOfUserId(GetEventInt(event, "userid"));
	if (client > 0 && client <= MaxClients && IsClientInGame(client) && userid > 0 && userid <= MaxClients && IsClientInGame(userid) && GetClientTeam(client) == GetClientTeam(userid))
	{
		return Plugin_Handled;
	}
	return Plugin_Continue;
}

public Action:Timer_FFOff(Handle:timer, any:client)
{
	if (GetConVarBool(g_cvars[CVAR_MESSAGE]))
	{
		decl String:printname[64];
		GetConVarString(g_cvars[CVAR_PRINT], printname, sizeof(printname));
		PrintCenterTextAll("%s disengaged.", printname);
	}
}