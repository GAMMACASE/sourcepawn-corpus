/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <mapchooser>
#define LP_VERSION "2.1"

new sql_id[MAXPLAYERS];
new Handle:g_NextMap = INVALID_HANDLE;
new Handle:g_ChangeMap = INVALID_HANDLE;
new Handle:g_NominationMap = INVALID_HANDLE;

new Handle:cv_serverid, Handle:cv_price_snomination, Handle:cv_price_mapvote, Handle:cv_price_nextmap, Handle:cv_price_changelevel;
new Handle:cv_price_rs_1day, Handle:cv_price_rs_7day, Handle:cv_price_rs_14day, Handle:cv_price_rs_30day;
new Handle:cv_price_eor_1day, Handle:cv_price_eor_7day, Handle:cv_price_eor_14day, Handle:cv_price_eor_30day;
new Handle:cv_price_ab_1day, Handle:cv_price_ab_7day, Handle:cv_price_ab_14day, Handle:cv_price_ab_30day;
new Handle:cv_quaterplayers, Handle:cv_halfplayers, Handle:cv_morethenhalf;
//new Handle:cv_price_robot_1day;
new Handle:cv_snomination, Handle:cv_mapvote, Handle:cv_nextmap, Handle:cv_changelevel;
new Handle:cv_rsflags, Handle:cv_immu;
new Handle:cv_eor_immu, Handle:cv_bal_immu;
new String:eorflags[50];
new String:balflags[50];
//new Handle:cv_removeall;

new price_snomination, price_mapvote, price_nextmap, price_changelevel;
new price_rs_1day, price_rs_7day, price_rs_14day, price_rs_30day;
new price_eor_1day, price_eor_7day, price_eor_14day, price_eor_30day;
new price_ab_1day, price_ab_7day, price_ab_14day, price_ab_30day;
new quaterplayers, halfplayers, morethenhalf;

new bool:en_snomination = true;
new bool:en_mapvote = true;
new bool:en_nextmap = true;
new bool:en_changelevel = true;

new String:rsflags[50];
//new bool:removeflags;
new rsimmunity;

new String:MapchangeTo[100];
new serverid;
new Handle:dbcon = INVALID_HANDLE;

public Plugin:myinfo = 
{
	name = "Loyalty System",
	author = "Chefe",
	description = "System that gives players points for their playtime.",
	version = LP_VERSION,
	url = "http://forums.alliedmods.net/showthread.php?t=154296"
}

public OnPluginStart()
{
	CreateTimer(300.0, ForgivePoints, _, TIMER_REPEAT);
	CreateTimer(86400.0, CleanDatabase, _, TIMER_REPEAT);
	
	RegConsoleCmd("sm_lp", CommandLP, "Shows you your loyalty points!");
	RegAdminCmd("sm_lp_refresh", CommandRefresh, ADMFLAG_CONFIG, "Refresh lp-settings");
	CreateConVar("sm_lp_version", LP_VERSION, "Shows current plugin version.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY|FCVAR_DONTRECORD);
	cv_serverid = CreateConVar("sm_lp_serverid", "0", "Unique serverid if you run the plugin on multipe servers. If not, ignore this.");
	
	//DISABLED STUFF
	cv_price_snomination = CreateConVar("sm_lp_price_snomination", "25", "Set the price clients must pay for a super-nomination.");
	cv_price_mapvote = CreateConVar("sm_lp_price_mapvote", "100", "Set the price clients must pay for forcing a mapvote.");
	cv_price_nextmap = CreateConVar("sm_lp_price_nextmap", "150", "Set the price clients must pay for setting the nextmap.");
	cv_price_changelevel = CreateConVar("sm_lp_price_changelevel", "200", "Set the price clients must pay to change the map.");
	
	//RESERVED SLOTS
	cv_price_rs_1day = CreateConVar("sm_lp_rs_price_1day", "3200", "Set the price clients must pay for 1 day reserved slot access.");
	cv_price_rs_7day = CreateConVar("sm_lp_rs_price_7day", "20000", "Set the price clients must pay for 7 day reserved slot access.");
	cv_price_rs_14day = CreateConVar("sm_lp_rs_price_14day", "900", "Set the price clients must pay for 14 day reserved slot access.");
	cv_price_rs_30day = CreateConVar("sm_lp_rs_price_30day", "1500", "Set the price clients must pay for 30 day reserved slot access.");
	
	//END OF ROUND CVARS
	cv_price_eor_1day = CreateConVar("sm_lp_eor_price_1day", "1500", "Set the price clients must pay for 1 day End of Round Immunity.");
	cv_price_eor_7day = CreateConVar("sm_lp_eor_price_7day", "13000", "Set the price clients must pay for 7 day End of Round Immunity.");
	cv_price_eor_14day = CreateConVar("sm_lp_eor_price_14day", "26000", "Set the price clients must pay for 14 End of Round Immunity.");
	cv_price_eor_30day = CreateConVar("sm_lp_eor_price_30day", "55000", "Set the price clients must pay for 30 End of Round Immunity.");
	
	//AUTOBALANCE CVARS
	cv_price_ab_1day = CreateConVar("sm_lp_ab_price_1day", "2200", "Set the price clients must pay for 1 day Auto Balance Immunity.");
	cv_price_ab_7day = CreateConVar("sm_lp_ab_price_7day", "15000", "Set the price clients must pay for 7 day Auto Balance Immunity.");
	cv_price_ab_14day = CreateConVar("sm_lp_ab_price_14day", "900", "Set the price clients must pay for 14 Auto Balance Immunity.");
	cv_price_ab_30day = CreateConVar("sm_lp_ab_price_30day", "1500", "Set the price clients must pay for 30 Auto Balance Immunity.");
	
	//POINTS BASED ON SERVER POPULATION
	cv_quaterplayers = CreateConVar("sm_lp_quaterplayers", "5", "Set points players get if players <= quater of maxclients.");
	cv_halfplayers = CreateConVar("sm_lp_halfplayers", "3", "Set points players get if players between quater and half of maxclients.");
	cv_morethenhalf = CreateConVar("sm_lp_morethenhalf", "1", "Set points players get if players more then half of maxclients.");
	
	//ROBOT
	//cv_price_robot_1day = CreateConVar("sm_lp_robot_price_1day", "1500", "Set the price clients must pay for 1 day robot access.");
	
	
	cv_snomination = CreateConVar("sm_lp_snomination", "0", "Enable/disable snomination option in lp menu.");
	cv_mapvote = CreateConVar("sm_lp_mapvote", "0", "Enable/disable mapvote option in lp menu.");
	cv_nextmap = CreateConVar("sm_lp_nextmap", "0", "Enable/disable nextmap option in lp menu.");
	cv_changelevel = CreateConVar("sm_lp_changelevel", "0", "Enable/disable changelevel option in lp menu.");
	
	//cv_removeall = CreateConVar("sm_lp_removeallflags", "0", "Enable/disable that only the flags set in sm_lp_flags or all flags get removed when the reserved slot expire.");
	cv_immu = CreateConVar("sm_lp_immunity", "5", "Set the immunity the reserved slot player will have");
	
	//FLAGS
	cv_rsflags = CreateConVar("sm_lp_flags", "a", "Flags a player get if he buys a reserved slot. Make sure that the flags are correct, they wont get checked!");
	cv_eor_immu = CreateConVar("sm_lp_eorimmunity", "r", "Flags a player get if he buys a End of Round immunity");
	cv_bal_immu = CreateConVar("sm_lp_balimmunity", "s", "Flags a player get if he buys a Autobalance immunity");
	
	AddCommandListener(Command_JoinTeam, "jointeam");
	
	AutoExecConfig(false);
	
	SQL_TConnect(DBInit, "default");
}

public Action:Command_JoinTeam(client, const String:command[], argc) 
{
	new lp = GetLP(client);
	PrintToChat(client, "\x01[\x07FF0000RP\x01] Railbait Points: \x07FFA500%i\x01. Type \x07FF0000!rp\x01 or \x07FF0000!rpinfo\x01 for details.", lp);
}  

public DBInit(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE)
	{
		LogError("[RP] Database connection failed: %s", error);
		SetFailState("Unable to connect to database, look for more infos in the error logs!");
		return;
	}
	
	dbcon = hndl;
}

public OnConfigsExecuted()
{
	price_snomination = GetConVarInt(cv_price_snomination);
	price_mapvote = GetConVarInt(cv_price_mapvote);
	price_nextmap = GetConVarInt(cv_price_nextmap);
	price_changelevel = GetConVarInt(cv_price_changelevel);
	
	price_rs_1day = GetConVarInt(cv_price_rs_1day);
	price_rs_7day = GetConVarInt(cv_price_rs_7day);
	price_rs_14day = GetConVarInt(cv_price_rs_14day);
	price_rs_30day = GetConVarInt(cv_price_rs_30day);
	
	price_eor_1day = GetConVarInt(cv_price_eor_1day);
	price_eor_7day = GetConVarInt(cv_price_eor_7day);
	price_eor_14day = GetConVarInt(cv_price_eor_14day);
	price_eor_30day = GetConVarInt(cv_price_eor_30day);
	
	price_ab_1day = GetConVarInt(cv_price_ab_1day);
	price_ab_7day = GetConVarInt(cv_price_ab_7day);
	price_ab_14day = GetConVarInt(cv_price_ab_14day);
	price_ab_30day = GetConVarInt(cv_price_ab_30day);
	
	quaterplayers = GetConVarInt(cv_quaterplayers);
	halfplayers = GetConVarInt(cv_halfplayers);
	morethenhalf = GetConVarInt(cv_morethenhalf);
	
	serverid = GetConVarInt(cv_serverid);
	
	en_snomination = GetConVarBool(cv_snomination);
	en_mapvote = GetConVarBool(cv_mapvote);
	en_nextmap = GetConVarBool(cv_nextmap);
	en_changelevel = GetConVarBool(cv_changelevel);
	
	GetConVarString(cv_rsflags, rsflags, sizeof(rsflags));
	
	GetConVarString(cv_eor_immu, eorflags, sizeof(eorflags));
	GetConVarString(cv_bal_immu, balflags, sizeof(balflags));
	//removeflags = GetConVarBool(cv_removeall);
	rsimmunity = GetConVarInt(cv_immu);
}

public OnMapStart()
{
	MapchangeTo = NULL_STRING;
	g_NextMap = BuildMapMenu(Menu_NextMap);
	g_ChangeMap = BuildMapMenu(Menu_ChangeMap);
	g_NominationMap = BuildMapMenu(Menu_NominateMap);
}

public OnMapEnd()
{
	if (g_NextMap != INVALID_HANDLE)
	{
		CloseHandle(g_NextMap);
		g_NextMap = INVALID_HANDLE;
	}
	
	if (g_ChangeMap != INVALID_HANDLE)
	{
		CloseHandle(g_ChangeMap);
		g_ChangeMap = INVALID_HANDLE;
	}
	
	if (g_NominationMap != INVALID_HANDLE)
	{
		CloseHandle(g_NominationMap);
		g_NominationMap = INVALID_HANDLE;
	}
}

Handle:BuildMapMenu(MenuHandler:handel)
{
	new Handle:file = OpenFile("mapcycle.txt", "rt");
	if (file == INVALID_HANDLE)
	{
		return INVALID_HANDLE;
	}
	
	new Handle:menu = CreateMenu(handel);
	new String:mapname[255];
	while (!IsEndOfFile(file) && ReadFileLine(file, mapname, sizeof(mapname)))
	{
		if (mapname[0] == ';' || !IsCharAlpha(mapname[0]))
		{
			continue;
		}
		new len = strlen(mapname);
		for (new i=0; i<len; i++)
		{
			if (IsCharSpace(mapname[i]))
			{
				mapname[i] = '\0';
				break;
			}
		}
		
		if (!IsMapValid(mapname))
		{
			continue;
		}
		AddMenuItem(menu, mapname, mapname);
	}
	
	CloseHandle(file);
	
	SetMenuTitle(menu, "Please select a map:");
	
	return menu;
}

public OnClientAuthorized(client, const String:auth[])
{
	if (strcmp(auth, "BOT", false) != 0)
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM lp WHERE steamid = '%s'", auth);
		
		SQL_TQuery(dbcon, InitDBCheck1, sqlstring, client);
	}
	else
	{
		sql_id[client] = -1;
	}
}

public InitDBCheck1(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		if (SQL_GetRowCount(hndl) == 0)
		{
			new String:auth[100];
			GetClientAuthString(data, auth, sizeof(auth));
			
			new String:createsql[250];
			Format(createsql, sizeof(createsql), "INSERT INTO lp(steamid, points, ingameid, ingame) VALUES ('%s',0,%i,1)", auth, serverid);
			SQL_TQuery(dbcon, InitDBCheck2, createsql, data);
		}
		else
		{
			SQL_FetchRow(hndl);
			sql_id[data] = SQL_FetchInt(hndl, 0);
			
			new String:updatesql[255];
			Format(updatesql, sizeof(updatesql), "UPDATE lp SET ingame = 1, ingameid = %i WHERE id = %i", serverid, sql_id[data]);
			SQL_TQuery(dbcon, EmptyResultSet, updatesql);
		}
	}
}

public InitDBCheck2(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		new String:auth[100];
		GetClientAuthString(data, auth, sizeof(auth));
		
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM lp WHERE steamid = '%s'", auth);
		SQL_TQuery(dbcon, InitDBCheck3, sqlstring, data);
	}
}

public InitDBCheck3(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	if (IsClientConnected(data))
	{
		SQL_FetchRow(hndl);
		sql_id[data] = SQL_FetchInt(hndl, 0);
	}
}

public OnClientDisconnect(client)
{
	new String:sqlstring[255];
	Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET ingame = 0 WHERE id = %i", sql_id[client]);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	sql_id[client] = -1;
}

public Action:CommandRefresh(client, args)
{
	RefreshSet();
	ReplyToCommand(client, "[LP] Settings refreshed");
	return Plugin_Handled;
}

public Action:CommandLP(client, args)
{
	new String:s_menu1[100];
	Format(s_menu1, sizeof(s_menu1), "SNomination (%i lp)", price_snomination);
	new String:s_menu2[100];
	Format(s_menu2, sizeof(s_menu2), "Force Mapvote (%i lp)", price_mapvote);
	new String:s_menu3[100];
	Format(s_menu3, sizeof(s_menu3), "Set Nextmap (%i lp)", price_nextmap);
	new String:s_menu4[100];
	Format(s_menu4, sizeof(s_menu4), "Change Map (%i lp)", price_changelevel);
	
	new Handle:menu = CreateMenu(MenuHandler);
	SetMenuTitle(menu, "Railbait Point System");
	AddMenuItem(menu, "1", "Check RP Balance");
	if (en_snomination)
	{
		AddMenuItem(menu, "2", s_menu1);
	}
	if (en_mapvote)
	{
		AddMenuItem(menu, "3", s_menu2);
	}
	if (en_nextmap)
	{
		AddMenuItem(menu, "4", s_menu3);
	}
	if (en_changelevel)
	{
		AddMenuItem(menu, "5", s_menu4);
	}

	
	if (HaveClientRS(client))
	{
		new String:s_menu5[100];
		new client_rsmin = GetRSMIN(client);
		if (client_rsmin <= 60)
		{
			Format(s_menu5, sizeof(s_menu5), "Reserved Slot access end in %i min", GetRSMIN(client));
		}
		else if (client_rsmin <= 1440)
		{
			Format(s_menu5, sizeof(s_menu5), "Reserved Slot access end in %i h", GetRSMIN(client)/60);
		}
		else
		{
			Format(s_menu5, sizeof(s_menu5), "Reserved Slot access end in %i d", GetRSMIN(client)/1440);
		}
		AddMenuItem(menu, "6", s_menu5, ITEMDRAW_DISABLED);
	}
	else
	{
	AddMenuItem(menu, "7", "Reserved Slot");
	}
	
	if (HaveClientEOR(client))
	{
		new String:s_menu6[100];
		new client_eormin = GetEORMIN(client);
		if (client_eormin <= 60)
		{
			Format(s_menu6, sizeof(s_menu6), "End of Round Immunity access end in %i min", GetEORMIN(client));
		}
		else if (client_eormin <= 1440)
		{
			Format(s_menu6, sizeof(s_menu6), "End of Round Immunity access end in %i h", GetEORMIN(client)/60);
		}
		else
		{
			Format(s_menu6, sizeof(s_menu6), "End of Round Immunity access end in %i d", GetEORMIN(client)/1440);
		}
		AddMenuItem(menu, "8", s_menu6, ITEMDRAW_DISABLED);
	}
	else
	{
	
		AddMenuItem(menu, "9", "End of Round Immunity");
	}
	
	if (HaveClientAB(client))
	{
		new String:s_menu7[100];
		new client_abmin = GetABMIN(client);
		if (client_abmin <= 60)
		{
			Format(s_menu7, sizeof(s_menu7), "Auto Balance Immunity access end in %i min", GetABMIN(client));
		}
		else if (client_abmin <= 1440)
		{
			Format(s_menu7, sizeof(s_menu7), "Auto Balance Immunity access end in %i h", GetABMIN(client)/60);
		}
		else
		{
			Format(s_menu7, sizeof(s_menu7), "Auto Balance Immunity access end in %i d", GetABMIN(client)/1440);
		}
		AddMenuItem(menu, "10", s_menu7, ITEMDRAW_DISABLED);
	}
	else
	{
	
		AddMenuItem(menu, "11", "Auto Balance Immunity");
	}

	DisplayMenu(menu, client, MENU_TIME_FOREVER);
	
	return Plugin_Handled;
}

public MenuHandler(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		switch(StringToInt(info))
		{
			case 1:
			{
				new lp = GetLP(param1);
				PrintToChat(param1, "\x01[\x07FF0000RP\x01] Railbait Points: \x07FFA500%i\x01. Type \x07FF0000!rp\x01 or \x07FF0000!rpinfo\x01 for details.", lp);
				//PrintToChat("\x01[\x07FF0000RP\x01] Railbait Points: \x07FFA500%i\x01. Type \x07FF0000!rp\x01 or \x07FF0000!rpinfo\x01 for details.", param1, lp);
			}
			case 2:
			{
				new lp = GetLP(param1);
				
				if (lp >= price_snomination)
				{
					DisplayMenu(g_NominationMap, param1, MENU_TIME_FOREVER);
				}
				else
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have %i lp, but you need %i to nominate!", lp, price_snomination);
				}
			}
			case 3:
			{
				new lp = GetLP(param1);
				
				if (lp >= price_mapvote)
				{
					RemoveLP(param1, price_mapvote);
					
					PrintToChatAll("\x01[\x07FF0000RP\x01] %N forced Mapvote!", param1)
					
					InitiateMapChooserVote(MapChange_Instant);
				}
				else
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have %i lp, but you need %i to force Mapvote!", lp, price_mapvote);
				}
			}
			case 4:
			{
				new lp = GetLP(param1);
				
				if (lp >= price_nextmap)
				{
					DisplayMenu(g_NextMap, param1, MENU_TIME_FOREVER);
				}
				else
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have %i lp, but you need %i to set Nextmap!", lp, price_nextmap);
				}
			}
			case 5:
			{
				new lp = GetLP(param1);
				
				if (lp >= price_changelevel)
				{
					DisplayMenu(g_ChangeMap, param1, MENU_TIME_FOREVER);
				}
				else
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have %i lp, but you need %i to change the Map!", lp, price_changelevel);
				}
			}
			case 7:
			{
				new String:rs_menu1[100];
				Format(rs_menu1, sizeof(rs_menu1), "1 Day (%i rp)", price_rs_1day);
				new String:rs_menu2[100];
				Format(rs_menu2, sizeof(rs_menu2), "7 Days (%i rp)", price_rs_7day);
				new String:rs_menu3[100];
				Format(rs_menu3, sizeof(rs_menu3), "14 Days (%i rp)", price_rs_14day);
				new String:rs_menu4[100];
				Format(rs_menu4, sizeof(rs_menu4), "30 Days (%i rp)", price_rs_30day);
				
				new Handle:menu2 = CreateMenu(MenuRS);
				SetMenuTitle(menu2, "Select Reserved Slot");
				AddMenuItem(menu2, "1", rs_menu1);
				AddMenuItem(menu2, "2", rs_menu2);
				/*
				AddMenuItem(menu2, "3", rs_menu3);
				AddMenuItem(menu2, "4", rs_menu4);
				*/
				DisplayMenu(menu2, param1, MENU_TIME_FOREVER);
			}
			case 9:
			{
				new String:eor_menu1[100];
				Format(eor_menu1, sizeof(eor_menu1), "1 Day (%i rp)", price_eor_1day);
				new String:eor_menu2[100];
				Format(eor_menu2, sizeof(eor_menu2), "7 Days (%i rp)", price_eor_7day);
				new String:eor_menu3[100];
				Format(eor_menu3, sizeof(eor_menu3), "14 Days (%i rp)", price_eor_14day);
				new String:eor_menu4[100];
				Format(eor_menu4, sizeof(eor_menu4), "30 Days (%i rp)", price_eor_30day);
				
				new Handle:menu2 = CreateMenu(MenuEOR);
				SetMenuTitle(menu2, "Select End of Round Immunity");
				AddMenuItem(menu2, "1", eor_menu1);
				AddMenuItem(menu2, "2", eor_menu2);
				/*
				AddMenuItem(menu2, "3", eor_menu3);
				AddMenuItem(menu2, "4", eor_menu4);
				*/
				DisplayMenu(menu2, param1, MENU_TIME_FOREVER);
			}
			case 11:
			{
				new String:ab_menu1[100];
				Format(ab_menu1, sizeof(ab_menu1), "1 Day (%i rp)", price_ab_1day);
				new String:ab_menu2[100];
				Format(ab_menu2, sizeof(ab_menu2), "7 Days (%i rp)", price_ab_7day);
				new String:ab_menu3[100];
				Format(ab_menu3, sizeof(ab_menu3), "14 Days (%i rp)", price_ab_14day);
				new String:ab_menu4[100];
				Format(ab_menu4, sizeof(ab_menu4), "30 Days (%i rp)", price_ab_30day);
				
				new Handle:menu2 = CreateMenu(MenuAB);
				SetMenuTitle(menu2, "Select Autobalance Immunity");
				AddMenuItem(menu2, "1", ab_menu1);
				AddMenuItem(menu2, "2", ab_menu2);
				/*
				AddMenuItem(menu2, "3", ab_menu3);
				AddMenuItem(menu2, "4", ab_menu4);
				*/
				DisplayMenu(menu2, param1, MENU_TIME_FOREVER);
			}
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}

public Menu_NextMap(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		
		GetMenuItem(menu, param2, info, sizeof(info));
		RemoveLP(param1, price_nextmap);
		PrintToChatAll("\x01[\x07FF0000RP\x01] %N changed the nextmap to %s!", param1, info);
		SetNextMap(info);
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
		g_NextMap = BuildMapMenu(Menu_NextMap);
	}
}

public Menu_ChangeMap(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		
		GetMenuItem(menu, param2, info, sizeof(info));
		RemoveLP(param1, price_changelevel);
		PrintToChatAll("\x01[\x07FF0000RP\x01] %N forced mapchange to %s!", param1, info);
		
		if (!strcmp(MapchangeTo, NULL_STRING, false))
		{
			MapchangeTo = info;
			CreateTimer(5.0, Timer_Changelevel);
		}
		else 
		{
			PrintToChat(param1, "\x01[\x07FF0000RP\x01] Mapchange already in progress");
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
		g_ChangeMap = BuildMapMenu(Menu_ChangeMap);
	}
}

public Action:Timer_Changelevel(Handle:timer)
{
	ForceChangeLevel(MapchangeTo, "LP");
}

public Menu_NominateMap(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		
		GetMenuItem(menu, param2, info, sizeof(info));
		RemoveLP(param1, price_snomination);
		PrintToChatAll("\x01[\x07FF0000RP\x01] %N nominated %s!", param1, info);
		NominateMap(info, true, 0);
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
		g_NominationMap = BuildMapMenu(Menu_NominateMap);
	}
}

public MenuRS(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		new lp = GetLP(param1)
		
		switch(StringToInt(info))
		{
			case 1:
			{
				if (lp >= price_rs_1day)
				{
					RemoveLP(param1, price_rs_1day)
					GiveRS(param1, 1440);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Reserved Slots! If Server is full, connect by console to use your reserved slot. This only works on 24 player servers.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 1 Day of Reserved Slot!", lp, price_rs_1day);
				}
			}
			case 2:
			{
				if (lp >= price_rs_7day)
				{
					
					RemoveLP(param1, price_rs_7day)
					GiveRS(param1, 10080);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Reserved Slots! If Server is full, connect by console to use your reserved slot. This only works on 24 player servers.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] YYou have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 7 Days of Reserved Slot!", lp, price_rs_7day);
				}
			}
			/*
			case 3:
			{
				if (lp >= price_rs_14day)
				{
					
					RemoveLP(param1, price_rs_14day)
					GiveRS(param1, 20160);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Reserved Slots! If Server is full, connect by console to use your reserved slot. This only works on 24 player servers.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 14 Days of Reserved Slot!", lp, price_rs_14day);
				}
			}
			case 4:
			{
				if (lp >= price_rs_30day)
				{
					
					RemoveLP(param1, price_rs_30day)
					GiveRS(param1, 43200);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Reserved Slots! If Server is full, connect by console to use your reserved slot. This only works on 24 player servers.")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 30 Days of Reserved Slot!", lp, price_rs_30day);
				}
			}
			*/
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}
public MenuEOR(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		new lp = GetLP(param1)
		
		switch(StringToInt(info))
		{
			case 1:
			{
				if (lp >= price_eor_1day)
				{
					RemoveLP(param1, price_eor_1day)
					GiveEOR(param1, 1440);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought End of Round Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 1 Day of End of Round Immunity!", lp, price_eor_1day);
				}
			}
			case 2:
			{
				if (lp >= price_eor_7day)
				{
					
					RemoveLP(param1, price_eor_7day)
					GiveEOR(param1, 10080);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought End of Round Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 7 Days of End of Round Immunity!", lp, price_eor_7day);
				}
			}
			/*
			case 3:
			{
				if (lp >= price_eor_14day)
				{
					
					RemoveLP(param1, price_eor_14day)
					GiveEOR(param1, 20160);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought End of Round Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 14 Days of End of Round Immunity!", lp, price_eor_14day);
				}
			}
			case 4:
			{
				if (lp >= price_eor_30day)
				{
					
					RemoveLP(param1, price_eor_30day)
					GiveEOR(param1, 43200);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought End of Round Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 30 Days of End of Round Immunity!", lp, price_eor_30day);
				}
			}
			*/
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}

public MenuAB(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction_Select)
	{
		new String:info[32];
		GetMenuItem(menu, param2, info, sizeof(info));
		
		new lp = GetLP(param1)
		
		switch(StringToInt(info))
		{
			case 1:
			{
				if (lp >= price_ab_1day)
				{
					RemoveLP(param1, price_ab_1day)
					GiveAB(param1, 1440);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Autobalance Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need %i for 1 Day of Autobalance Immunity!", lp, price_ab_1day);
				}
			}
			case 2:
			{
				if (lp >= price_ab_7day)
				{
					
					RemoveLP(param1, price_ab_7day)
					GiveAB(param1, 10080);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Autobalance Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 7 Days of Autobalance Immunity!", lp, price_ab_7day);
				}
			}
			/*
			case 3:
			{
				if (lp >= price_ab_14day)
				{
					
					RemoveLP(param1, price_ab_14day)
					GiveAB(param1, 20160);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Autobalance Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 14 Days of Autobalance Immunity!", lp, price_ab_14day);
				}
			}
			case 4:
			{
				if (lp >= price_ab_30day)
				{
					
					RemoveLP(param1, price_ab_30day)
					GiveAB(param1, 43200);
					
					if (IsClientInGame(param1))
					{
						PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have bought Autobalance Immunity!")
					}
				}
				else 
				{
					PrintToChat(param1, "\x01[\x07FF0000RP\x01] You have \x07FFA500%i\x01 rp, but you need \x07FFA500%i\x01 for 30 Days of Autobalance Immunity!", lp, price_ab_30day);
				}
				
			}
			*/
		}
	}
	else if (action == MenuAction_End)
	{
		CloseHandle(menu);
	}
}

public Action:ForgivePoints(Handle:timer)
{
	new players = GetClientCount(false);
	new players_max = GetMaxClients();
	
	if (players <= (players_max / 4))
	{
		GiveLP(quaterplayers);
	}
	else if (players <= (players_max / 2))
	{
		GiveLP(halfplayers);
	}
	else
	{
		GiveLP(morethenhalf);
	}
	
	RemoveRSMIN(5);
	RemoveEORMIN(5);
	RemoveABMIN(5);
	
	PrintToChatAll("\x01[\x07FF0000RP\x01] Railbait Points. Type \x07FF0000!rp\x01 or \x07FF0000!rpinfo\x01 for details.");
}

public Action:CleanDatabase(Handle:timer)
{
	RemoveInaktivePlayers();
}

GetLP(client)
{
	new String:sqlstring[255];
	Format(sqlstring, sizeof(sqlstring), "SELECT points FROM lp WHERE id = %i", sql_id[client]);
	
	SQL_LockDatabase(dbcon);
	
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_FetchRow(sql);
	new lp = SQL_FetchInt(sql, 0);
	CloseHandle(sql);
	
	SQL_UnlockDatabase(dbcon);
	
	return lp;
}
//UPDATE BALANCE
GiveLP(amount)
{
	new String:sqlstring[256];
	Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET points = points + %i WHERE ingame = 1 AND ingameid = %i", amount, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	//PrintToChat("\x01[\x07FF0000RP\x01] New Balance: +\x07FFA500%i\x01.", amount);
}

RemoveLP(client, amount)
{
	if (IsClientInGame(client))
	{
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET points = points - %i WHERE id = %i", amount, sql_id[client]);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	}
}

GiveRS(client, min)
{
	if (IsClientInGame(client))
	{
		// In die lp-Datenbank eintragen (Step 1)
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET rs = 1, rsmin = %i, serverid = %i WHERE steamid = '%s'", min, serverid, steamid);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
		
		// In die sm-Admin Datenbank eintragen (Step 2)
		new String:sqlstring2[256];
		Format(sqlstring2, sizeof(sqlstring2), "INSERT INTO sm_admins(authtype, identity, flags, name, immunity) VALUES ('steam' ,'%s', '%s', '%N', %i)", steamid, rsflags, client, rsimmunity);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring2);
		
		ServerCommand("sm_reloadadmins");
	}
}
GiveEOR(client, min)
{
	if (IsClientInGame(client))
	{
		// In die lp-Datenbank eintragen (Step 1)
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET eor = 1, eormin = %i, serverid = %i WHERE steamid = '%s'", min, serverid, steamid);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
		
		// In die sm-Admin Datenbank eintragen (Step 2)
		new String:sqlstring2[256];
		Format(sqlstring2, sizeof(sqlstring2), "INSERT INTO sm_admins(authtype, identity, flags, name, immunity) VALUES ('steam' ,'%s', '%s', '%N', %i)", steamid, eorflags, client, rsimmunity);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring2);
		
		ServerCommand("sm_reloadadmins");
	}
}

GiveAB(client, min)
{
	if (IsClientInGame(client))
	{
		// In die lp-Datenbank eintragen (Step 1)
		new String:steamid[50];
		GetClientAuthString(client, steamid, sizeof(steamid))
		new String:sqlstring[256];
		Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET ab = 1, abmin = %i, serverid = %i WHERE steamid = '%s'", min, serverid, steamid);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
		
		// In die sm-Admin Datenbank eintragen (Step 2)
		new String:sqlstring2[256];
		Format(sqlstring2, sizeof(sqlstring2), "INSERT INTO sm_admins(authtype, identity, flags, name, immunity) VALUES ('steam' ,'%s', '%s', '%N', %i)", steamid, balflags, client, rsimmunity);
		SQL_TQuery(dbcon, EmptyResultSet, sqlstring2);
		
		ServerCommand("sm_reloadadmins");
	}
}


bool:HaveClientRS(client)
{
	if (IsClientInGame(client))
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM lp WHERE id = %i AND rs = '1'", sql_id[client]);
		SQL_LockDatabase(dbcon);
		new Handle:sql = SQL_Query(dbcon, sqlstring);
		new rs_bool = SQL_GetRowCount(sql);
		CloseHandle(sql);
		SQL_UnlockDatabase(dbcon);
		
		if (rs_bool)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	return true;
}

bool:HaveClientEOR(client)
{
	if (IsClientInGame(client))
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM lp WHERE id = %i AND eor = '1'", sql_id[client]);
		SQL_LockDatabase(dbcon);
		new Handle:sql = SQL_Query(dbcon, sqlstring);
		new rs_bool = SQL_GetRowCount(sql);
		CloseHandle(sql);
		SQL_UnlockDatabase(dbcon);
		
		if (rs_bool)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	return true;
}

bool:HaveClientAB(client)
{
	if (IsClientInGame(client))
	{
		new String:sqlstring[255];
		Format(sqlstring, sizeof(sqlstring), "SELECT id FROM lp WHERE id = %i AND ab = '1'", sql_id[client]);
		SQL_LockDatabase(dbcon);
		new Handle:sql = SQL_Query(dbcon, sqlstring);
		new rs_bool = SQL_GetRowCount(sql);
		CloseHandle(sql);
		SQL_UnlockDatabase(dbcon);
		
		if (rs_bool)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	return true;
}
/*
GetRPPTS(client)
{
	new String:steamid[50];
	GetClientAuthString(client, steamid, sizeof(steamid));
	new String:sqlstring[200];
	Format(sqlstring, sizeof(sqlstring), "SELECT points FROM lp WHERE steamid = '%s'", steamid);
	SQL_LockDatabase(dbcon);
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_UnlockDatabase(dbcon);
	SQL_FetchRow(sql);
	new rsmin = SQL_FetchInt(sql, 0);
	
	CloseHandle(sql);
	
	return rsmin;
}
*/
GetRSMIN(client)
{
	new String:steamid[50];
	GetClientAuthString(client, steamid, sizeof(steamid));
	new String:sqlstring[200];
	Format(sqlstring, sizeof(sqlstring), "SELECT rsmin FROM lp WHERE steamid = '%s'", steamid);
	SQL_LockDatabase(dbcon);
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_UnlockDatabase(dbcon);
	SQL_FetchRow(sql);
	new rsmin = SQL_FetchInt(sql, 0);
	
	CloseHandle(sql);
	
	return rsmin;
}

RemoveRSMIN(min)
{
	new String:sqlstring[150];
	Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET rsmin = rsmin - %i WHERE rs = 1 AND serverid = %i", min, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	new String:sqlstring2[150];
	Format(sqlstring2, sizeof(sqlstring2), "SELECT steamid FROM lp WHERE rs = 1 AND serverid = %i AND rsmin <= 0", serverid);
	
	SQL_TQuery(dbcon, RemoveInPl1, sqlstring2);
}

GetEORMIN(client)
{
	new String:steamid[50];
	GetClientAuthString(client, steamid, sizeof(steamid));
	new String:sqlstring[200];
	Format(sqlstring, sizeof(sqlstring), "SELECT eormin FROM lp WHERE steamid = '%s'", steamid);
	SQL_LockDatabase(dbcon);
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_UnlockDatabase(dbcon);
	SQL_FetchRow(sql);
	new eormin = SQL_FetchInt(sql, 0);
	
	CloseHandle(sql);
	
	return eormin;
}

RemoveEORMIN(min)
{
	new String:sqlstring[150];
	Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET eormin = eormin - %i WHERE eor = 1 AND serverid = %i", min, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	new String:sqlstring2[150];
	Format(sqlstring2, sizeof(sqlstring2), "SELECT steamid FROM lp WHERE eor = 1 AND serverid = %i AND eormin <= 0", serverid);
	
	SQL_TQuery(dbcon, RemoveInPlEOR, sqlstring2);
}

GetABMIN(client)
{
	new String:steamid[50];
	GetClientAuthString(client, steamid, sizeof(steamid));
	new String:sqlstring[200];
	Format(sqlstring, sizeof(sqlstring), "SELECT abmin FROM lp WHERE steamid = '%s'", steamid);
	SQL_LockDatabase(dbcon);
	new Handle:sql = SQL_Query(dbcon, sqlstring);
	SQL_UnlockDatabase(dbcon);
	SQL_FetchRow(sql);
	new abmin = SQL_FetchInt(sql, 0);
	
	CloseHandle(sql);
	
	return abmin;
}

RemoveABMIN(min)
{
	new String:sqlstring[150];
	Format(sqlstring, sizeof(sqlstring), "UPDATE lp SET abmin = abmin - %i WHERE ab = 1 AND serverid = %i", min, serverid);
	SQL_TQuery(dbcon, EmptyResultSet, sqlstring);
	
	new String:sqlstring2[150];
	Format(sqlstring2, sizeof(sqlstring2), "SELECT steamid FROM lp WHERE ab = 1 AND serverid = %i AND abmin <= 0", serverid);
	
	SQL_TQuery(dbcon, RemoveInPlAB, sqlstring2);
}

public RemoveInPl1(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	new number = SQL_GetRowCount(hndl);
	
	if (number != 0)
	{
		for (new a = 0; a != number; a++)
		{
			new String:steamid[256];
			SQL_FetchRow(hndl);
			SQL_FetchString(hndl, 0, steamid, sizeof(steamid));
			
			// Aus der LP-Datenbank austragen (Step 1)
			new String:sqlstr[256];
			Format(sqlstr, sizeof(sqlstr), "UPDATE lp SET rs = 0, rsmin = 0, serverid = 0 WHERE steamid = '%s'", steamid);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
			
			// Aus der SM-Admin Datenbank austragen (Step 2)
			new String:sqlstr2[150];
			/*
			if (removeflags)
			{
				Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s'", steamid);
			}
			else
			{
				Format(sqlstr3, sizeof(sqlstr3), "UPDATE sm_admins SET flags = replace(flags, '%s' WHERE identity = '%s'", steamid);
			}
			*/
			Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s' AND flags = '%s'", steamid, rsflags);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr2);
		}
		ServerCommand("sm_reloadadmins");
	}
}

public RemoveInPlEOR(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	new number = SQL_GetRowCount(hndl);
	
	if (number != 0)
	{
		for (new a = 0; a != number; a++)
		{
			new String:steamid[256];
			SQL_FetchRow(hndl);
			SQL_FetchString(hndl, 0, steamid, sizeof(steamid));
			
			// Aus der LP-Datenbank austragen (Step 1)
			new String:sqlstr[256];
			Format(sqlstr, sizeof(sqlstr), "UPDATE lp SET eor = 0, eormin = 0, serverid = 0 WHERE steamid = '%s'", steamid);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
			
			// Aus der SM-Admin Datenbank austragen (Step 2)
			new String:sqlstr2[150];
			/*
			if (removeflags)
			{
				Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s'", steamid);
			}
			else
			{
				Format(sqlstr3, sizeof(sqlstr3), "UPDATE sm_admins SET flags = replace(flags, '%s' WHERE identity = '%s'", steamid);
			}
			*/
			Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s' AND flags = '%s'", steamid, eorflags);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr2);
		}
		ServerCommand("sm_reloadadmins");
	}
}
public RemoveInPlAB(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
	
	new number = SQL_GetRowCount(hndl);
	
	if (number != 0)
	{
		for (new a = 0; a != number; a++)
		{
			new String:steamid[256];
			SQL_FetchRow(hndl);
			SQL_FetchString(hndl, 0, steamid, sizeof(steamid));
			
			// Aus der LP-Datenbank austragen (Step 1)
			new String:sqlstr[256];
			Format(sqlstr, sizeof(sqlstr), "UPDATE lp SET ab = 0, abmin = 0, serverid = 0 WHERE steamid = '%s'", steamid);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
			
			// Aus der SM-Admin Datenbank austragen (Step 2)
			new String:sqlstr2[150];
			/*
			if (removeflags)
			{
				Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s'", steamid);
			}
			else
			{
				Format(sqlstr3, sizeof(sqlstr3), "UPDATE sm_admins SET flags = replace(flags, '%s' WHERE identity = '%s'", steamid);
			}
			*/
			Format(sqlstr2, sizeof(sqlstr2), "DELETE FROM sm_admins WHERE identity = '%s' AND flags = '%s'", steamid, balflags);
			SQL_TQuery(dbcon, EmptyResultSet, sqlstr2);
		}
		ServerCommand("sm_reloadadmins");
	}
}

RemoveInaktivePlayers()
{
	new String:sqlstr[150];
	Format(sqlstr, sizeof(sqlstr), "DELETE FROM lp WHERE points <= 0 AND ingame = 0 AND rs = 0 AND eor = 0 AND ab = 0");
	SQL_TQuery(dbcon, EmptyResultSet, sqlstr);
}

RefreshSet()
{
	price_snomination = GetConVarInt(cv_price_snomination);
	price_mapvote = GetConVarInt(cv_price_mapvote);
	price_nextmap = GetConVarInt(cv_price_nextmap);
	price_changelevel = GetConVarInt(cv_price_changelevel);
	
	price_rs_1day = GetConVarInt(cv_price_rs_1day);
	price_rs_7day = GetConVarInt(cv_price_rs_7day);
	price_rs_14day = GetConVarInt(cv_price_rs_14day);
	price_rs_30day = GetConVarInt(cv_price_rs_30day);
	
	price_eor_1day = GetConVarInt(cv_price_eor_1day);
	price_eor_7day = GetConVarInt(cv_price_eor_7day);
	price_eor_14day = GetConVarInt(cv_price_eor_14day);
	price_eor_30day = GetConVarInt(cv_price_eor_30day);
	
	price_ab_1day = GetConVarInt(cv_price_ab_1day);
	price_ab_7day = GetConVarInt(cv_price_ab_7day);
	price_ab_14day = GetConVarInt(cv_price_ab_14day);
	price_ab_30day = GetConVarInt(cv_price_ab_30day);
	
	quaterplayers = GetConVarInt(cv_quaterplayers);
	halfplayers = GetConVarInt(cv_halfplayers);
	morethenhalf = GetConVarInt(cv_morethenhalf);
	
	serverid = GetConVarInt(cv_serverid);
	
	en_snomination = GetConVarBool(cv_snomination);
	en_mapvote = GetConVarBool(cv_mapvote);
	en_nextmap = GetConVarBool(cv_nextmap);
	en_changelevel = GetConVarBool(cv_changelevel);

	GetConVarString(cv_rsflags, rsflags, sizeof(rsflags));
	
	GetConVarString(cv_eor_immu, eorflags, sizeof(eorflags));
	GetConVarString(cv_bal_immu, balflags, sizeof(balflags));
	
	//removeflags = GetConVarBool(cv_removeall);
	rsimmunity = GetConVarInt(cv_immu);
}

public EmptyResultSet(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE || strlen(error) > 0)
	{
		LogError("LP Query error: %s", error);
		return;
	}
}