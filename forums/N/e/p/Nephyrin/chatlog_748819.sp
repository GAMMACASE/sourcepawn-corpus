/*
 * =============================================================================
 * SourceMod ChatLog v1.2 Plugin
 * Logs chat to SQL in a very thready manner.
 *
 * SourceMod (C)2004-2009 AlliedModders LLC.  All rights reserved.
 * =============================================================================
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 3.0, as published by the
 * Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * As a special exception, AlliedModders LLC gives you permission to link the
 * code of this program (as well as its derivative works) to "Half-Life 2," the
 * "Source Engine," the "SourcePawn JIT," and any Game MODs that run on software
 * by the Valve Corporation.  You must obey the GNU General Public License in
 * all respects for all other code used.  Additionally, AlliedModders LLC grants
 * this exception to all derivative works.  AlliedModders LLC defines further
 * exceptions, found in LICENSE.txt (as of this writing, version JULY-31-2007),
 * or <http://www.sourcemod.net/license.php>.
*/

#pragma semicolon 1

#include <sourcemod>

new bool:g_TeamFilter[MAXPLAYERS + 1] = { false, ... };

public Plugin:myinfo = 
{
	name = "ChatLog",
	author = "bl4nk, sodomized by Nephyrin",
	description = "Logs chat to SQL in a very thready manner.",
	version = "1.1",
	url = "http://www.sourcemod.net/"
};

new Handle:hdatabase = INVALID_HANDLE;
new Handle:sm_chatlog_id = INVALID_HANDLE;
new Handle:sm_chatlog_filtermode = INVALID_HANDLE;

public OnPluginStart()
{
	RegConsoleCmd("say", Command_Say);
	RegConsoleCmd("say_team", Command_Say);
	if (!HookEventEx("player_say", Event_PlayerChat, EventHookMode_Post))
	{
		LogError("Failed to hook player_say, sm_chatlog_filtermode 1 will not work");
	}

	sm_chatlog_id = CreateConVar("sm_chatlog_id", "", "The id to use for logging this server's chat to the database. Must be set for this plugin to function.");
	sm_chatlog_filtermode = CreateConVar("sm_chatlog_filtermode", "1", "1 [default] causes ChatLog to log messages post-processing by other addons. This means chat messages will be logged as they are seen by players, and wont include @commands or censored chat. 0 means ChatLog will directly log 'say' commands, which will include admin messages, messages that are ultimately changed by other plugins, and might not include chat events generated by other plugins.");
	SQL_TConnect(sql_Connect, "default"); // Change if you don't want to use 'default'
}

public sql_Connect(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE)
	{
		SetFailState("Database failure: %s", error);
	}
	else
	{
		hdatabase = hndl;
	}

	InitialSQL();
}

public Action:Event_PlayerChat(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (GetConVarInt(sm_chatlog_filtermode) != 0)
	{
		new String:text[257];
		GetEventString(event, "text", text, sizeof(text));
		new uid = GetEventInt(event, "userid");
		new client = GetClientOfUserId(uid);
		logSomeTextYo(client, text, g_TeamFilter[client]);
	}
	return Plugin_Continue;
}

public Action:Command_Say(client, args)
{
	decl String:command[12];
	GetCmdArg(0, command, sizeof(command));
	g_TeamFilter[client] = strcmp(command, "say_team") ? false : true;
	
	if (GetConVarInt(sm_chatlog_filtermode) == 0)
	{
		decl String:textBuffer[128];
		
		GetCmdArgString(textBuffer, sizeof(textBuffer));
		decl String:textClean[128];
		new startidx = 0;
		new len = strlen(textBuffer);
		if ((textBuffer[0] == '"') && (textBuffer[len-1] == '"'))
		{
			startidx = 1;
			textBuffer[len-1] = '\0';
		}
		Format(textClean, sizeof(textClean), "%s", textBuffer[startidx]);

		logSomeTextYo(client, textClean, g_TeamFilter[client]);
	}
}

public logSomeTextYo(client, String:text[], bool:isteam)
{
	decl String:srvid[255], String:textesc[257];
	GetConVarString(sm_chatlog_id, srvid, 255);
	if (!strcmp(srvid, ""))
	{
		LogError("ChatLog: Cannot log message, sm_chatlog_id is not set!");
		return;
	}
	
	new chattype = 0;
	decl String:authid[32], String:nameBuffer[32], String:name[65], teamnum;
	if (client != 0)
	{
		if (!IsPlayerAlive(client)) //ignore 'console'
			chattype += 1;
		if (isteam)
			chattype += 2;
		GetClientAuthString(client, authid, sizeof(authid));
		GetClientName(client, nameBuffer, sizeof(nameBuffer));
		teamnum = GetClientTeam(client);
	}
	else
	{
		Format(nameBuffer, sizeof(nameBuffer), "Console");
		Format(authid, sizeof(authid), "");
		teamnum = 0;
	}
	SQL_EscapeString(hdatabase, text, textesc, sizeof(textesc));
	SQL_EscapeString(hdatabase, nameBuffer, name, sizeof(name));

	decl String:query[1024];
	Format(query, sizeof(query), "INSERT INTO chatlogs (name, steamid, text, team, srvid, type) VALUES ('%s', '%s', '%s', %i, '%s', %i)", name, authid, textesc, teamnum, srvid, chattype);
	SendQuery(query);
}

public sql_Query(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	ResetPack(data);

	if (hndl == INVALID_HANDLE)
	{
		decl String:query[255];
		ReadPackString(data, query, sizeof(query));

		LogError("Query Failed! %s", error);
		LogError("Query: %s", query);
	}

	CloseHandle(data);
	CloseHandle(hndl);
}

stock SendQuery(String:query[])
{
	new Handle:dp = CreateDataPack();
	WritePackString(dp, query);
	SQL_TQuery(hdatabase, sql_Query, query, dp);
}

InitialSQL()
{
	// Switch to utf8
	SendQuery("SET NAMES utf8;");

	decl String:query[1024];
	Format(query, sizeof(query), "%s%s%s%s%s%s%s%s%s%s%s%s%s",
		"CREATE TABLE IF NOT EXISTS `chatlogs` (",
		"  `seqid` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,",
		"  `srvid` varchar(255) NOT NULL,",
		"  `date` timestamp NOT NULL default CURRENT_TIMESTAMP,",
		"  `name` varchar(32) NOT NULL,",
		"  `steamid` varchar(32) NOT NULL,",
		"  `text` varchar(192) NOT NULL,",
		"  `team` int(1) NOT NULL,",
		"  `type` int(2) NOT NULL,",
		"  INDEX (`srvid`),",
		"  INDEX (`steamid`))",
		"  DEFAULT CHARSET=utf8",
		";"
	);

	SendQuery(query);
}

