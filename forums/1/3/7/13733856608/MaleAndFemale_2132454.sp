/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

public Plugin:myinfo = 
{
	name = "New Plugin",
	author = "Unknown",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}

#define PLAYERMODELPATH "models/player/"
#define RADIOSOUNDPATH "radio/woman/"

new String:sFemalePlayerModel[][] = {"ct_gsg9.mdl","ct_urban.mdl","t_leet.mdl","t_phoenix.mdl"};
new String:sFemalePlayerSound[][] = {"player/f_bhit_flesh-1.wav","player/f_bhit_flesh-2.wav","player/f_bhit_flesh-3.wav",
"player/f_die1.wav","player/f_die2.wav","player/f_die3.wav","player/f_headshot1.wav","player/f_headshot2.wav",
"player/f_headshot3.wav"};

new g_iMaxClient = 0;

new bool:g_bFemale[33] = false;
new g_iLastClientSendAudio = 0;

//new String:g_sNewRadio[64];

public OnPluginStart()
{
	// Add your own code here...
	HookEvent("player_spawn",Event_player_spawn,EventHookMode_Post);
	HookUserMessage(GetUserMessageId("RadioText"),MSG_RadioText,true);
	HookUserMessage(GetUserMessageId("SendAudio"),MSG_SendAudio,true);
	AddNormalSoundHook(NormalSHook);
}

public OnMapStart()
{
	g_iMaxClient = GetMaxClients();
	
	for(new i=0;i<sizeof(sFemalePlayerSound);i++)
		PrecacheSound(sFemalePlayerSound[i]);
	
	AddFloderPrecacheSound("sound/radio/woman","radio/woman");
}

public Event_player_spawn(Handle:event,const String:name[],bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new iViewEnt = GetClientViewModelEntity(client);
	if(IsPlayerFemale(client) && !g_bFemale[client])
	{
		g_bFemale[client] = true;
		SetEntityBody(iViewEnt,1);
	}
	else
	if(!IsPlayerFemale(client) && g_bFemale[client])
	{
		g_bFemale[client] = false;
		SetEntityBody(iViewEnt,0);
	}
}

public Action:NormalSHook(clients[64], &numClients, String:sample[PLATFORM_MAX_PATH], &entity, &channel, &Float:volume, &level, &pitch, &flags)
{
	
	if(!(1<=entity<=32))
		return Plugin_Continue;
	
	if(!g_bFemale[entity])
		return Plugin_Continue;
	
	if(StrEqual(sample[7],"damage1.wav") || StrEqual(sample[7],"damage2.wav") || StrEqual(sample[7],"damage3.wav"))
	{
		strcopy(sample,sizeof(sample),sFemalePlayerSound[GetRandomInt(0,2)])
		return Plugin_Changed;
	}
	else if(StrEqual(sample[7],"death1.wav") || StrEqual(sample[7],"death2.wav") || StrEqual(sample[7],"death3.wav")
		|| StrEqual(sample[7],"death4.wav") || StrEqual(sample[7],"death5.wav"))
	{
		strcopy(sample,sizeof(sample),sFemalePlayerSound[GetRandomInt(3,5)])
		return Plugin_Changed;
	}
	else if(StrEqual(sample[7],"headshot1.wav") || StrEqual(sample[7],"headshot2.wav") || StrEqual(sample[7],"headshot3.wav"))
	{
		strcopy(sample,sizeof(sample),sFemalePlayerSound[GetRandomInt(6,8)])
		return Plugin_Changed;
	}
	
	return Plugin_Continue;
}

public Action:MSG_RadioText(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
{
	BfReadByte(bf);
	g_iLastClientSendAudio = BfReadByte(bf);
}

public Action:MSG_SendAudio(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
{
	
	if(g_iLastClientSendAudio<1 || !g_bFemale[g_iLastClientSendAudio])
		return Plugin_Continue;
	
	new String:sRadioCode[64],String:sNewRadio[64];
	BfReadString(bf, sRadioCode, sizeof(sRadioCode));
	Format(sNewRadio,sizeof(sNewRadio),"radio/woman/%s.wav",sRadioCode[6]);
	
	new Handle:hPack = CreateDataPack();
	WritePackCell(hPack,g_iLastClientSendAudio);
	WritePackString(hPack,sNewRadio);
	//PrintToChat(1,"sNewRadio: %s",sNewRadio);
	CreateTimer(0.0,task_SendRawAudio,hPack);
	
	g_iLastClientSendAudio = 0;
	
	return Plugin_Handled;
}

public Action:task_SendRawAudio(Handle:Timer, Handle:hPack)
{
	
	ResetPack(hPack);
	new client = ReadPackCell(hPack);
	new String:sNewRadio[64];
	ReadPackString(hPack,sNewRadio,sizeof(sNewRadio));
	//PrintToChat(1,"RawAudio: %d %s",client,sNewRadio);
	SendRawAudioToTeam(client,GetClientTeam(client),sNewRadio);
	KillTimer(Timer);
	CloseHandle(hPack);
}

stock bool:IsPlayerFemale(client)
{
	new String:sModel[128];
	GetClientModel(client,sModel,sizeof(sModel));
	
	for(new i=0;i<sizeof(sFemalePlayerModel);i++)
	{
		if(StrEqual(sFemalePlayerModel[i],sModel[14]))
			return true;
	}
	
	return false;
}

stock AddFloderPrecacheSound(const String:sDirectory[],const String:sSoundPath[])
{
	decl String:sFile[64], String:sPath[256];
	new FileType:iType, Handle:hDir = OpenDirectory(sDirectory);
	while(ReadDirEntry(hDir, sFile, sizeof(sFile), iType))     
	{
		if(iType == FileType_File)
		{
			Format(sPath, sizeof(sPath), "%s/%s", sSoundPath, sFile);
			PrecacheSound(sPath);
		}
	}
}

stock SendRawAudioToTeam(client, team, const String:sSound[], iVoicePitch = 100, Float:fVoiceMarkShowTime = 1.0)
{
	if(!IsClientInGame(client))
		return;
		
	for(new i = 1; i <= g_iMaxClient; i++)
	{
		
		if(IsClientInGame(i) && GetClientTeam(i) == team)
		{
			
			new Handle:buffer = StartMessageOne("RawAudio", i);
	
			if (buffer != INVALID_HANDLE) 
			{ 
				
				BfWriteByte(buffer, iVoicePitch);
				BfWriteByte(buffer, client);
				BfWriteFloat(buffer, fVoiceMarkShowTime);
				BfWriteString(buffer, sSound);
				EndMessage(); 
				
			}
			
		}
	
	}

}