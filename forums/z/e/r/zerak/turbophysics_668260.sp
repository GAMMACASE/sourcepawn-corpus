/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

public Plugin:myinfo = 
{
	name = "turbophysics",
	author = "zerak",
	description = "Making use of sv_turbophysics as it should be",
	version = "1.1",
	url = "<- URL ->"
}

new Handle:g_playingPlayers = INVALID_HANDLE;
new Handle:g_timer_restartgame = INVALID_HANDLE;

public OnPluginStart()
{
	HookEvent("round_start", Event_RoundStart, EventHookMode_PostNoCopy);
	HookEvent("round_end", Event_RoundEnd, EventHookMode_Pre);
	HookEvent("player_team", Event_JoinTeam, EventHookMode_Pre);
	
	new Handle:restart = FindConVar("mp_restartgame"); // to enable on mp_restartgame ex. Liams warmup
	if(restart != INVALID_HANDLE)
	{
		HookConVarChange(restart, Convar_RestartGame);
	}
	 
	g_playingPlayers = CreateArray(1);
	
	for(new i = GetMaxClients(); i > 0; i--)
	{
		if(IsClientInGame(i) && !IsFakeClient(i) && GetClientTeam(i) > 1)
			PushArrayCell(g_playingPlayers, i);
	}
}

public OnMapEnd()
{
	ClearArray(g_playingPlayers); // in case there would be a misscount somewhere
	g_timer_restartgame = INVALID_HANDLE;
}

public OnConfigsExecuted()
{
	ServerCommand("sv_turbophysics 1");
}

public Convar_RestartGame(Handle:cvar, const String:oldVal[], const String:newVal[])
{
	new Float:newValue = StringToFloat(newVal);
	if(newValue <= 0) // since the cvar gets set with 0 after getting set
	{
		return;
	}
	if(g_timer_restartgame != INVALID_HANDLE)
	{
		KillTimer(g_timer_restartgame);
		g_timer_restartgame = INVALID_HANDLE;
	}
	
	g_timer_restartgame = CreateTimer(newValue, Timer_DelayedChange, 1, TIMER_FLAG_NO_MAPCHANGE);
}

public Action:Event_JoinTeam(Handle:event, const String:name[], bool:dontBroadcast)
{
	new userid = GetEventInt(event, "userid");
	new team = GetEventInt(event, "team");
	new oldTeam = GetEventInt(event, "oldteam");
	new bool:disconnect = GetEventBool(event, "disconnect"); 
	
	new client = GetClientOfUserId(userid);
	
	if(!disconnect && !IsFakeClient(client)) // We canno't get client-index when disconnected hence we use OnClientDisconnect
	{
		// players join a valid team
		if(oldTeam <= 1 && team > 1) 
		{
			PushArrayCell(g_playingPlayers, client);
			CreateTimer(1.0, Timer_DelayedChange, 0, TIMER_FLAG_NO_MAPCHANGE);
		}
		// join spec
		else if( team <= 1 && oldTeam > 1)
		{
			new index = FindValueInArray(g_playingPlayers, client);
			if(index != -1) // this should always be true
				RemoveFromArray(g_playingPlayers, index);
		}
	}
}

public OnClientDisconnect(client)
{
	if(IsClientInGame(client) && !IsFakeClient(client) && GetClientTeam(client) > 1)
	{
		new index = FindValueInArray(g_playingPlayers, client);
		if(index != -1) // this should always be true
			RemoveFromArray(g_playingPlayers, index);
	}
}

public Action:Event_RoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(GetArraySize(g_playingPlayers))
	{
		CreateTimer(1.0, Timer_DelayedChange, 0, TIMER_FLAG_NO_MAPCHANGE);
	}
}

public Action:Timer_DelayedChange(Handle:timer, any:value)
{
	ServerCommand("sv_turbophysics %i", value);
}

public Action:Event_RoundEnd(Handle:event, const String:name[], bool:dontBroadcast)
{
	ServerCommand("sv_turbophysics 1");
}