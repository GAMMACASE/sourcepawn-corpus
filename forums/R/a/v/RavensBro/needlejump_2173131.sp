/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>
#include <sdkhooks>

#define GetSpeedMultiplier

#define PLUGIN_VERSION  "1.0"


new Handle:g_hCvarEnabled;
new String:g_tString[32];
new g_NeedleDelay[MAXPLAYERS+1];

public Plugin:myinfo = 
{
	name = "TF2 Needle Jump",
	author = "RavensBro",
	description = "Adds Needle Jumping on Team Fortress 2",
	version = PLUGIN_VERSION,
	url = ""
}

public OnPluginStart()
{
	CreateConVar("sm_needlejump_version", PLUGIN_VERSION, "Needle Jump plugin Version", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	
	g_hCvarEnabled = CreateConVar("sm_needlejump_enabled", "1", "0/1 0=disabled,1=enabled. Enable plugin?");	
}

public Needlejump_justEntered(i) {
    if (IsPlayerAlive(i))
        SDKHook(i, SDKHook_OnTakeDamage, Needlejump_OnTakeDamageClient);

    g_NeedleDelay[i] = 50;		
}

public Needlejump_OnGameFrame() {
    for (new i = 1; i <= MaxClients; i++) {
        if(IsPlayerAlive(i)) {
        }
    }
}

public Action:Needlejump_OnTakeDamageClient(victim, &attacker, &inflictor, &Float:damage, &damagetype) {
    if(GetConVarBool(g_hCvarEnabled))
    if (IsPlayerAlive(victim)) {
        if (victim != attacker) {
            decl Float:fVelocity[3];
            GetEntPropVector(victim, Prop_Data, "m_vecVelocity", fVelocity);
            fVelocity[2] -= 200.0;
            TeleportEntity(victim, NULL_VECTOR, NULL_VECTOR, fVelocity);
            damage = 0.0;
            return Plugin_Changed;
        }
    }
    return Plugin_Continue;
}

public OnGameFrame()
{
    decl Float:fEyeAngle[3];
    decl Float:fVelocity[3];
    {
		for(new i = 1; i <= GetMaxClients(); i++){
        if (g_NeedleDelay[i] > 0) g_NeedleDelay[i] -= 1;		
        if (IsClientInGame(i) && IsPlayerAlive(i) && (GetClientButtons(i) & IN_ATTACK) && (g_NeedleDelay[i] <= 0)){
            new iWeapon = GetPlayerWeaponSlot(i, 0);
            GetClientWeapon(i, g_tString,32);
            if(StrEqual(g_tString, "tf_weapon_syringegun_medic") || StrEqual(g_tString, "tf_weapon_blutsauger"))			
            if (IsValidEdict(iWeapon) && GetEntData(iWeapon, FindSendPropInfo("CTFWeaponBase", "m_iClip1")) != 0) {
                GetClientEyeAngles(i, fEyeAngle);
                GetEntPropVector(i, Prop_Data, "m_vecVelocity", fVelocity);
                new Float:multi = GetSpeedMultiplier(1.0);
                fVelocity[0] += (10.0 * Cosine(DegToRad(fEyeAngle[1])) * -1.0) / multi;
                fVelocity[1] += (10.0 * Sine(DegToRad(fEyeAngle[1])) * -1.0) / multi;
                fVelocity[2] -= (40.0 * Sine(DegToRad(fEyeAngle[0])) * -1.0) / multi;
                if(FloatAbs(fVelocity[0]) > 400.0){
                    if(fVelocity[0] > 0.0)
                        fVelocity[0] = 400.0;
                    else
                        fVelocity[0] = -400.0;
                    }
                if(FloatAbs(fVelocity[1]) > 400.0){
                    if(fVelocity[1] > 0.0)
                        fVelocity[1] = 400.0;
                    else
                        fVelocity[1] = -400.0;
                    }
                if(fVelocity[2] > 400.0)
                    fVelocity[2] = 400.0;
                    TeleportEntity(i, NULL_VECTOR, NULL_VECTOR, fVelocity);
                }
                g_NeedleDelay[i] = 3;
			}
        }
    }
}