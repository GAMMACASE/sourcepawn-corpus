/* Plugin Template generated by Pawn Studio */

#include <sdktools>
#include <sourcemod>
#include <sdkhooks>
#include <cstrike>

public Plugin:myinfo = {
	name = "New Weapons For Bot",
	author = "Unknown",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}


//定义bot主武器数组
static int iEntMainWeaponList[128] = {0};
//定义bot副武器数组
static int iEntSecWeaponList[128] = {0};

//允许警察bot使用的新（主）武器类名数组，数组成员的值必须和设置的新武器类名一致，下同
static char MainWeaponNames_ct[256][20];
static char MainWeaponFatherNames_ct[256][20];    //新（主）武器父类类名数组，数组成员的值必须和设置的新武器的父类名一致，下同
static int MainWeaponPrice_ct[256] = {0};    //新（主）武器价格，新武器脚本文件"WeaponPrice"的值应和这里保持一致（改这里的话同时要改脚本里WeaponPrice的值），下同
static int MainWeaponAmmo_ct[256] = {0};    //新（主）武器备弹量，内容必须和你设置的新武器的备弹量一致，下同
static int ctMainCount = 0;

static char MainWeaponNames_t[256][20];    //允许匪徒bot使用的新（主）武器类名数组
static char MainWeaponFatherNames_t[256][20];    //新（主）武器父类类名数组
static int MainWeaponPrice_t[256] = {0};    //新（主）武器价格
static int MainWeaponAmmo_t[256] = {0};  //新（主）武器备弹量
static int terMainCount = 0;


static char SecWeaponNames_ct[256][20];    //允许警察bot使用的新（副）武器类名数组
static char SecWeaponFatherNames_ct[256][20];    //新（副）武器父类类名数组
static int SecWeaponPrice_ct[256] = {0};   //新（副）武器价格
static int SecWeaponAmmo_ct[256] = {0};    //新（副）武器备弹量，内容必须和你设置的新武器的备弹量一致
static int ctSecCount = 0;

static char SecWeaponNames_t[256][20];    //允许匪徒bot使用的新（，下同）武器类名数组
static char SecWeaponFatherNames_t[256][20];    //新（，下同）武器父类类名数组
static int SecWeaponPrice_t[256] = {0};  //新（副）武器价格
static int SecWeaponAmmo_t[256] = {0};    //新（副）武器备弹量
static int terSecCount = 0;


public OnPluginStart(){
	HookEvent("player_spawn", SpawnEvent, EventHookMode_Post);    //注册事件（bot获取新武器使用）
}


public OnMapStart()
{
	//读取Bot新武器信息文件	
	new String:filepath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, filepath, PLATFORM_MAX_PATH, "configs/NewBotWeaponInfo.txt");
	new Handle:file = OpenFile(filepath, "r"); 
	if(file != INVALID_HANDLE){
		
		decl String:fileline[256];
		decl String:data[6][256];
		// int num = 0;		
		
		while(ReadFileLine(file, fileline, 256))
		{		
			if(ExplodeString(fileline, "><", data, 6, 256) == 6)
			{
				if(strlen(data[0]) > 0 && strlen(data[1]) > 0)
				{
					//将Bot新武器信息文件的数据载入各个新武器信息数组
					TrimString(data[0]);
					TrimString(data[1]);
					TrimString(data[2]);
					TrimString(data[3]);
					TrimString(data[4]);
					TrimString(data[5]);
					
					if(strlen(data[0]) > 0)
					    ReplaceString(data[0], strlen(data[0]), "<", "");
					if(strlen(data[5]) > 0)
					    ReplaceString(data[5], strlen(data[5]), ">", "");
					
					new WeaponType = 1;    //主武器为1，副武器为2
					if(strlen(data[4]) > 0)
						WeaponType = StringToInt(data[4]);
					if(WeaponType == 0)
						WeaponType = 1;
					new TypeBotsUse = 0;    //警察武器为0，匪徒武器为1，通用为2
					if(strlen(data[5]) > 0)
						TypeBotsUse = StringToInt(data[5]);
					
					new TempFlag = true;
					//检查文件是否存在，否则不写入
					decl String:PreStr1[] = "models/weapons/v_";
					decl String:PreStr2[] = ".mdl";
					decl String:Path[64];
					Format(Path, sizeof(Path), "%s%s%s", PreStr1, data[0], PreStr2);
					TrimString(Path);
					if(!FileExists(Path, true))
						TempFlag = false;					
					//检查武器是否重复，重复则不写入
					if(WeaponType == 1)
					{
						for(int i = 0; i <= (sizeof(MainWeaponNames_ct) - 1); i++) {
							if(StrEqual(MainWeaponNames_ct[i], data[0]))
							{
								TempFlag = false;
								break;
							}
						}
						for(int i = 0; i <= (sizeof(MainWeaponNames_t) - 1); i++) {
							if(StrEqual(MainWeaponNames_t[i], data[0]))
							{
								TempFlag = false;
								break;
							}
						}
					}
					if(WeaponType == 2)
					{
						for(int i = 0; i <= (sizeof(SecWeaponNames_ct) - 1); i++) {
							if(StrEqual(SecWeaponNames_ct[i], data[0]))
							{
								TempFlag = false;
								break;
							}
						}
						for(int i = 0; i <= (sizeof(SecWeaponNames_t) - 1); i++) {
							if(StrEqual(SecWeaponNames_t[i], data[0]))
							{
								TempFlag = false;
								break;
							}
						}
					}
					if(TempFlag == false)
						continue;
					
					//写入主武器
					if(TypeBotsUse == 0 && WeaponType == 1)    //警察主武器
					{
						strcopy(MainWeaponNames_ct[ctMainCount], strlen(data[0]) + 1, data[0]);
						strcopy(MainWeaponFatherNames_ct[ctMainCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice = StringToInt(data[2]);
				        MainWeaponPrice_ct[ctMainCount] = BotWeaponPrice;
						new BotWeaponAmmo = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo = StringToInt(data[3]);
				        MainWeaponAmmo_ct[ctMainCount] = BotWeaponAmmo;
						ctMainCount++;
					}
					if(TypeBotsUse == 1 && WeaponType == 1)    //匪徒主武器
					{
						strcopy(MainWeaponNames_t[terMainCount], strlen(data[0]) + 1, data[0]);
						strcopy(MainWeaponFatherNames_t[terMainCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice = StringToInt(data[2]);
				        MainWeaponPrice_t[terMainCount] = BotWeaponPrice;
						new BotWeaponAmmo = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo = StringToInt(data[3]);
				        MainWeaponAmmo_t[terMainCount] = BotWeaponAmmo;
						terMainCount++;
					}
					if(TypeBotsUse == 2 && WeaponType == 1)    //通用主武器
					{
						strcopy(MainWeaponNames_ct[ctMainCount], strlen(data[0]) + 1, data[0]);
						strcopy(MainWeaponFatherNames_ct[ctMainCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice_ct = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice_ct = StringToInt(data[2]);
				        MainWeaponPrice_ct[ctMainCount] = BotWeaponPrice_ct;
						new BotWeaponAmmo_ct = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo_ct = StringToInt(data[3]);
				        MainWeaponAmmo_ct[ctMainCount] = BotWeaponAmmo_ct;
						ctMainCount++;
						
						strcopy(MainWeaponNames_t[terMainCount], strlen(data[0]) + 1, data[0]);
						strcopy(MainWeaponFatherNames_t[terMainCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice_t = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice_t = StringToInt(data[2]);
				        MainWeaponPrice_t[terMainCount] = BotWeaponPrice_t;
						new BotWeaponAmmo_t = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo_t = StringToInt(data[3]);
				        MainWeaponAmmo_t[terMainCount] = BotWeaponAmmo_t;
						terMainCount++;
					}
					
					//写入副武器
					if(TypeBotsUse == 0 && WeaponType == 2)    //警察副武器
					{
						strcopy(SecWeaponNames_ct[ctSecCount], strlen(data[0]) + 1, data[0]);
						strcopy(SecWeaponFatherNames_ct[ctSecCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice = StringToInt(data[2]);
				        SecWeaponPrice_ct[ctSecCount] = BotWeaponPrice;
						new BotWeaponAmmo = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo = StringToInt(data[3]);
				        SecWeaponAmmo_ct[ctSecCount] = BotWeaponAmmo;
						ctSecCount++;
					}
					if(TypeBotsUse == 1 && WeaponType == 2)    //匪徒副武器
					{
						strcopy(SecWeaponNames_t[terSecCount], strlen(data[0]) + 1, data[0]);
						strcopy(SecWeaponFatherNames_t[terSecCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice = StringToInt(data[2]);
				        SecWeaponPrice_t[terSecCount] = BotWeaponPrice;
						new BotWeaponAmmo = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo = StringToInt(data[3]);
				        SecWeaponAmmo_t[terSecCount] = BotWeaponAmmo;
						terSecCount++;
					}
					if(TypeBotsUse == 2 && WeaponType == 2)    //通用副武器
					{
						strcopy(SecWeaponNames_ct[ctSecCount], strlen(data[0]) + 1, data[0]);
						strcopy(SecWeaponFatherNames_ct[ctSecCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice_ct = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice_ct = StringToInt(data[2]);
				        SecWeaponPrice_ct[ctSecCount] = BotWeaponPrice_ct;
						new BotWeaponAmmo_ct = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo_ct = StringToInt(data[3]);
				        SecWeaponAmmo_ct[ctSecCount] = BotWeaponAmmo_ct;
						ctSecCount++;
						
						strcopy(SecWeaponNames_t[terSecCount], strlen(data[0]) + 1, data[0]);
						strcopy(SecWeaponFatherNames_t[terSecCount], strlen(data[1]) + 1, data[1]);
						new BotWeaponPrice_t = 0;
						if(strlen(data[2]) > 0)
						    BotWeaponPrice_t = StringToInt(data[2]);
				        SecWeaponPrice_t[terSecCount] = BotWeaponPrice_t;
						new BotWeaponAmmo_t = 0;
						if(strlen(data[3]) > 0)
						    BotWeaponAmmo_t = StringToInt(data[3]);
				        SecWeaponAmmo_t[terSecCount] = BotWeaponAmmo_t;
						terSecCount++;
					}					
					// num++;
				}			    				
			}			
		}
		
		CloseHandle(file);		
	}
}


//检测玩家属性函数（bot获取新武器使用）
bool:IsClient(Client, bool:Alive)
{
	return Client <= MaxClients && IsClientConnected(Client) && IsClientInGame(Client) && (Alive && IsPlayerAlive(Client));
}


//bot获取新武器
public Action:SpawnEvent(Handle:event,const String:name[],bool:dontBroadcast)
{
    new client_id = GetEventInt(event, "userid");
	new client = GetClientOfUserId(client_id); 
	
    if(IsClient(client, true) && IsFakeClient(client))
	{	
        if(ctMainCount < 1 && terMainCount < 1 && ctSecCount < 1 && terSecCount < 1)
			return;
        //获取新（主）武器
		//为警察bot随机装备新（主）武器
		//警察bot装备新（主）武器的比例，第1个数字不要改，第2个数字可以调整。2即意为1/2比例（至多一半的bot装备新主武器，bot获取新主武器还受资金限制）,3即意为1/3比例
		if(ctMainCount > 0 && IsClient(client, true) && GetClientTeam(client) == CS_TEAM_CT)
		{
			int IsUseNewMainWeapon = GetRandomInt(1,3);
			if(IsUseNewMainWeapon == 1)
			{
				int TypesOfNewMainWeapon = GetRandomInt(0, ctMainCount - 1);    //从新（主）武器中随机选择一种
				char BotNewMainWeapon[32];
				char TempStr[20];
				StrCopy(TempStr, 20, MainWeaponNames_ct[TypesOfNewMainWeapon]);
				decl String:PreStr[] = "weapon_";
				Format(BotNewMainWeapon, sizeof(BotNewMainWeapon), "%s%s", PreStr, TempStr);
				TrimString(BotNewMainWeapon);
				char BotNewMainWeaponFather[32];
				char TempStr2[20];
				StrCopy(TempStr2, 32, MainWeaponFatherNames_ct[TypesOfNewMainWeapon]);
				Format(BotNewMainWeaponFather, sizeof(BotNewMainWeaponFather), "%s%s", PreStr, TempStr2);
				TrimString(BotNewMainWeaponFather);
				char BotNewMainWeaponAmmo[20]; 
				IntToString(MainWeaponAmmo_ct[TypesOfNewMainWeapon], BotNewMainWeaponAmmo, 10);
				TrimString(BotNewMainWeaponAmmo);
				int BotNewWeaponPrice = MainWeaponPrice_ct[TypesOfNewMainWeapon];
			
				new BotMoney = GetEntProp(client, Prop_Send, "m_iAccount");
				if(BotMoney < 0 || BotMoney < BotNewWeaponPrice)
				{
					return;
				}
				SetEntProp(client, Prop_Send, "m_iAccount", BotMoney - BotNewWeaponPrice);

				iEntMainWeaponList[client] = CreateEntityByName(BotNewMainWeaponFather);
				DispatchKeyValue(iEntMainWeaponList[client],"classname",BotNewMainWeapon);		
				DispatchKeyValue(iEntMainWeaponList[client],"ammo",BotNewMainWeaponAmmo);
				DispatchSpawn(iEntMainWeaponList[client]);
				ActivateEntity(iEntMainWeaponList[client]);
				EquipPlayerWeapon(client,iEntMainWeaponList[client]);	
			
				new MyWeaponType = GetEntProp(iEntMainWeaponList[client], Prop_Data, "m_iPrimaryAmmoType");
				if(GetEntProp(client, Prop_Data, "m_iAmmo", 4, MyWeaponType) <= 0)
				{
					SetEntProp(client, Prop_Data, "m_iAmmo", MainWeaponAmmo_ct[TypesOfNewMainWeapon], 4, MyWeaponType); 
				}
			}
		}
		
		//为匪徒bot随机装备新（主）武器
		//匪徒bot装备新（主）武器的比例，第1个数字不要改，第2个数字可以调整。2即意为1/2比例（至多一半的bot装备新主武器，bot获取新主武器还受资金限制）,3即意为1/3比例
		if(terMainCount > 0 && IsClient(client, true) && GetClientTeam(client) == CS_TEAM_T)
		{
			int IsUseNewMainWeapon = GetRandomInt(1,3);
			if(IsUseNewMainWeapon == 1)
			{
				int TypesOfNewMainWeapon = GetRandomInt(0, terMainCount - 1);    //从新（主）武器中随机选择一种
				char BotNewMainWeapon[32];
				char TempStr[20];
				StrCopy(TempStr, 20, MainWeaponNames_t[TypesOfNewMainWeapon]);
				decl String:PreStr[] = "weapon_";
				Format(BotNewMainWeapon, sizeof(BotNewMainWeapon), "%s%s", PreStr, TempStr);
				TrimString(BotNewMainWeapon);
				char BotNewMainWeaponFather[32];
				char TempStr2[20];
				StrCopy(TempStr2, 32, MainWeaponFatherNames_t[TypesOfNewMainWeapon]);
				Format(BotNewMainWeaponFather, sizeof(BotNewMainWeaponFather), "%s%s", PreStr, TempStr2);
				TrimString(BotNewMainWeaponFather);
				char BotNewMainWeaponAmmo[20]; 
				IntToString(MainWeaponAmmo_t[TypesOfNewMainWeapon], BotNewMainWeaponAmmo, 10);
				TrimString(BotNewMainWeaponAmmo);
				int BotNewWeaponPrice = MainWeaponPrice_t[TypesOfNewMainWeapon];
			
				new BotMoney = GetEntProp(client, Prop_Send, "m_iAccount");
				if(BotMoney < 0 || BotMoney < BotNewWeaponPrice)
				{
					return;
				}
				SetEntProp(client, Prop_Send, "m_iAccount", BotMoney - BotNewWeaponPrice);

				iEntMainWeaponList[client] = CreateEntityByName(BotNewMainWeaponFather);
				DispatchKeyValue(iEntMainWeaponList[client],"classname",BotNewMainWeapon);		
				DispatchKeyValue(iEntMainWeaponList[client],"ammo",BotNewMainWeaponAmmo);
				DispatchSpawn(iEntMainWeaponList[client]);
				ActivateEntity(iEntMainWeaponList[client]);
				EquipPlayerWeapon(client,iEntMainWeaponList[client]);	
			
				new MyWeaponType = GetEntProp(iEntMainWeaponList[client], Prop_Data, "m_iPrimaryAmmoType")
				if(GetEntProp(client, Prop_Data, "m_iAmmo", 4, MyWeaponType) <= 0)
				{
					SetEntProp(client, Prop_Data, "m_iAmmo", MainWeaponAmmo_t[TypesOfNewMainWeapon], 4, MyWeaponType); 
				}
			}
		}

		
		if(ctSecCount < 1 && terSecCount < 1)
			return;
        //获取新（副）武器
		//为警察bot随机装备新（副）武器
		//警察bot装备新（副）武器的比例，第1个数字不要改，第2个数字可以调整。2即意为1/2比例（至多一半的bot装备新主武器，bot获取新主武器还受资金限制）,3即意为1/3比例
		if(ctSecCount > 0 && IsClient(client, true) && GetClientTeam(client) == CS_TEAM_CT)
		{
			int IsUseNewSecWeapon = GetRandomInt(1,3);
			if(IsUseNewSecWeapon == 1)
			{
				int TypesOfNewSecWeapon = GetRandomInt(0, ctSecCount - 1);    //从新（副）武器中随机选择一种
				char BotNewSecWeapon[32];
				char TempStr[20];
				StrCopy(TempStr, 20, SecWeaponNames_ct[TypesOfNewSecWeapon]);
				decl String:PreStr[] = "weapon_";
				Format(BotNewSecWeapon, sizeof(BotNewSecWeapon), "%s%s", PreStr, TempStr);
				TrimString(BotNewSecWeapon);
				char BotNewSecWeaponFather[32];
				char TempStr2[20];
				StrCopy(TempStr2, 20, SecWeaponFatherNames_ct[TypesOfNewSecWeapon]);
				Format(BotNewSecWeaponFather, sizeof(BotNewSecWeaponFather), "%s%s", PreStr, TempStr2);
				TrimString(BotNewSecWeaponFather);
				char BotNewSecWeaponAmmo[20]; 
				IntToString(SecWeaponAmmo_ct[TypesOfNewSecWeapon], BotNewSecWeaponAmmo, 10);
				TrimString(BotNewSecWeaponAmmo);
				int BotNewWeaponPrice = SecWeaponPrice_ct[TypesOfNewSecWeapon];
			
				new BotMoney = GetEntProp(client, Prop_Send, "m_iAccount");
				if(BotMoney < 0 || BotMoney < BotNewWeaponPrice)
				{
					return;
				}
				SetEntProp(client, Prop_Send, "m_iAccount", BotMoney - BotNewWeaponPrice);

				iEntSecWeaponList[client] = CreateEntityByName(BotNewSecWeaponFather);
				DispatchKeyValue(iEntSecWeaponList[client],"classname",BotNewSecWeapon);		
				DispatchKeyValue(iEntSecWeaponList[client],"ammo",BotNewSecWeaponAmmo);
				DispatchSpawn(iEntSecWeaponList[client]);
				ActivateEntity(iEntSecWeaponList[client]);
				EquipPlayerWeapon(client,iEntSecWeaponList[client]);	
			
				new MyWeaponType = GetEntProp(iEntSecWeaponList[client], Prop_Data, "m_iPrimaryAmmoType")
				if(GetEntProp(client, Prop_Data, "m_iAmmo", 4, MyWeaponType) <= 0)
				{
					SetEntProp(client, Prop_Data, "m_iAmmo", SecWeaponAmmo_ct[TypesOfNewSecWeapon], 4, MyWeaponType); 
				}
			}
		}
		
		//为匪徒bot随机装备新（副）武器
		//匪徒bot装备新（副）武器的比例，第1个数字不要改，第2个数字可以调整。2即意为1/2比例（至多一半的bot装备新主武器，bot获取新主武器还受资金限制）,3即意为1/3比例
		if(terSecCount > 0 && IsClient(client, true) && GetClientTeam(client) == CS_TEAM_T)
		{
			int IsUseNewSecWeapon = GetRandomInt(1,3);
			if(IsUseNewSecWeapon == 1)
			{
				int TypesOfNewSecWeapon = GetRandomInt(0, terSecCount - 1);    //从新（副）武器中随机选择一种				
				char BotNewSecWeapon[32];
				char TempStr[20];
				StrCopy(TempStr, 20, SecWeaponNames_t[TypesOfNewSecWeapon]);
				decl String:PreStr[] = "weapon_";
				Format(BotNewSecWeapon, sizeof(BotNewSecWeapon), "%s%s", PreStr, TempStr);
				TrimString(BotNewSecWeapon);
				char BotNewSecWeaponFather[32];
				char TempStr2[20];
				StrCopy(TempStr2, 20, SecWeaponFatherNames_t[TypesOfNewSecWeapon]);
				Format(BotNewSecWeaponFather, sizeof(BotNewSecWeaponFather), "%s%s", PreStr, TempStr2);
				TrimString(BotNewSecWeaponFather);
				char BotNewSecWeaponAmmo[20]; 
				IntToString(SecWeaponAmmo_t[TypesOfNewSecWeapon], BotNewSecWeaponAmmo, 10);
				TrimString(BotNewSecWeaponAmmo);
				int BotNewWeaponPrice = SecWeaponPrice_t[TypesOfNewSecWeapon];
			
				new BotMoney = GetEntProp(client, Prop_Send, "m_iAccount");
				if(BotMoney < 0 || BotMoney < BotNewWeaponPrice)
				{
					return;
				}
				SetEntProp(client, Prop_Send, "m_iAccount", BotMoney - BotNewWeaponPrice);

				iEntSecWeaponList[client] = CreateEntityByName(BotNewSecWeaponFather);
				DispatchKeyValue(iEntSecWeaponList[client],"classname",BotNewSecWeapon);		
				DispatchKeyValue(iEntSecWeaponList[client],"ammo",BotNewSecWeaponAmmo);
				DispatchSpawn(iEntSecWeaponList[client]);
				ActivateEntity(iEntSecWeaponList[client]);
				EquipPlayerWeapon(client,iEntSecWeaponList[client]);	
			
				new MyWeaponType = GetEntProp(iEntSecWeaponList[client], Prop_Data, "m_iPrimaryAmmoType")
				if(GetEntProp(client, Prop_Data, "m_iAmmo", 4, MyWeaponType) <= 0)
				{
					SetEntProp(client, Prop_Data, "m_iAmmo", SecWeaponAmmo_t[TypesOfNewSecWeapon], 4, MyWeaponType); 
				}
			}
		}		
	}
}
