#pragma semicolon 1
#include <sourcemod>

enum OS
{
	OS_Windows,
	OS_Linux
}

OS os_RetVal;

EngineVersion ev_RetVal;

public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
	ev_RetVal = GetEngineVersion();
	if (ev_RetVal != Engine_CSGO && ev_RetVal != Engine_Left4Dead && ev_RetVal != Engine_Left4Dead2)
	{
		strcopy(error, err_max, "This is for CS:GO, L4D and L4D2 only");
		return APLRes_SilentFailure;
	}
	
	return APLRes_Success;
}

public Plugin myinfo = 
{
	name = "Block Packet Exploits",
	author = "backwards, cravenge",
	description = "Prevents some of the DoS methods related to packets from slowing the server down",
	version = SOURCEMOD_VERSION,
	url = "https://forums.alliedmods.net/showpost.php?p=2770664&postcount=17"
};

public void OnPluginStart()
{
	os_RetVal = GetServerOS();
	
	GameData gd_Temp = FetchGameData("block_packet_exploits");
	if (gd_Temp == null)
	{
		SetFailState("Game data file not found!");
	}
	
	Address aTemp;
	
	int iTemp, iByte, i;
	
	if (ev_RetVal == Engine_CSGO)
	{
		aTemp = gd_Temp.GetAddress("SomeFunction");
		if (aTemp != Address_Null)
		{
			iTemp = gd_Temp.GetOffset("SomeFunction_RateLimitWarning");
			if (iTemp != -1)
			{
				aTemp += view_as<Address>(iTemp);
				
				iByte = LoadFromAddress(aTemp, NumberType_Int8);
				if (iByte != 0x89 && iByte != 0xFF)
				{
					SetFailState("Offset for \"SomeFunction_RateLimitWarning\" is incorrect!");
				}
				
				iTemp = gd_Temp.GetOffset("SomeFunction_PatchCount");
				if (iTemp > 0)
				{
					for (i = 0; i < iTemp; i++)
					{
						StoreToAddress(aTemp + view_as<Address>(i), 0x90, NumberType_Int8);
					}
				}
				else
				{
					SetFailState("Offset for \"SomeFunction_PatchCount\" is missing!");
				}
			}
			else
			{
				SetFailState("Offset for \"SomeFunction_RateLimitWarning\" must be positive!");
			}
		}
		else
		{
			SetFailState("Address for \"SomeFunction\" returned NULL!");
		}
	}
	
	aTemp = gd_Temp.GetAddress("ProcessPacketHeader");
	if (aTemp != Address_Null)
	{
		char sTemp[32];
		FormatEx(sTemp, sizeof(sTemp), "ProcessPacketHeader_PatchCount%s", (os_RetVal != OS_Linux) ? "" : "A");
		
		iTemp = gd_Temp.GetOffset("ProcessPacketHeader_CorruptedWarning");
		if (iTemp != -1)
		{
			aTemp += view_as<Address>(iTemp);
			
			iByte = LoadFromAddress(aTemp, NumberType_Int8);
			if (iByte != 0x8B && iByte != 0x89 && iByte != 0x50)
			{
				SetFailState("Offset for \"ProcessPacketHeader_CorruptedWarning\" is incorrect!");
			}
			
			iByte = iTemp;
			
			iTemp = gd_Temp.GetOffset(sTemp);
			if (iTemp > 0)
			{
				for (i = 0; i < iTemp; i++)
				{
					StoreToAddress(aTemp + view_as<Address>(i), 0x90, NumberType_Int8);
				}
				
				iTemp = iByte;
				
				aTemp -= view_as<Address>(iTemp);
			}
			else
			{
				SetFailState("Offset for \"%s\" must be positive!", sTemp);
			}
		}
		else
		{
			SetFailState("Offset for \"ProcessPacketHeader_CorruptedWarning\" is missing!");
		}
		
		iTemp = gd_Temp.GetOffset("ProcessPacketHeader_InvalidWarning");
		if (iTemp != -1)
		{
			aTemp += view_as<Address>(iTemp);
			
			iByte = LoadFromAddress(aTemp, NumberType_Int8);
			if (iByte != 0x8B && iByte != 0x89 && iByte != 0x50)
			{
				SetFailState("Offset for \"ProcessPacketHeader_InvalidWarning\" is incorrect!");
			}
			
			if (os_RetVal != OS_Windows)
			{
				ReplaceStringEx(sTemp, sizeof(sTemp), "A", "B");
			}
			
			iTemp = gd_Temp.GetOffset(sTemp);
			if (iTemp > 0)
			{
				for (i = 0; i < iTemp; i++)
				{
					StoreToAddress(aTemp + view_as<Address>(i), 0x90, NumberType_Int8);
				}
				
				PrintToServer("[BPE] Stopped spammable console messages from being printed!");
			}
			else
			{
				SetFailState("Offset for \"%s\" must be positive!", sTemp);
			}
		}
		else
		{
			SetFailState("Offset for \"ProcessPacketHeader_InvalidWarning\" is missing!");
		}
	}
	else
	{
		SetFailState("Address for \"ProcessPacketHeader\" returned NULL!");
	}
	
	CreateConVar("block_packet_exploits_version", SOURCEMOD_VERSION, "Version of the plug-in", FCVAR_NOTIFY);
}

OS GetServerOS()
{
	static char sCmdLine[4];
	GetCommandLine(sCmdLine, sizeof(sCmdLine));
	return (sCmdLine[0] == '.') ? OS_Linux : OS_Windows;
}

GameData FetchGameData(const char[] file)
{
	char sFilePath[128];
	BuildPath(Path_SM, sFilePath, sizeof(sFilePath), "gamedata/%s.txt", file);
	if (!FileExists(sFilePath))
	{
		File fileTemp = OpenFile(sFilePath, "w");
		if (fileTemp == null)
		{
			SetFailState("Something went wrong while creating the game data file!");
		}
		
		fileTemp.WriteLine("\"Games\"");
		fileTemp.WriteLine("{");
		fileTemp.WriteLine("	\"#default\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"Addresses\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"ProcessPacketHeader\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"signature\"	\"CNetChan::ProcessPacketHeader\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Offsets\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCount\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"12\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("	");
		fileTemp.WriteLine("	\"#default\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"#supported\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"engine\"	\"csgo\"");
		fileTemp.WriteLine("			\"engine\"	\"left4dead2\"");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Offsets\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCountA\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"linux\"		\"27\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("	");
		fileTemp.WriteLine("	\"#default\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"#supported\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"engine\"	\"left4dead\"");
		fileTemp.WriteLine("			\"engine\"	\"left4dead2\"");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Signatures\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"CNetChan::ProcessPacketHeader\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"library\"	\"engine\"");
		fileTemp.WriteLine("				\"linux\"		\"@_ZN8CNetChan19ProcessPacketHeaderEP11netpacket_s\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("	");
		fileTemp.WriteLine("	\"csgo\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"Addresses\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"SomeFunction\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"signature\"	\"SomeFunction\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Offsets\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"SomeFunction_RateLimitWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"60\"");
		fileTemp.WriteLine("				\"linux\"		\"37\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"SomeFunction_PatchCount\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"18\"");
		fileTemp.WriteLine("				\"linux\"		\"20\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_CorruptedWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"1039\"");
		fileTemp.WriteLine("				\"linux\"		\"772\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_InvalidWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"2156\"");
		fileTemp.WriteLine("				\"linux\"		\"2549\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCountB\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"linux\"		\"23\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Signatures\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"SomeFunction\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"library\"	\"engine\"");
		fileTemp.WriteLine("				\"linux\"		\"\\x55\\x89\\x2A\\x53\\x83\\x2A\\x2A\\x8B\\x2A\\x2A\\x2A\\x2A\\x2A\\x85\\x2A\\x7E\\x2A\\xC7\\x2A\\x2A\\x2A\\x2A\\x2A\\x2A\\x2A\\xC7\"");
		fileTemp.WriteLine("				/* 55 89 ? 53 83 ? ? 8B ? ? ? ? ? 85 ? 7E ? C7 ? ? ? ? ? ? ? C7 */");
		fileTemp.WriteLine("				\"windows\"	\"\\x83\\x2A\\x2A\\x2A\\x2A\\x2A\\x2A\\x7E\\x2A\\xA1\\x2A\\x2A\\x2A\\x2A\\x8B\\x2A\\x56\"");
		fileTemp.WriteLine("				/* 83 ? ? ? ? ? ? 7E ? A1 ? ? ? ? 8B ? 56 */");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"CNetChan::ProcessPacketHeader\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"library\"	\"engine\"");
		fileTemp.WriteLine("				\"linux\"		\"\\x55\\x89\\x2A\\x57\\x56\\x53\\x83\\x2A\\x2A\\x8B\\x2A\\x2A\\x8B\\x2A\\x2A\\x8B\\x2A\\x2A\\x83\\x2A\\x2A\\x0F\\x8E\\x2A\\x2A\\x2A\\x2A\\x8B\\x2A\\x2A\\x2A\\x2A\\x2A\\x8D\"");
		fileTemp.WriteLine("				/* 55 89 ? 57 56 53 83 ? ? 8B ? ? 8B ? ? 8B ? ? 83 ? ? 0F 8E ? ? ? ? 8B ? ? ? ? ? 8D */");
		fileTemp.WriteLine("				\"windows\"	\"\\x55\\x8B\\x2A\\x83\\x2A\\x2A\\x53\\x56\\x8B\\x2A\\x2A\\xBA\\x2A\\x2A\\x2A\\x2A\\x57\\x8B\\x2A\\x89\"");
		fileTemp.WriteLine("				/* 55 8B ? 83 ? ? 53 56 8B ? ? BA ? ? ? ? 57 8B ? 89 */");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("	");
		fileTemp.WriteLine("	\"left4dead\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"Offsets\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"ProcessPacketHeader_CorruptedWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"1089\"");
		fileTemp.WriteLine("				\"linux\"		\"894\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCountA\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"linux\"		\"30\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_InvalidWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"2290\"");
		fileTemp.WriteLine("				\"linux\"		\"2863\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCountB\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"linux\"		\"22\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Signatures\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"CNetChan::ProcessPacketHeader\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"library\"	\"engine\"");
		fileTemp.WriteLine("				\"windows\"	\"\\x83\\x2A\\x2A\\x53\\x55\\x56\\x8B\\x2A\\x2A\\x2A\\x89\\x2A\\x2A\\x2A\\x8B\\x2A\\x2A\\x33\"");
		fileTemp.WriteLine("				/* 83 ? ? 53 55 56 8B ? ? ? 89 ? ? ? 8B ? ? 33 */");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("	");
		fileTemp.WriteLine("	\"left4dead2\"");
		fileTemp.WriteLine("	{");
		fileTemp.WriteLine("		\"Offsets\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"ProcessPacketHeader_CorruptedWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"1057\"");
		fileTemp.WriteLine("				\"linux\"		\"801\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_InvalidWarning\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"windows\"	\"2304\"");
		fileTemp.WriteLine("				\"linux\"		\"2544\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("			\"ProcessPacketHeader_PatchCountB\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"linux\"		\"20\"");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("		");
		fileTemp.WriteLine("		\"Signatures\"");
		fileTemp.WriteLine("		{");
		fileTemp.WriteLine("			\"CNetChan::ProcessPacketHeader\"");
		fileTemp.WriteLine("			{");
		fileTemp.WriteLine("				\"library\"	\"engine\"");
		fileTemp.WriteLine("				\"windows\"	\"\\x55\\x8B\\x2A\\x83\\x2A\\x2A\\x53\\x56\\x8B\\x2A\\x2A\\x89\\x2A\\x2A\\x8B\\x2A\\x2A\\x57\\x33\"");
		fileTemp.WriteLine("				/* 55 8B ? 83 ? ? 53 56 8B ? ? 89 ? ? 8B ? ? 57 33 */");
		fileTemp.WriteLine("			}");
		fileTemp.WriteLine("		}");
		fileTemp.WriteLine("	}");
		fileTemp.WriteLine("}");
		
		fileTemp.Close();
	}
	return new GameData(file);
}

